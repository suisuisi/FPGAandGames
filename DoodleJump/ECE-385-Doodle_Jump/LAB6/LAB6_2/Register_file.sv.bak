module Register_file (
    input [2:0] DRMUXOUT,SR1MUXOUT, SR2, 
    input LD_REG, Clk, Reset,
    input [15:0] BUS_VAL,
    output logic [15:0] SR2OUT,SR1OUT
);
    logic [15:0]R0_OUT,R1_OUT,R2_OUT,R3_OUT,R4_OUT,R5_OUT,R6_OUT,R7_OUT;
    logic [15:0]R0_IN,R1_IN,R2_IN,R3_IN,R4_IN,R5_IN,R6_IN,R7_IN;

    Register R0(
        .Din(R0_IN),
        .Load(LD_REG),
        .Reset(Reset),
        .clk(Clk),
        .Dout(R0_OUT)
    );

    Register R1(
        .Din(R1_IN),
        .Load(LD_REG),
        .Reset(Reset),
        .clk(Clk),
        .Dout(R1_OUT)
    );

    Register R2(
        .Din(R2_IN),
        .Load(LD_REG),
        .Reset(Reset),
        .clk(Clk),
        .Dout(R2_OUT)
    );

    Register R3(
        .Din(R3_IN),
        .Load(LD_REG),
        .Reset(Reset),
        .clk(Clk),
        .Dout(R3_OUT)
    );

    Register R4(
        .Din(R4_IN),
        .Load(LD_REG),
        .Reset(Reset),
        .clk(Clk),
        .Dout(R4_OUT)
    );

    Register R5(
        .Din(R5_IN),
        .Load(LD_REG),
        .Reset(Reset),
        .clk(Clk),
        .Dout(R5_OUT)
    );

    Register R6(
        .Din(R6_IN),
        .Load(LD_REG),
        .Reset(Reset),
        .clk(Clk),
        .Dout(R6_OUT)
    );

    Register R7(
        .Din(R7_IN),
        .Load(LD_REG),
        .Reset(Reset),
        .clk(Clk),
        .Dout(R7_OUT)
    );

    always_comb 
        begin 
            case(DRMUXOUT)
                3'b000: R0_IN = BUS_VAL;
                3'b001: R1_IN = BUS_VAL;
                3'b010: R2_IN = BUS_VAL;
                3'b011: R3_IN = BUS_VAL;
                3'b100: R4_IN = BUS_VAL;
                3'b101: R5_IN = BUS_VAL;
                3'b110: R6_IN = BUS_VAL;
                3'b111: R7_IN = BUS_VAL; 
            endcase           
        end

    always_comb 
        begin 
            case(SR2)
                3'b000: SR2OUT = R0_OUT;
                3'b001: SR2OUT = R1_OUT;
                3'b010: SR2OUT = R2_OUT;
                3'b011: SR2OUT = R3_OUT;
                3'b100: SR2OUT = R4_OUT;
                3'b101: SR2OUT = R5_OUT;
                3'b110: SR2OUT = R6_OUT;
                3'b111: SR2OUT = R7_OUT;
                default:SR2OUT = 16'b0;
            endcase            
        end

    always_comb 
        begin 
            case(SR1MUXOUT)
                3'b000: SR1OUT = R0_OUT;
                3'b001: SR1OUT = R1_OUT;
                3'b010: SR1OUT = R2_OUT;
                3'b011: SR1OUT = R3_OUT;
                3'b100: SR1OUT = R4_OUT;
                3'b101: SR1OUT = R5_OUT;
                3'b110: SR1OUT = R6_OUT;
                3'b111: SR1OUT = R7_OUT; 
                default:SR1OUT = 16'b0;
            endcase           
        end
    

endmodule