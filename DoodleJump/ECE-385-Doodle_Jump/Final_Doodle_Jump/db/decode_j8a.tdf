--lpm_decode CBX_DECLARE_ALL_CONNECTED_PORTS="OFF" DEVICE_FAMILY="Cyclone IV E" LPM_DECODES=7 LPM_WIDTH=3 data eq
--VERSION_BEGIN 18.1 cbx_cycloneii 2018:09:12:13:04:24:SJ cbx_lpm_add_sub 2018:09:12:13:04:24:SJ cbx_lpm_compare 2018:09:12:13:04:24:SJ cbx_lpm_decode 2018:09:12:13:04:24:SJ cbx_mgl 2018:09:12:13:10:36:SJ cbx_nadder 2018:09:12:13:04:24:SJ cbx_stratix 2018:09:12:13:04:24:SJ cbx_stratixii 2018:09:12:13:04:24:SJ  VERSION_END


-- Copyright (C) 2018  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details.



--synthesis_resources = lut 8 
SUBDESIGN decode_j8a
( 
	data[2..0]	:	input;
	eq[6..0]	:	output;
) 
VARIABLE 
	data_wire[2..0]	: WIRE;
	eq_node[6..0]	: WIRE;
	eq_wire[7..0]	: WIRE;
	w_anode497w[3..0]	: WIRE;
	w_anode515w[3..0]	: WIRE;
	w_anode526w[3..0]	: WIRE;
	w_anode537w[3..0]	: WIRE;
	w_anode548w[3..0]	: WIRE;
	w_anode559w[3..0]	: WIRE;
	w_anode570w[3..0]	: WIRE;
	w_anode581w[3..0]	: WIRE;

BEGIN 
	data_wire[] = data[];
	eq[] = eq_node[];
	eq_node[6..0] = eq_wire[6..0];
	eq_wire[] = ( w_anode581w[3..3], w_anode570w[3..3], w_anode559w[3..3], w_anode548w[3..3], w_anode537w[3..3], w_anode526w[3..3], w_anode515w[3..3], w_anode497w[3..3]);
	w_anode497w[] = ( (w_anode497w[2..2] & (! data_wire[2..2])), (w_anode497w[1..1] & (! data_wire[1..1])), (w_anode497w[0..0] & (! data_wire[0..0])), B"1");
	w_anode515w[] = ( (w_anode515w[2..2] & (! data_wire[2..2])), (w_anode515w[1..1] & (! data_wire[1..1])), (w_anode515w[0..0] & data_wire[0..0]), B"1");
	w_anode526w[] = ( (w_anode526w[2..2] & (! data_wire[2..2])), (w_anode526w[1..1] & data_wire[1..1]), (w_anode526w[0..0] & (! data_wire[0..0])), B"1");
	w_anode537w[] = ( (w_anode537w[2..2] & (! data_wire[2..2])), (w_anode537w[1..1] & data_wire[1..1]), (w_anode537w[0..0] & data_wire[0..0]), B"1");
	w_anode548w[] = ( (w_anode548w[2..2] & data_wire[2..2]), (w_anode548w[1..1] & (! data_wire[1..1])), (w_anode548w[0..0] & (! data_wire[0..0])), B"1");
	w_anode559w[] = ( (w_anode559w[2..2] & data_wire[2..2]), (w_anode559w[1..1] & (! data_wire[1..1])), (w_anode559w[0..0] & data_wire[0..0]), B"1");
	w_anode570w[] = ( (w_anode570w[2..2] & data_wire[2..2]), (w_anode570w[1..1] & data_wire[1..1]), (w_anode570w[0..0] & (! data_wire[0..0])), B"1");
	w_anode581w[] = ( (w_anode581w[2..2] & data_wire[2..2]), (w_anode581w[1..1] & data_wire[1..1]), (w_anode581w[0..0] & data_wire[0..0]), B"1");
END;
--VALID FILE
