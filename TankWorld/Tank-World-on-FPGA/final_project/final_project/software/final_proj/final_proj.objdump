
final_proj.elf:     file format elf32-littlenios2
final_proj.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x10000230

Program Header:
    LOAD off    0x00001000 vaddr 0x10000000 paddr 0x10000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x10000020 paddr 0x10000020 align 2**12
         filesz 0x00005798 memsz 0x00005798 flags r-x
    LOAD off    0x000067b8 vaddr 0x100057b8 paddr 0x10006acc align 2**12
         filesz 0x00001314 memsz 0x00001314 flags rw-
    LOAD off    0x00007de0 vaddr 0x10007de0 paddr 0x10007de0 align 2**12
         filesz 0x00000000 memsz 0x00000124 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  10000000  10000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  10000020  10000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00004db8  10000230  10000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000007d0  10004fe8  10004fe8  00005fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001314  100057b8  10006acc  000067b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000124  10007de0  10007de0  00007de0  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00007acc  2**0
                  CONTENTS
  7 .sdram        00000000  10007f04  10007f04  00007acc  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00007acc  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000738  00000000  00000000  00007af0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00009561  00000000  00000000  00008228  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003586  00000000  00000000  00011789  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00003b97  00000000  00000000  00014d0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000104c  00000000  00000000  000188a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00002145  00000000  00000000  000198f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0000170f  00000000  00000000  0001ba39  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  0001d148  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000300  00000000  00000000  0001d188  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0001f4a2  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0001f4a5  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0001f4b1  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0001f4b2  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0001f4b3  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0001f4b7  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0001f4bb  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0001f4bf  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0001f4ca  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0001f4d5  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000009  00000000  00000000  0001f4e0  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000038  00000000  00000000  0001f4e9  2**0
                  CONTENTS, READONLY
 30 .jdi          0000535b  00000000  00000000  0001f521  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00072656  00000000  00000000  0002487c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
10000000 l    d  .entry	00000000 .entry
10000020 l    d  .exceptions	00000000 .exceptions
10000230 l    d  .text	00000000 .text
10004fe8 l    d  .rodata	00000000 .rodata
100057b8 l    d  .rwdata	00000000 .rwdata
10007de0 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
10007f04 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../final_proj_bsp//obj/HAL/src/crt0.o
10000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 io_handler.c
00000000 l    df *ABS*	00000000 main.c
10007de0 l     O .bss	00000002 ctl_reg.3589
10007de2 l     O .bss	00000002 no_device.3590
00000000 l    df *ABS*	00000000 usb.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
10002440 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
100057b8 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 alt_load.c
10002ce0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
10002e78 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
10002fb4 l     F .text	00000034 alt_dev_reg
10005898 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
10003290 l     F .text	0000020c altera_avalon_jtag_uart_irq
1000349c l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
10003d58 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
10003e8c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
10003eb8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
10004318 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
10004478 l     F .text	0000003c alt_get_errno
100044b4 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
10007e00 g     O .bss	00000004 alt_instruction_exception_handler
10002dcc g     F .text	0000007c alt_main
10002390 g     F .text	00000080 _puts_r
10007e04 g     O .bss	00000100 alt_irq
10006acc g       *ABS*	00000000 __flash_rwdata_start
10002344 g     F .text	0000004c printf
10002208 g     F .text	00000080 UsbGetRetryCnt
1000026c g     F .text	00000088 IO_init
10004924 g     F .text	00000024 altera_nios2_gen2_irq_init
10000000 g     F .entry	0000000c __reset
10000020 g       *ABS*	00000000 __flash_exceptions_start
10007de4 g     O .bss	00000004 errno
10007dec g     O .bss	00000004 alt_argv
1000eaa0 g       *ABS*	00000000 _gp
10002e48 g     F .text	00000030 usleep
10006920 g     O .rwdata	00000180 alt_fd_list
10004948 g     F .text	00000090 alt_find_dev
10004ca4 g     F .text	00000028 memcpy
100043fc g     F .text	0000007c alt_io_redirect
10004fe8 g       *ABS*	00000000 __DTOR_END__
10002410 g     F .text	00000014 puts
10004ba4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
10003694 g     F .text	0000021c altera_avalon_jtag_uart_read
10002308 g     F .text	0000003c _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
10002bfc g     F .text	00000064 .hidden __udivsi3
10001894 g     F .text	00000268 UsbGetConfigDesc2
10006ab8 g     O .rwdata	00000004 alt_max_fd
10006aa0 g     O .rwdata	00000004 _global_impure_ptr
10007f04 g       *ABS*	00000000 __bss_end
10004228 g     F .text	000000f0 alt_iic_isr_register
1000481c g     F .text	00000108 alt_tick
100012e4 g     F .text	00000100 UsbSetAddress
100041dc g     F .text	0000004c alt_ic_irq_enabled
10004780 g     F .text	0000009c alt_alarm_stop
10007df4 g     O .bss	00000004 alt_irq_active
100000fc g     F .exceptions	000000d4 alt_irq_handler
100068f8 g     O .rwdata	00000028 alt_dev_null
10003e6c g     F .text	00000020 alt_dcache_flush_all
10000364 g     F .text	00000068 IO_read
10006acc g       *ABS*	00000000 __ram_rwdata_end
10006ab0 g     O .rwdata	00000008 alt_dev_list
10002eb4 g     F .text	00000100 write
100057b8 g       *ABS*	00000000 __ram_rodata_end
10002288 g     F .text	00000080 UsbPrintMem
10002c60 g     F .text	00000058 .hidden __umodsi3
10007f04 g       *ABS*	00000000 end
100031d0 g     F .text	000000c0 altera_avalon_jtag_uart_init
100001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
10004fe8 g       *ABS*	00000000 __CTOR_LIST__
18000000 g       *ABS*	00000000 __alt_stack_pointer
100038b0 g     F .text	00000224 altera_avalon_jtag_uart_write
100024ac g     F .text	0000052c ___vfprintf_internal_r
10001bfc g     F .text	00000100 UsbClassRequest
10004e24 g     F .text	00000190 __call_exitprocs
10000230 g     F .text	0000003c _start
10007df8 g     O .bss	00000004 _alt_tick_rate
10007dfc g     O .bss	00000004 _alt_nticks
10003020 g     F .text	0000004c alt_sys_init
10004ccc g     F .text	00000158 __register_exitproc
1000353c g     F .text	00000068 altera_avalon_jtag_uart_close
10002cb8 g     F .text	00000028 .hidden __mulsi3
100057b8 g       *ABS*	00000000 __ram_rwdata_start
10004fe8 g       *ABS*	00000000 __ram_rodata_start
100013e4 g     F .text	00000148 UsbGetDeviceDesc1
1000306c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
10004ae0 g     F .text	000000c4 alt_get_fd
10003c00 g     F .text	00000158 alt_busy_sleep
10004c74 g     F .text	00000030 memcmp
1000312c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
10007f04 g       *ABS*	00000000 __alt_stack_base
1000317c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
10002184 g     F .text	00000084 UsbWaitTDListDone
100049d8 g     F .text	00000108 alt_find_file
10003ef4 g     F .text	000000a4 alt_dev_llist_insert
100029f4 g     F .text	000000b8 __sfvwrite_small_dev
10007de0 g       *ABS*	00000000 __bss_start
100003cc g     F .text	00000dc0 main
10007df0 g     O .bss	00000004 alt_envp
100030cc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
10001afc g     F .text	00000100 UsbSetConfig
10006abc g     O .rwdata	00000004 alt_errno
10002b04 g     F .text	00000084 .hidden __divsi3
10001cfc g     F .text	00000148 UsbGetHidDesc
10004fe8 g       *ABS*	00000000 __CTOR_END__
10004fe8 g       *ABS*	00000000 __flash_rodata_start
10004fe8 g       *ABS*	00000000 __DTOR_LIST__
100011e4 g     F .text	0000004c UsbRead
10002fe8 g     F .text	00000038 alt_irq_init
100046fc g     F .text	00000084 alt_release_fd
10004c40 g     F .text	00000014 atexit
10002aac g     F .text	00000058 _write_r
10006aa4 g     O .rwdata	00000004 _impure_ptr
10007de8 g     O .bss	00000004 alt_argc
10003ff8 g     F .text	00000060 _do_dtors
10000020 g       .exceptions	00000000 alt_irq_entry
10006aa8 g     O .rwdata	00000008 alt_fs_list
10001e44 g     F .text	00000340 UsbGetReportDesc
10000020 g       *ABS*	00000000 __ram_exceptions_start
10004078 g     F .text	00000050 alt_ic_isr_register
10006acc g       *ABS*	00000000 _edata
10007f04 g       *ABS*	00000000 _end
1000118c g     F .text	00000058 UsbWrite
10000230 g       *ABS*	00000000 __ram_exceptions_end
100035a4 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
10004150 g     F .text	0000008c alt_ic_irq_disable
10004c54 g     F .text	00000020 exit
10002b88 g     F .text	00000074 .hidden __modsi3
18000000 g       *ABS*	00000000 __alt_data_end
10000020 g     F .exceptions	00000000 alt_exception
10000000 g       *ABS*	00000000 __alt_mem_sdram
100002f4 g     F .text	00000070 IO_write
10004fb4 g     F .text	00000034 _exit
10003ad4 g     F .text	0000012c alt_alarm_start
10002424 g     F .text	0000001c strlen
100045a0 g     F .text	0000015c open
10004058 g     F .text	00000020 alt_icache_flush_all
10006ac0 g     O .rwdata	00000004 alt_priority_mask
100040c8 g     F .text	00000088 alt_ic_irq_enable
100029d8 g     F .text	0000001c __vfprintf_internal
10001704 g     F .text	00000190 UsbGetConfigDesc1
10006ac4 g     O .rwdata	00000008 alt_alarm_list
10003f98 g     F .text	00000060 _do_ctors
10001230 g     F .text	000000b4 UsbSoftReset
10003d94 g     F .text	000000d8 close
1000152c g     F .text	000001d8 UsbGetDeviceDesc2
10002d48 g     F .text	00000084 alt_load



Disassembly of section .entry:

10000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
10000000:	00440034 	movhi	at,4096
    ori r1, r1, %lo(_start)
10000004:	08408c14 	ori	at,at,560
    jmp r1
10000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

10000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
10000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
10000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
10000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
1000002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
10000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
10000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
10000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
1000003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
10000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
10000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
10000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
1000004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
10000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
10000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
10000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
1000005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
10000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
10000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
10000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
1000006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
10000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
10000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
10000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
1000007c:	10000326 	beq	r2,zero,1000008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
10000080:	20000226 	beq	r4,zero,1000008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
10000084:	00000fc0 	call	100000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
10000088:	00000706 	br	100000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
1000008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
10000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
10000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
10000098:	00001d00 	call	100001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
1000009c:	1000021e 	bne	r2,zero,100000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
100000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
100000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
100000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
100000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
100000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
100000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
100000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
100000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
100000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
100000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
100000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
100000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
100000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
100000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
100000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
100000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
100000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
100000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
100000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
100000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
100000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
100000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
100000f8:	ef80083a 	eret

100000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
100000fc:	defff904 	addi	sp,sp,-28
10000100:	dfc00615 	stw	ra,24(sp)
10000104:	df000515 	stw	fp,20(sp)
10000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
1000010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
10000110:	0005313a 	rdctl	r2,ipending
10000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
10000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
1000011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
10000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
10000124:	00800044 	movi	r2,1
10000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
1000012c:	e0fffb17 	ldw	r3,-20(fp)
10000130:	e0bffc17 	ldw	r2,-16(fp)
10000134:	1884703a 	and	r2,r3,r2
10000138:	10001426 	beq	r2,zero,1000018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
1000013c:	00840034 	movhi	r2,4096
10000140:	109f8104 	addi	r2,r2,32260
10000144:	e0fffd17 	ldw	r3,-12(fp)
10000148:	180690fa 	slli	r3,r3,3
1000014c:	10c5883a 	add	r2,r2,r3
10000150:	10c00017 	ldw	r3,0(r2)
10000154:	00840034 	movhi	r2,4096
10000158:	109f8104 	addi	r2,r2,32260
1000015c:	e13ffd17 	ldw	r4,-12(fp)
10000160:	200890fa 	slli	r4,r4,3
10000164:	1105883a 	add	r2,r2,r4
10000168:	10800104 	addi	r2,r2,4
1000016c:	10800017 	ldw	r2,0(r2)
10000170:	1009883a 	mov	r4,r2
10000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
10000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
1000017c:	0005313a 	rdctl	r2,ipending
10000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
10000184:	e0bfff17 	ldw	r2,-4(fp)
10000188:	00000706 	br	100001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
1000018c:	e0bffc17 	ldw	r2,-16(fp)
10000190:	1085883a 	add	r2,r2,r2
10000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
10000198:	e0bffd17 	ldw	r2,-12(fp)
1000019c:	10800044 	addi	r2,r2,1
100001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
100001a4:	003fe106 	br	1000012c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
100001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
100001ac:	e0bffb17 	ldw	r2,-20(fp)
100001b0:	103fdb1e 	bne	r2,zero,10000120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
100001b4:	0001883a 	nop
}
100001b8:	0001883a 	nop
100001bc:	e037883a 	mov	sp,fp
100001c0:	dfc00117 	ldw	ra,4(sp)
100001c4:	df000017 	ldw	fp,0(sp)
100001c8:	dec00204 	addi	sp,sp,8
100001cc:	f800283a 	ret

100001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
100001d0:	defffb04 	addi	sp,sp,-20
100001d4:	dfc00415 	stw	ra,16(sp)
100001d8:	df000315 	stw	fp,12(sp)
100001dc:	df000304 	addi	fp,sp,12
100001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
100001e4:	00bfffc4 	movi	r2,-1
100001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
100001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
100001f0:	d0a4d817 	ldw	r2,-27808(gp)
100001f4:	10000726 	beq	r2,zero,10000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
100001f8:	d0a4d817 	ldw	r2,-27808(gp)
100001fc:	e0fffd17 	ldw	r3,-12(fp)
10000200:	e1bffe17 	ldw	r6,-8(fp)
10000204:	e17fff17 	ldw	r5,-4(fp)
10000208:	1809883a 	mov	r4,r3
1000020c:	103ee83a 	callr	r2
10000210:	00000206 	br	1000021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
10000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
10000218:	0005883a 	mov	r2,zero
}
1000021c:	e037883a 	mov	sp,fp
10000220:	dfc00117 	ldw	ra,4(sp)
10000224:	df000017 	ldw	fp,0(sp)
10000228:	dec00204 	addi	sp,sp,8
1000022c:	f800283a 	ret

Disassembly of section .text:

10000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
10000230:	06c60034 	movhi	sp,6144
    ori sp, sp, %lo(__alt_stack_pointer)
10000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
10000238:	06840034 	movhi	gp,4096
    ori gp, gp, %lo(_gp)
1000023c:	d6baa814 	ori	gp,gp,60064
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
10000240:	00840034 	movhi	r2,4096
    ori r2, r2, %lo(__bss_start)
10000244:	109f7814 	ori	r2,r2,32224

    movhi r3, %hi(__bss_end)
10000248:	00c40034 	movhi	r3,4096
    ori r3, r3, %lo(__bss_end)
1000024c:	18dfc114 	ori	r3,r3,32516

    beq r2, r3, 1f
10000250:	10c00326 	beq	r2,r3,10000260 <_start+0x30>

0:
    stw zero, (r2)
10000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
10000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
1000025c:	10fffd36 	bltu	r2,r3,10000254 <__alt_data_end+0xf8000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
10000260:	0002d480 	call	10002d48 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
10000264:	0002dcc0 	call	10002dcc <alt_main>

10000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
10000268:	003fff06 	br	10000268 <__alt_data_end+0xf8000268>

1000026c <IO_init>:
//io_handler.c
#include "io_handler.h"
#include <stdio.h>

void IO_init(void)
{
1000026c:	deffff04 	addi	sp,sp,-4
10000270:	df000015 	stw	fp,0(sp)
10000274:	d839883a 	mov	fp,sp
	*otg_hpi_reset = 1;
10000278:	00800804 	movi	r2,32
1000027c:	00c00044 	movi	r3,1
10000280:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
10000284:	00801004 	movi	r2,64
10000288:	00c00044 	movi	r3,1
1000028c:	10c00005 	stb	r3,0(r2)
	*otg_hpi_r = 1;
10000290:	00801804 	movi	r2,96
10000294:	00c00044 	movi	r3,1
10000298:	10c00005 	stb	r3,0(r2)
	*otg_hpi_w = 1;
1000029c:	00801404 	movi	r2,80
100002a0:	00c00044 	movi	r3,1
100002a4:	10c00005 	stb	r3,0(r2)
	*otg_hpi_address = 0;
100002a8:	00802004 	movi	r2,128
100002ac:	10000015 	stw	zero,0(r2)
	*otg_hpi_data = 0;
100002b0:	00801c04 	movi	r2,112
100002b4:	10000015 	stw	zero,0(r2)
	// Reset OTG chip
	*otg_hpi_cs = 0;
100002b8:	00801004 	movi	r2,64
100002bc:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 0;
100002c0:	00800804 	movi	r2,32
100002c4:	10000005 	stb	zero,0(r2)
	*otg_hpi_reset = 1;
100002c8:	00800804 	movi	r2,32
100002cc:	00c00044 	movi	r3,1
100002d0:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
100002d4:	00801004 	movi	r2,64
100002d8:	00c00044 	movi	r3,1
100002dc:	10c00005 	stb	r3,0(r2)
}
100002e0:	0001883a 	nop
100002e4:	e037883a 	mov	sp,fp
100002e8:	df000017 	ldw	fp,0(sp)
100002ec:	dec00104 	addi	sp,sp,4
100002f0:	f800283a 	ret

100002f4 <IO_write>:

void IO_write(alt_u8 Address, alt_u16 Data)
{
100002f4:	defffd04 	addi	sp,sp,-12
100002f8:	df000215 	stw	fp,8(sp)
100002fc:	df000204 	addi	fp,sp,8
10000300:	2007883a 	mov	r3,r4
10000304:	2805883a 	mov	r2,r5
10000308:	e0fffe05 	stb	r3,-8(fp)
1000030c:	e0bfff0d 	sth	r2,-4(fp)
//*************************************************************************//
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	*otg_hpi_address = Address;
10000310:	00802004 	movi	r2,128
10000314:	e0fffe03 	ldbu	r3,-8(fp)
10000318:	10c00015 	stw	r3,0(r2)
	*otg_hpi_data = Data;
1000031c:	00801c04 	movi	r2,112
10000320:	e0ffff0b 	ldhu	r3,-4(fp)
10000324:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
10000328:	00801004 	movi	r2,64
1000032c:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 0;
10000330:	00801404 	movi	r2,80
10000334:	10000005 	stb	zero,0(r2)
	*otg_hpi_w = 1;
10000338:	00801404 	movi	r2,80
1000033c:	00c00044 	movi	r3,1
10000340:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
10000344:	00801004 	movi	r2,64
10000348:	00c00044 	movi	r3,1
1000034c:	10c00005 	stb	r3,0(r2)
}
10000350:	0001883a 	nop
10000354:	e037883a 	mov	sp,fp
10000358:	df000017 	ldw	fp,0(sp)
1000035c:	dec00104 	addi	sp,sp,4
10000360:	f800283a 	ret

10000364 <IO_read>:

alt_u16 IO_read(alt_u8 Address)
{
10000364:	defffd04 	addi	sp,sp,-12
10000368:	df000215 	stw	fp,8(sp)
1000036c:	df000204 	addi	fp,sp,8
10000370:	2005883a 	mov	r2,r4
10000374:	e0bfff05 	stb	r2,-4(fp)
//									TASK								   //
//*************************************************************************//
//							Write this function							   //
//*************************************************************************//
	//printf("%x\n",temp);
	*otg_hpi_address = Address;
10000378:	00802004 	movi	r2,128
1000037c:	e0ffff03 	ldbu	r3,-4(fp)
10000380:	10c00015 	stw	r3,0(r2)
	*otg_hpi_cs = 0;
10000384:	00801004 	movi	r2,64
10000388:	10000005 	stb	zero,0(r2)
	*otg_hpi_r = 0;
1000038c:	00801804 	movi	r2,96
10000390:	10000005 	stb	zero,0(r2)
	temp = *otg_hpi_data;
10000394:	00801c04 	movi	r2,112
10000398:	10800017 	ldw	r2,0(r2)
1000039c:	e0bffe0d 	sth	r2,-8(fp)
	*otg_hpi_r = 1;
100003a0:	00801804 	movi	r2,96
100003a4:	00c00044 	movi	r3,1
100003a8:	10c00005 	stb	r3,0(r2)
	*otg_hpi_cs = 1;
100003ac:	00801004 	movi	r2,64
100003b0:	00c00044 	movi	r3,1
100003b4:	10c00005 	stb	r3,0(r2)
	return temp;
100003b8:	e0bffe0b 	ldhu	r2,-8(fp)
}
100003bc:	e037883a 	mov	sp,fp
100003c0:	df000017 	ldw	fp,0(sp)
100003c4:	dec00104 	addi	sp,sp,4
100003c8:	f800283a 	ret

100003cc <main>:
//
//                                Main function
//
//----------------------------------------------------------------------------------------//
int main(void)
{
100003cc:	defffa04 	addi	sp,sp,-24
100003d0:	dfc00515 	stw	ra,20(sp)
100003d4:	df000415 	stw	fp,16(sp)
100003d8:	df000404 	addi	fp,sp,16
	IO_init();
100003dc:	000026c0 	call	1000026c <IO_init>

	alt_u16 intStat;
	alt_u16 usb_ctl_val;
	static alt_u16 ctl_reg = 0;
	static alt_u16 no_device = 0;
	alt_u16 fs_device = 0;
100003e0:	e03ffd0d 	sth	zero,-12(fp)
	unsigned int keycode;
	alt_u8 toggle = 0;
100003e4:	e03ffc85 	stb	zero,-14(fp)
	alt_u8 data_size;
	alt_u8 hot_plug_count;
	alt_u16 code;

	printf("USB keyboard setup...\n\n");
100003e8:	01040034 	movhi	r4,4096
100003ec:	2113fa04 	addi	r4,r4,20456
100003f0:	00024100 	call	10002410 <puts>

	//----------------------------------------SIE1 initial---------------------------------------------------//
	USB_HOT_PLUG:
	UsbSoftReset();
100003f4:	00012300 	call	10001230 <UsbSoftReset>

	// STEP 1a:
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
100003f8:	000b883a 	mov	r5,zero
100003fc:	01005104 	movi	r4,324
10000400:	000118c0 	call	1000118c <UsbWrite>
	UsbWrite (HOST1_STAT_REG, 0xFFFF);
10000404:	017fffd4 	movui	r5,65535
10000408:	01302414 	movui	r4,49296
1000040c:	000118c0 	call	1000118c <UsbWrite>

	/* Set HUSB_pEOT time */
	UsbWrite(HUSB_pEOT, 600); // adjust the according to your USB device speed
10000410:	01409604 	movi	r5,600
10000414:	01006d04 	movi	r4,436
10000418:	000118c0 	call	1000118c <UsbWrite>

	usb_ctl_val = SOFEOP1_TO_CPU_EN | RESUME1_TO_HPI_EN;// | SOFEOP1_TO_HPI_EN;
1000041c:	00811004 	movi	r2,1088
10000420:	e0bffc0d 	sth	r2,-16(fp)
	UsbWrite(HPI_IRQ_ROUTING_REG, usb_ctl_val);
10000424:	e0bffc0b 	ldhu	r2,-16(fp)
10000428:	100b883a 	mov	r5,r2
1000042c:	01005084 	movi	r4,322
10000430:	000118c0 	call	1000118c <UsbWrite>

	intStat = A_CHG_IRQ_EN | SOF_EOP_IRQ_EN ;
10000434:	00808404 	movi	r2,528
10000438:	e0bffd8d 	sth	r2,-10(fp)
	UsbWrite(HOST1_IRQ_EN_REG, intStat);
1000043c:	e0bffd8b 	ldhu	r2,-10(fp)
10000440:	100b883a 	mov	r5,r2
10000444:	01302314 	movui	r4,49292
10000448:	000118c0 	call	1000118c <UsbWrite>
	// STEP 1a end

	// STEP 1b begin
	UsbWrite(COMM_R0,0x0000);//reset time
1000044c:	000b883a 	mov	r5,zero
10000450:	01007104 	movi	r4,452
10000454:	000118c0 	call	1000118c <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
10000458:	000b883a 	mov	r5,zero
1000045c:	01007184 	movi	r4,454
10000460:	000118c0 	call	1000118c <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
10000464:	000b883a 	mov	r5,zero
10000468:	01007204 	movi	r4,456
1000046c:	000118c0 	call	1000118c <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
10000470:	000b883a 	mov	r5,zero
10000474:	01007284 	movi	r4,458
10000478:	000118c0 	call	1000118c <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
1000047c:	000b883a 	mov	r5,zero
10000480:	01007304 	movi	r4,460
10000484:	000118c0 	call	1000118c <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
10000488:	000b883a 	mov	r5,zero
1000048c:	01007384 	movi	r4,462
10000490:	000118c0 	call	1000118c <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
10000494:	000b883a 	mov	r5,zero
10000498:	01007404 	movi	r4,464
1000049c:	000118c0 	call	1000118c <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
100004a0:	000b883a 	mov	r5,zero
100004a4:	01007484 	movi	r4,466
100004a8:	000118c0 	call	1000118c <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
100004ac:	000b883a 	mov	r5,zero
100004b0:	01007504 	movi	r4,468
100004b4:	000118c0 	call	1000118c <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
100004b8:	000b883a 	mov	r5,zero
100004bc:	01007584 	movi	r4,470
100004c0:	000118c0 	call	1000118c <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
100004c4:	000b883a 	mov	r5,zero
100004c8:	01007604 	movi	r4,472
100004cc:	000118c0 	call	1000118c <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
100004d0:	000b883a 	mov	r5,zero
100004d4:	01007684 	movi	r4,474
100004d8:	000118c0 	call	1000118c <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
100004dc:	000b883a 	mov	r5,zero
100004e0:	01007704 	movi	r4,476
100004e4:	000118c0 	call	1000118c <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
100004e8:	000b883a 	mov	r5,zero
100004ec:	01007784 	movi	r4,478
100004f0:	000118c0 	call	1000118c <UsbWrite>
	UsbWrite(COMM_INT_NUM,HUSB_SIE1_INIT_INT); //HUSB_SIE1_INIT_INT
100004f4:	01401c84 	movi	r5,114
100004f8:	01007084 	movi	r4,450
100004fc:	000118c0 	call	1000118c <UsbWrite>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
10000500:	01738054 	movui	r5,52737
10000504:	01000044 	movi	r4,1
10000508:	00002f40 	call	100002f4 <IO_write>

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
1000050c:	0001883a 	nop
10000510:	010000c4 	movi	r4,3
10000514:	00003640 	call	10000364 <IO_read>
10000518:	10bfffcc 	andi	r2,r2,65535
1000051c:	103ffc26 	beq	r2,zero,10000510 <__alt_data_end+0xf8000510>
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
10000520:	00000806 	br	10000544 <main+0x178>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
10000524:	01000044 	movi	r4,1
10000528:	00003640 	call	10000364 <IO_read>
1000052c:	10bfffcc 	andi	r2,r2,65535
10000530:	100b883a 	mov	r5,r2
10000534:	01040034 	movhi	r4,4096
10000538:	21140004 	addi	r4,r4,20480
1000053c:	00023440 	call	10002344 <printf>
		goto USB_HOT_PLUG;
10000540:	003fac06 	br	100003f4 <__alt_data_end+0xf80003f4>
	IO_write(HPI_MAILBOX,COMM_EXEC_INT);

	while (!(IO_read(HPI_STATUS) & 0xFFFF) )  //read sie1 msg register
	{
	}
	while (IO_read(HPI_MAILBOX) != COMM_ACK)
10000544:	01000044 	movi	r4,1
10000548:	00003640 	call	10000364 <IO_read>
1000054c:	10bfffcc 	andi	r2,r2,65535
10000550:	1083fb58 	cmpnei	r2,r2,4077
10000554:	103ff31e 	bne	r2,zero,10000524 <__alt_data_end+0xf8000524>
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
		goto USB_HOT_PLUG;
	}
	// STEP 1b end

	printf("STEP 1 Complete");
10000558:	01040034 	movhi	r4,4096
1000055c:	21140904 	addi	r4,r4,20516
10000560:	00023440 	call	10002344 <printf>
	// STEP 2 begin
	UsbWrite(COMM_INT_NUM,HUSB_RESET_INT); //husb reset
10000564:	01401d04 	movi	r5,116
10000568:	01007084 	movi	r4,450
1000056c:	000118c0 	call	1000118c <UsbWrite>
	UsbWrite(COMM_R0,0x003c);//reset time
10000570:	01400f04 	movi	r5,60
10000574:	01007104 	movi	r4,452
10000578:	000118c0 	call	1000118c <UsbWrite>
	UsbWrite(COMM_R1,0x0000);  //port number
1000057c:	000b883a 	mov	r5,zero
10000580:	01007184 	movi	r4,454
10000584:	000118c0 	call	1000118c <UsbWrite>
	UsbWrite(COMM_R2,0x0000);  //r1
10000588:	000b883a 	mov	r5,zero
1000058c:	01007204 	movi	r4,456
10000590:	000118c0 	call	1000118c <UsbWrite>
	UsbWrite(COMM_R3,0x0000);  //r1
10000594:	000b883a 	mov	r5,zero
10000598:	01007284 	movi	r4,458
1000059c:	000118c0 	call	1000118c <UsbWrite>
	UsbWrite(COMM_R4,0x0000);  //r1
100005a0:	000b883a 	mov	r5,zero
100005a4:	01007304 	movi	r4,460
100005a8:	000118c0 	call	1000118c <UsbWrite>
	UsbWrite(COMM_R5,0x0000);  //r1
100005ac:	000b883a 	mov	r5,zero
100005b0:	01007384 	movi	r4,462
100005b4:	000118c0 	call	1000118c <UsbWrite>
	UsbWrite(COMM_R6,0x0000);  //r1
100005b8:	000b883a 	mov	r5,zero
100005bc:	01007404 	movi	r4,464
100005c0:	000118c0 	call	1000118c <UsbWrite>
	UsbWrite(COMM_R7,0x0000);  //r1
100005c4:	000b883a 	mov	r5,zero
100005c8:	01007484 	movi	r4,466
100005cc:	000118c0 	call	1000118c <UsbWrite>
	UsbWrite(COMM_R8,0x0000);  //r1
100005d0:	000b883a 	mov	r5,zero
100005d4:	01007504 	movi	r4,468
100005d8:	000118c0 	call	1000118c <UsbWrite>
	UsbWrite(COMM_R9,0x0000);  //r1
100005dc:	000b883a 	mov	r5,zero
100005e0:	01007584 	movi	r4,470
100005e4:	000118c0 	call	1000118c <UsbWrite>
	UsbWrite(COMM_R10,0x0000);  //r1
100005e8:	000b883a 	mov	r5,zero
100005ec:	01007604 	movi	r4,472
100005f0:	000118c0 	call	1000118c <UsbWrite>
	UsbWrite(COMM_R11,0x0000);  //r1
100005f4:	000b883a 	mov	r5,zero
100005f8:	01007684 	movi	r4,474
100005fc:	000118c0 	call	1000118c <UsbWrite>
	UsbWrite(COMM_R12,0x0000);  //r1
10000600:	000b883a 	mov	r5,zero
10000604:	01007704 	movi	r4,476
10000608:	000118c0 	call	1000118c <UsbWrite>
	UsbWrite(COMM_R13,0x0000);  //r1
1000060c:	000b883a 	mov	r5,zero
10000610:	01007784 	movi	r4,478
10000614:	000118c0 	call	1000118c <UsbWrite>

	IO_write(HPI_MAILBOX,COMM_EXEC_INT);
10000618:	01738054 	movui	r5,52737
1000061c:	01000044 	movi	r4,1
10000620:	00002f40 	call	100002f4 <IO_write>

	while (IO_read(HPI_MAILBOX) != COMM_ACK)
10000624:	0001883a 	nop
10000628:	01000044 	movi	r4,1
1000062c:	00003640 	call	10000364 <IO_read>
10000630:	10bfffcc 	andi	r2,r2,65535
10000634:	1083fb58 	cmpnei	r2,r2,4077
10000638:	10000826 	beq	r2,zero,1000065c <main+0x290>
	{
		printf("[ERROR]:routine mailbox data is %x\n",IO_read(HPI_MAILBOX));
1000063c:	01000044 	movi	r4,1
10000640:	00003640 	call	10000364 <IO_read>
10000644:	10bfffcc 	andi	r2,r2,65535
10000648:	100b883a 	mov	r5,r2
1000064c:	01040034 	movhi	r4,4096
10000650:	21140004 	addi	r4,r4,20480
10000654:	00023440 	call	10002344 <printf>
		goto USB_HOT_PLUG;
10000658:	003f6606 	br	100003f4 <__alt_data_end+0xf80003f4>
	}
	// STEP 2 end

	ctl_reg = USB1_CTL_REG;
1000065c:	00b02284 	movi	r2,-16246
10000660:	d0a4d00d 	sth	r2,-27840(gp)
	no_device = (A_DP_STAT | A_DM_STAT);
10000664:	008c0004 	movi	r2,12288
10000668:	d0a4d08d 	sth	r2,-27838(gp)
	fs_device = A_DP_STAT;
1000066c:	00880004 	movi	r2,8192
10000670:	e0bffd0d 	sth	r2,-12(fp)
	usb_ctl_val = UsbRead(ctl_reg);
10000674:	d0a4d00b 	ldhu	r2,-27840(gp)
10000678:	10bfffcc 	andi	r2,r2,65535
1000067c:	1009883a 	mov	r4,r2
10000680:	00011e40 	call	100011e4 <UsbRead>
10000684:	e0bffc0d 	sth	r2,-16(fp)

	if (!(usb_ctl_val & no_device))
10000688:	d0a4d08b 	ldhu	r2,-27838(gp)
1000068c:	e0fffc0b 	ldhu	r3,-16(fp)
10000690:	1884703a 	and	r2,r3,r2
10000694:	10bfffcc 	andi	r2,r2,65535
10000698:	1000351e 	bne	r2,zero,10000770 <main+0x3a4>
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
1000069c:	e03ffcc5 	stb	zero,-13(fp)
100006a0:	00000f06 	br	100006e0 <main+0x314>
		{
			usleep(5*1000);
100006a4:	0104e204 	movi	r4,5000
100006a8:	0002e480 	call	10002e48 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
100006ac:	d0a4d00b 	ldhu	r2,-27840(gp)
100006b0:	10bfffcc 	andi	r2,r2,65535
100006b4:	1009883a 	mov	r4,r2
100006b8:	00011e40 	call	100011e4 <UsbRead>
100006bc:	e0bffc0d 	sth	r2,-16(fp)
			if(usb_ctl_val & no_device) break;
100006c0:	d0a4d08b 	ldhu	r2,-27838(gp)
100006c4:	e0fffc0b 	ldhu	r3,-16(fp)
100006c8:	1884703a 	and	r2,r3,r2
100006cc:	10bfffcc 	andi	r2,r2,65535
100006d0:	1000071e 	bne	r2,zero,100006f0 <main+0x324>
	fs_device = A_DP_STAT;
	usb_ctl_val = UsbRead(ctl_reg);

	if (!(usb_ctl_val & no_device))
	{
		for(hot_plug_count = 0 ; hot_plug_count < 5 ; hot_plug_count++)
100006d4:	e0bffcc3 	ldbu	r2,-13(fp)
100006d8:	10800044 	addi	r2,r2,1
100006dc:	e0bffcc5 	stb	r2,-13(fp)
100006e0:	e0bffcc3 	ldbu	r2,-13(fp)
100006e4:	10800170 	cmpltui	r2,r2,5
100006e8:	103fee1e 	bne	r2,zero,100006a4 <__alt_data_end+0xf80006a4>
100006ec:	00000106 	br	100006f4 <main+0x328>
		{
			usleep(5*1000);
			usb_ctl_val = UsbRead(ctl_reg);
			if(usb_ctl_val & no_device) break;
100006f0:	0001883a 	nop
		}
		if(!(usb_ctl_val & no_device))
100006f4:	d0a4d08b 	ldhu	r2,-27838(gp)
100006f8:	e0fffc0b 	ldhu	r3,-16(fp)
100006fc:	1884703a 	and	r2,r3,r2
10000700:	10bfffcc 	andi	r2,r2,65535
10000704:	1000261e 	bne	r2,zero,100007a0 <main+0x3d4>
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
10000708:	01040034 	movhi	r4,4096
1000070c:	21140d04 	addi	r4,r4,20532
10000710:	00024100 	call	10002410 <puts>
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
10000714:	01040034 	movhi	r4,4096
10000718:	21141704 	addi	r4,r4,20572
1000071c:	00024100 	call	10002410 <puts>
			while (!(usb_ctl_val & no_device))
10000720:	00000d06 	br	10000758 <main+0x38c>
			{
				usb_ctl_val = UsbRead(ctl_reg);
10000724:	d0a4d00b 	ldhu	r2,-27840(gp)
10000728:	10bfffcc 	andi	r2,r2,65535
1000072c:	1009883a 	mov	r4,r2
10000730:	00011e40 	call	100011e4 <UsbRead>
10000734:	e0bffc0d 	sth	r2,-16(fp)
				if(usb_ctl_val & no_device)
10000738:	d0a4d08b 	ldhu	r2,-27838(gp)
1000073c:	e0fffc0b 	ldhu	r3,-16(fp)
10000740:	1884703a 	and	r2,r3,r2
10000744:	10bfffcc 	andi	r2,r2,65535
10000748:	10000126 	beq	r2,zero,10000750 <main+0x384>
					goto USB_HOT_PLUG;
1000074c:	003f2906 	br	100003f4 <__alt_data_end+0xf80003f4>

				usleep(2000);
10000750:	0101f404 	movi	r4,2000
10000754:	0002e480 	call	10002e48 <usleep>
		}
		if(!(usb_ctl_val & no_device))
		{
			printf("\n[INFO]: no device is present in SIE1!\n");
			printf("[INFO]: please insert a USB keyboard in SIE1!\n");
			while (!(usb_ctl_val & no_device))
10000758:	d0a4d08b 	ldhu	r2,-27838(gp)
1000075c:	e0fffc0b 	ldhu	r3,-16(fp)
10000760:	1884703a 	and	r2,r3,r2
10000764:	10bfffcc 	andi	r2,r2,65535
10000768:	103fee26 	beq	r2,zero,10000724 <__alt_data_end+0xf8000724>
1000076c:	00000c06 	br	100007a0 <main+0x3d4>
		}
	}
	else
	{
		/* check for low speed or full speed by reading D+ and D- lines */
		if (usb_ctl_val & fs_device)
10000770:	e0fffc0b 	ldhu	r3,-16(fp)
10000774:	e0bffd0b 	ldhu	r2,-12(fp)
10000778:	1884703a 	and	r2,r3,r2
1000077c:	10bfffcc 	andi	r2,r2,65535
10000780:	10000426 	beq	r2,zero,10000794 <main+0x3c8>
		{
			printf("[INFO]: full speed device\n");
10000784:	01040034 	movhi	r4,4096
10000788:	21142304 	addi	r4,r4,20620
1000078c:	00024100 	call	10002410 <puts>
10000790:	00000306 	br	100007a0 <main+0x3d4>
		}
		else
		{
			printf("[INFO]: low speed device\n");
10000794:	01040034 	movhi	r4,4096
10000798:	21142a04 	addi	r4,r4,20648
1000079c:	00024100 	call	10002410 <puts>



	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();
100007a0:	00012e40 	call	100012e4 <UsbSetAddress>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100007a4:	00000306 	br	100007b4 <main+0x3e8>
	{
		UsbSetAddress();
100007a8:	00012e40 	call	100012e4 <UsbSetAddress>
		usleep(10*1000);
100007ac:	0109c404 	movi	r4,10000
100007b0:	0002e480 	call	10002e48 <usleep>

	// STEP 3 begin
	//------------------------------------------------------set address -----------------------------------------------------------------
	UsbSetAddress();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100007b4:	010000c4 	movi	r4,3
100007b8:	00003640 	call	10000364 <IO_read>
100007bc:	10bfffcc 	andi	r2,r2,65535
100007c0:	1080040c 	andi	r2,r2,16
100007c4:	103ff826 	beq	r2,zero,100007a8 <__alt_data_end+0xf80007a8>
	{
		UsbSetAddress();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
100007c8:	00021840 	call	10002184 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506); // i
100007cc:	01414184 	movi	r5,1286
100007d0:	01000084 	movi	r4,2
100007d4:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]:step 3 TD Status Byte is %x\n",IO_read(HPI_DATA));
100007d8:	0009883a 	mov	r4,zero
100007dc:	00003640 	call	10000364 <IO_read>
100007e0:	10bfffcc 	andi	r2,r2,65535
100007e4:	100b883a 	mov	r5,r2
100007e8:	01040034 	movhi	r4,4096
100007ec:	21143104 	addi	r4,r4,20676
100007f0:	00023440 	call	10002344 <printf>

	IO_write(HPI_ADDR,0x0508); // n
100007f4:	01414204 	movi	r5,1288
100007f8:	01000084 	movi	r4,2
100007fc:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000800:	0009883a 	mov	r4,zero
10000804:	00003640 	call	10000364 <IO_read>
10000808:	e0bffc0d 	sth	r2,-16(fp)
	printf("[ENUM PROCESS]:step 3 TD Control Byte is %x\n",usb_ctl_val);
1000080c:	e0bffc0b 	ldhu	r2,-16(fp)
10000810:	100b883a 	mov	r5,r2
10000814:	01040034 	movhi	r4,4096
10000818:	21143c04 	addi	r4,r4,20720
1000081c:	00023440 	call	10002344 <printf>
	while (usb_ctl_val != 0x03) // retries occurred
10000820:	e0bffc0b 	ldhu	r2,-16(fp)
10000824:	108000e0 	cmpeqi	r2,r2,3
10000828:	1000031e 	bne	r2,zero,10000838 <main+0x46c>
	{
		usb_ctl_val = UsbGetRetryCnt();
1000082c:	00022080 	call	10002208 <UsbGetRetryCnt>
10000830:	e0bffc0d 	sth	r2,-16(fp)

		goto USB_HOT_PLUG;
10000834:	003eef06 	br	100003f4 <__alt_data_end+0xf80003f4>
	}

	printf("------------[ENUM PROCESS]:set address done!---------------\n");
10000838:	01040034 	movhi	r4,4096
1000083c:	21144804 	addi	r4,r4,20768
10000840:	00024100 	call	10002410 <puts>

	// STEP 4 begin
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1
10000844:	00013e40 	call	100013e4 <UsbGetDeviceDesc1>

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000848:	00000306 	br	10000858 <main+0x48c>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
1000084c:	00013e40 	call	100013e4 <UsbGetDeviceDesc1>
		usleep(10*1000);
10000850:	0109c404 	movi	r4,10000
10000854:	0002e480 	call	10002e48 <usleep>
	//-------------------------------get device descriptor-1 -----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc1(); 	// Get Device Descriptor -1

	//usleep(10*1000);
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000858:	010000c4 	movi	r4,3
1000085c:	00003640 	call	10000364 <IO_read>
10000860:	10bfffcc 	andi	r2,r2,65535
10000864:	1080040c 	andi	r2,r2,16
10000868:	103ff826 	beq	r2,zero,1000084c <__alt_data_end+0xf800084c>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
1000086c:	00021840 	call	10002184 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000870:	01414184 	movi	r5,1286
10000874:	01000084 	movi	r4,2
10000878:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
1000087c:	0009883a 	mov	r4,zero
10000880:	00003640 	call	10000364 <IO_read>
10000884:	10bfffcc 	andi	r2,r2,65535
10000888:	100b883a 	mov	r5,r2
1000088c:	01040034 	movhi	r4,4096
10000890:	21145704 	addi	r4,r4,20828
10000894:	00023440 	call	10002344 <printf>

	IO_write(HPI_ADDR,0x0508);
10000898:	01414204 	movi	r5,1288
1000089c:	01000084 	movi	r4,2
100008a0:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
100008a4:	0009883a 	mov	r4,zero
100008a8:	00003640 	call	10000364 <IO_read>
100008ac:	e0bffc0d 	sth	r2,-16(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
100008b0:	e0bffc0b 	ldhu	r2,-16(fp)
100008b4:	100b883a 	mov	r5,r2
100008b8:	01040034 	movhi	r4,4096
100008bc:	21146204 	addi	r4,r4,20872
100008c0:	00023440 	call	10002344 <printf>
	while (usb_ctl_val != 0x03)
100008c4:	e0bffc0b 	ldhu	r2,-16(fp)
100008c8:	108000e0 	cmpeqi	r2,r2,3
100008cc:	1000061e 	bne	r2,zero,100008e8 <main+0x51c>
	{
		usb_ctl_val = UsbGetRetryCnt();
100008d0:	00022080 	call	10002208 <UsbGetRetryCnt>
100008d4:	e0bffc0d 	sth	r2,-16(fp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
100008d8:	01040034 	movhi	r4,4096
100008dc:	21146e04 	addi	r4,r4,20920
100008e0:	00024100 	call	10002410 <puts>
		goto USB_HOT_PLUG;
100008e4:	003ec306 	br	100003f4 <__alt_data_end+0xf80003f4>
	}

	printf("---------------[ENUM PROCESS]:get device descriptor-1 done!-----------------\n");
100008e8:	01040034 	movhi	r4,4096
100008ec:	21147704 	addi	r4,r4,20956
100008f0:	00024100 	call	10002410 <puts>


	//--------------------------------get device descriptor-2---------------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2
100008f4:	000152c0 	call	1000152c <UsbGetDeviceDesc2>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100008f8:	00000306 	br	10000908 <main+0x53c>
	{
		//resend the get device descriptor
		//get device descriptor
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
100008fc:	000152c0 	call	1000152c <UsbGetDeviceDesc2>
		usleep(10*1000);
10000900:	0109c404 	movi	r4,10000
10000904:	0002e480 	call	10002e48 <usleep>
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetDeviceDesc2(); 	// Get Device Descriptor -2

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000908:	010000c4 	movi	r4,3
1000090c:	00003640 	call	10000364 <IO_read>
10000910:	10bfffcc 	andi	r2,r2,65535
10000914:	1080040c 	andi	r2,r2,16
10000918:	103ff826 	beq	r2,zero,100008fc <__alt_data_end+0xf80008fc>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetDeviceDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
1000091c:	00021840 	call	10002184 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000920:	01414184 	movi	r5,1286
10000924:	01000084 	movi	r4,2
10000928:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]:step 4 TD Status Byte is %x\n",IO_read(HPI_DATA));
1000092c:	0009883a 	mov	r4,zero
10000930:	00003640 	call	10000364 <IO_read>
10000934:	10bfffcc 	andi	r2,r2,65535
10000938:	100b883a 	mov	r5,r2
1000093c:	01040034 	movhi	r4,4096
10000940:	21145704 	addi	r4,r4,20828
10000944:	00023440 	call	10002344 <printf>

	IO_write(HPI_ADDR,0x0508);
10000948:	01414204 	movi	r5,1288
1000094c:	01000084 	movi	r4,2
10000950:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000954:	0009883a 	mov	r4,zero
10000958:	00003640 	call	10000364 <IO_read>
1000095c:	e0bffc0d 	sth	r2,-16(fp)
	printf("[ENUM PROCESS]:step 4 TD Control Byte is %x\n",usb_ctl_val);
10000960:	e0bffc0b 	ldhu	r2,-16(fp)
10000964:	100b883a 	mov	r5,r2
10000968:	01040034 	movhi	r4,4096
1000096c:	21146204 	addi	r4,r4,20872
10000970:	00023440 	call	10002344 <printf>
	while (usb_ctl_val != 0x03)
10000974:	e0bffc0b 	ldhu	r2,-16(fp)
10000978:	108000e0 	cmpeqi	r2,r2,3
1000097c:	1000061e 	bne	r2,zero,10000998 <main+0x5cc>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000980:	00022080 	call	10002208 <UsbGetRetryCnt>
10000984:	e0bffc0d 	sth	r2,-16(fp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
10000988:	01040034 	movhi	r4,4096
1000098c:	21146e04 	addi	r4,r4,20920
10000990:	00024100 	call	10002410 <puts>
		goto USB_HOT_PLUG;
10000994:	003e9706 	br	100003f4 <__alt_data_end+0xf80003f4>
	}

	printf("------------[ENUM PROCESS]:get device descriptor-2 done!--------------\n");
10000998:	01040034 	movhi	r4,4096
1000099c:	21148b04 	addi	r4,r4,21036
100009a0:	00024100 	call	10002410 <puts>


	// STEP 5 begin
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1
100009a4:	00017040 	call	10001704 <UsbGetConfigDesc1>

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100009a8:	00000306 	br	100009b8 <main+0x5ec>
	{
		//resend the get device descriptor
		//get device descriptor

		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
100009ac:	00017040 	call	10001704 <UsbGetConfigDesc1>
		usleep(10*1000);
100009b0:	0109c404 	movi	r4,10000
100009b4:	0002e480 	call	10002e48 <usleep>
	//-----------------------------------get configuration descriptor -1 ----------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc1(); 	// Get Configuration Descriptor -1

	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
100009b8:	010000c4 	movi	r4,3
100009bc:	00003640 	call	10000364 <IO_read>
100009c0:	10bfffcc 	andi	r2,r2,65535
100009c4:	1080040c 	andi	r2,r2,16
100009c8:	103ff826 	beq	r2,zero,100009ac <__alt_data_end+0xf80009ac>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc1();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
100009cc:	00021840 	call	10002184 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
100009d0:	01414184 	movi	r5,1286
100009d4:	01000084 	movi	r4,2
100009d8:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]:step 5 TD Status Byte is %x\n",IO_read(HPI_DATA));
100009dc:	0009883a 	mov	r4,zero
100009e0:	00003640 	call	10000364 <IO_read>
100009e4:	10bfffcc 	andi	r2,r2,65535
100009e8:	100b883a 	mov	r5,r2
100009ec:	01040034 	movhi	r4,4096
100009f0:	21149d04 	addi	r4,r4,21108
100009f4:	00023440 	call	10002344 <printf>

	IO_write(HPI_ADDR,0x0508);
100009f8:	01414204 	movi	r5,1288
100009fc:	01000084 	movi	r4,2
10000a00:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000a04:	0009883a 	mov	r4,zero
10000a08:	00003640 	call	10000364 <IO_read>
10000a0c:	e0bffc0d 	sth	r2,-16(fp)
	printf("[ENUM PROCESS]:step 5 TD Control Byte is %x\n",usb_ctl_val);
10000a10:	e0bffc0b 	ldhu	r2,-16(fp)
10000a14:	100b883a 	mov	r5,r2
10000a18:	01040034 	movhi	r4,4096
10000a1c:	2114a804 	addi	r4,r4,21152
10000a20:	00023440 	call	10002344 <printf>
	while (usb_ctl_val != 0x03)
10000a24:	e0bffc0b 	ldhu	r2,-16(fp)
10000a28:	108000e0 	cmpeqi	r2,r2,3
10000a2c:	1000061e 	bne	r2,zero,10000a48 <main+0x67c>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000a30:	00022080 	call	10002208 <UsbGetRetryCnt>
10000a34:	e0bffc0d 	sth	r2,-16(fp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
10000a38:	01040034 	movhi	r4,4096
10000a3c:	21146e04 	addi	r4,r4,20920
10000a40:	00024100 	call	10002410 <puts>
		goto USB_HOT_PLUG;
10000a44:	003e6b06 	br	100003f4 <__alt_data_end+0xf80003f4>
	}
	printf("------------[ENUM PROCESS]:get configuration descriptor-1 pass------------\n");
10000a48:	01040034 	movhi	r4,4096
10000a4c:	2114b404 	addi	r4,r4,21200
10000a50:	00024100 	call	10002410 <puts>

	// STEP 6 begin
	//-----------------------------------get configuration descriptor-2------------------------------------//
	//get device descriptor
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2
10000a54:	00018940 	call	10001894 <UsbGetConfigDesc2>

	usleep(100*1000);
10000a58:	010000b4 	movhi	r4,2
10000a5c:	2121a804 	addi	r4,r4,-31072
10000a60:	0002e480 	call	10002e48 <usleep>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000a64:	00000306 	br	10000a74 <main+0x6a8>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
10000a68:	00018940 	call	10001894 <UsbGetConfigDesc2>
		usleep(10*1000);
10000a6c:	0109c404 	movi	r4,10000
10000a70:	0002e480 	call	10002e48 <usleep>
	// TASK: Call the appropriate function for this step.
	UsbGetConfigDesc2(); 	// Get Configuration Descriptor -2

	usleep(100*1000);
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000a74:	010000c4 	movi	r4,3
10000a78:	00003640 	call	10000364 <IO_read>
10000a7c:	10bfffcc 	andi	r2,r2,65535
10000a80:	1080040c 	andi	r2,r2,16
10000a84:	103ff826 	beq	r2,zero,10000a68 <__alt_data_end+0xf8000a68>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetConfigDesc2();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000a88:	00021840 	call	10002184 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000a8c:	01414184 	movi	r5,1286
10000a90:	01000084 	movi	r4,2
10000a94:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]:step 6 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000a98:	0009883a 	mov	r4,zero
10000a9c:	00003640 	call	10000364 <IO_read>
10000aa0:	10bfffcc 	andi	r2,r2,65535
10000aa4:	100b883a 	mov	r5,r2
10000aa8:	01040034 	movhi	r4,4096
10000aac:	2114c704 	addi	r4,r4,21276
10000ab0:	00023440 	call	10002344 <printf>

	IO_write(HPI_ADDR,0x0508);
10000ab4:	01414204 	movi	r5,1288
10000ab8:	01000084 	movi	r4,2
10000abc:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000ac0:	0009883a 	mov	r4,zero
10000ac4:	00003640 	call	10000364 <IO_read>
10000ac8:	e0bffc0d 	sth	r2,-16(fp)
	printf("[ENUM PROCESS]:step 6 TD Control Byte is %x\n",usb_ctl_val);
10000acc:	e0bffc0b 	ldhu	r2,-16(fp)
10000ad0:	100b883a 	mov	r5,r2
10000ad4:	01040034 	movhi	r4,4096
10000ad8:	2114d204 	addi	r4,r4,21320
10000adc:	00023440 	call	10002344 <printf>
	while (usb_ctl_val != 0x03)
10000ae0:	e0bffc0b 	ldhu	r2,-16(fp)
10000ae4:	108000e0 	cmpeqi	r2,r2,3
10000ae8:	1000061e 	bne	r2,zero,10000b04 <main+0x738>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000aec:	00022080 	call	10002208 <UsbGetRetryCnt>
10000af0:	e0bffc0d 	sth	r2,-16(fp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
10000af4:	01040034 	movhi	r4,4096
10000af8:	21146e04 	addi	r4,r4,20920
10000afc:	00024100 	call	10002410 <puts>
		goto USB_HOT_PLUG;
10000b00:	003e3c06 	br	100003f4 <__alt_data_end+0xf80003f4>
	}


	printf("-----------[ENUM PROCESS]:get configuration descriptor-2 done!------------\n");
10000b04:	01040034 	movhi	r4,4096
10000b08:	2114de04 	addi	r4,r4,21368
10000b0c:	00024100 	call	10002410 <puts>


	// ---------------------------------get device info---------------------------------------------//

	// TASK: Write the address to read from the memory for byte 7 of the interface descriptor to HPI_ADDR.
	IO_write(HPI_ADDR,0x056c);
10000b10:	01415b04 	movi	r5,1388
10000b14:	01000084 	movi	r4,2
10000b18:	00002f40 	call	100002f4 <IO_write>
	code = IO_read(HPI_DATA);
10000b1c:	0009883a 	mov	r4,zero
10000b20:	00003640 	call	10000364 <IO_read>
10000b24:	e0bffe0d 	sth	r2,-8(fp)
	code = code & 0x003;
10000b28:	e0bffe0b 	ldhu	r2,-8(fp)
10000b2c:	108000cc 	andi	r2,r2,3
10000b30:	e0bffe0d 	sth	r2,-8(fp)
	printf("\ncode = %x\n", code);
10000b34:	e0bffe0b 	ldhu	r2,-8(fp)
10000b38:	100b883a 	mov	r5,r2
10000b3c:	01040034 	movhi	r4,4096
10000b40:	2114f104 	addi	r4,r4,21444
10000b44:	00023440 	call	10002344 <printf>

	if (code == 0x01)
10000b48:	e0bffe0b 	ldhu	r2,-8(fp)
10000b4c:	10800058 	cmpnei	r2,r2,1
10000b50:	1000041e 	bne	r2,zero,10000b64 <main+0x798>
	{
		printf("\n[INFO]:check TD rec data7 \n[INFO]:Keyboard Detected!!!\n\n");
10000b54:	01040034 	movhi	r4,4096
10000b58:	2114f404 	addi	r4,r4,21456
10000b5c:	00024100 	call	10002410 <puts>
10000b60:	00000306 	br	10000b70 <main+0x7a4>
	}
	else
	{
		printf("\n[INFO]:Keyboard Not Detected!!! \n\n");
10000b64:	01040034 	movhi	r4,4096
10000b68:	21150304 	addi	r4,r4,21516
10000b6c:	00024100 	call	10002410 <puts>
	}

	// TASK: Write the address to read from the memory for the endpoint descriptor to HPI_ADDR.

	IO_write(HPI_ADDR,0x0576);
10000b70:	01415d84 	movi	r5,1398
10000b74:	01000084 	movi	r4,2
10000b78:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x073F);
10000b7c:	0141cfc4 	movi	r5,1855
10000b80:	0009883a 	mov	r4,zero
10000b84:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x8105);
10000b88:	01604154 	movui	r5,33029
10000b8c:	0009883a 	mov	r4,zero
10000b90:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0003);
10000b94:	014000c4 	movi	r5,3
10000b98:	0009883a 	mov	r4,zero
10000b9c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);
10000ba0:	01400204 	movi	r5,8
10000ba4:	0009883a 	mov	r4,zero
10000ba8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0xAC0A);
10000bac:	016b0294 	movui	r5,44042
10000bb0:	0009883a 	mov	r4,zero
10000bb4:	00002f40 	call	100002f4 <IO_write>
	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0576); //HUSB_SIE1_pCurrentTDPtr
10000bb8:	01415d84 	movi	r5,1398
10000bbc:	01006c04 	movi	r4,432
10000bc0:	000118c0 	call	1000118c <UsbWrite>

	//data_size = (IO_read(HPI_DATA)>>8)&0x0ff;
	//data_size = 0x08;//(IO_read(HPI_DATA))&0x0ff;
	//UsbPrintMem();
	IO_write(HPI_ADDR,0x057c);
10000bc4:	01415f04 	movi	r5,1404
10000bc8:	01000084 	movi	r4,2
10000bcc:	00002f40 	call	100002f4 <IO_write>
	data_size = (IO_read(HPI_DATA))&0x0ff;
10000bd0:	0009883a 	mov	r4,zero
10000bd4:	00003640 	call	10000364 <IO_read>
10000bd8:	e0bffe85 	stb	r2,-6(fp)
	printf("[ENUM PROCESS]:data packet size is %d\n",data_size);
10000bdc:	e0bffe83 	ldbu	r2,-6(fp)
10000be0:	100b883a 	mov	r5,r2
10000be4:	01040034 	movhi	r4,4096
10000be8:	21150c04 	addi	r4,r4,21552
10000bec:	00023440 	call	10002344 <printf>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration
10000bf0:	0001afc0 	call	10001afc <UsbSetConfig>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000bf4:	00000306 	br	10000c04 <main+0x838>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
10000bf8:	0001afc0 	call	10001afc <UsbSetConfig>
		usleep(10*1000);
10000bfc:	0109c404 	movi	r4,10000
10000c00:	0002e480 	call	10002e48 <usleep>
	// STEP 7 begin
	//------------------------------------set configuration -----------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbSetConfig();		// Set Configuration

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000c04:	010000c4 	movi	r4,3
10000c08:	00003640 	call	10000364 <IO_read>
10000c0c:	10bfffcc 	andi	r2,r2,65535
10000c10:	1080040c 	andi	r2,r2,16
10000c14:	103ff826 	beq	r2,zero,10000bf8 <__alt_data_end+0xf8000bf8>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbSetConfig();		// Set Configuration
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000c18:	00021840 	call	10002184 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000c1c:	01414184 	movi	r5,1286
10000c20:	01000084 	movi	r4,2
10000c24:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]:step 7 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000c28:	0009883a 	mov	r4,zero
10000c2c:	00003640 	call	10000364 <IO_read>
10000c30:	10bfffcc 	andi	r2,r2,65535
10000c34:	100b883a 	mov	r5,r2
10000c38:	01040034 	movhi	r4,4096
10000c3c:	21151604 	addi	r4,r4,21592
10000c40:	00023440 	call	10002344 <printf>

	IO_write(HPI_ADDR,0x0508);
10000c44:	01414204 	movi	r5,1288
10000c48:	01000084 	movi	r4,2
10000c4c:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000c50:	0009883a 	mov	r4,zero
10000c54:	00003640 	call	10000364 <IO_read>
10000c58:	e0bffc0d 	sth	r2,-16(fp)
	printf("[ENUM PROCESS]:step 7 TD Control Byte is %x\n",usb_ctl_val);
10000c5c:	e0bffc0b 	ldhu	r2,-16(fp)
10000c60:	100b883a 	mov	r5,r2
10000c64:	01040034 	movhi	r4,4096
10000c68:	21152104 	addi	r4,r4,21636
10000c6c:	00023440 	call	10002344 <printf>
	while (usb_ctl_val != 0x03)
10000c70:	e0bffc0b 	ldhu	r2,-16(fp)
10000c74:	108000e0 	cmpeqi	r2,r2,3
10000c78:	1000061e 	bne	r2,zero,10000c94 <main+0x8c8>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000c7c:	00022080 	call	10002208 <UsbGetRetryCnt>
10000c80:	e0bffc0d 	sth	r2,-16(fp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
10000c84:	01040034 	movhi	r4,4096
10000c88:	21146e04 	addi	r4,r4,20920
10000c8c:	00024100 	call	10002410 <puts>
		goto USB_HOT_PLUG;
10000c90:	003dd806 	br	100003f4 <__alt_data_end+0xf80003f4>
	}

	printf("------------[ENUM PROCESS]:set configuration done!-------------------\n");
10000c94:	01040034 	movhi	r4,4096
10000c98:	21152d04 	addi	r4,r4,21684
10000c9c:	00024100 	call	10002410 <puts>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();
10000ca0:	0001bfc0 	call	10001bfc <UsbClassRequest>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000ca4:	00000306 	br	10000cb4 <main+0x8e8>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
10000ca8:	0001bfc0 	call	10001bfc <UsbClassRequest>
		usleep(10*1000);
10000cac:	0109c404 	movi	r4,10000
10000cb0:	0002e480 	call	10002e48 <usleep>

	//----------------------------------------------class request out ------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbClassRequest();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000cb4:	010000c4 	movi	r4,3
10000cb8:	00003640 	call	10000364 <IO_read>
10000cbc:	10bfffcc 	andi	r2,r2,65535
10000cc0:	1080040c 	andi	r2,r2,16
10000cc4:	103ff826 	beq	r2,zero,10000ca8 <__alt_data_end+0xf8000ca8>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbClassRequest();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000cc8:	00021840 	call	10002184 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000ccc:	01414184 	movi	r5,1286
10000cd0:	01000084 	movi	r4,2
10000cd4:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000cd8:	0009883a 	mov	r4,zero
10000cdc:	00003640 	call	10000364 <IO_read>
10000ce0:	10bfffcc 	andi	r2,r2,65535
10000ce4:	100b883a 	mov	r5,r2
10000ce8:	01040034 	movhi	r4,4096
10000cec:	21153f04 	addi	r4,r4,21756
10000cf0:	00023440 	call	10002344 <printf>

	IO_write(HPI_ADDR,0x0508);
10000cf4:	01414204 	movi	r5,1288
10000cf8:	01000084 	movi	r4,2
10000cfc:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000d00:	0009883a 	mov	r4,zero
10000d04:	00003640 	call	10000364 <IO_read>
10000d08:	e0bffc0d 	sth	r2,-16(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
10000d0c:	e0bffc0b 	ldhu	r2,-16(fp)
10000d10:	100b883a 	mov	r5,r2
10000d14:	01040034 	movhi	r4,4096
10000d18:	21154a04 	addi	r4,r4,21800
10000d1c:	00023440 	call	10002344 <printf>
	while (usb_ctl_val != 0x03)
10000d20:	e0bffc0b 	ldhu	r2,-16(fp)
10000d24:	108000e0 	cmpeqi	r2,r2,3
10000d28:	1000061e 	bne	r2,zero,10000d44 <main+0x978>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000d2c:	00022080 	call	10002208 <UsbGetRetryCnt>
10000d30:	e0bffc0d 	sth	r2,-16(fp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
10000d34:	01040034 	movhi	r4,4096
10000d38:	21146e04 	addi	r4,r4,20920
10000d3c:	00024100 	call	10002410 <puts>
		goto USB_HOT_PLUG;
10000d40:	003dac06 	br	100003f4 <__alt_data_end+0xf80003f4>
	}


	printf("------------[ENUM PROCESS]:class request out done!-------------------\n");
10000d44:	01040034 	movhi	r4,4096
10000d48:	21155604 	addi	r4,r4,21848
10000d4c:	00024100 	call	10002410 <puts>

	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();
10000d50:	0001cfc0 	call	10001cfc <UsbGetHidDesc>

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000d54:	00000306 	br	10000d64 <main+0x998>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
10000d58:	0001cfc0 	call	10001cfc <UsbGetHidDesc>
		usleep(10*1000);
10000d5c:	0109c404 	movi	r4,10000
10000d60:	0002e480 	call	10002e48 <usleep>
	// STEP 8 begin
	//----------------------------------get descriptor(class 0x21 = HID) request out --------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetHidDesc();

	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000d64:	010000c4 	movi	r4,3
10000d68:	00003640 	call	10000364 <IO_read>
10000d6c:	10bfffcc 	andi	r2,r2,65535
10000d70:	1080040c 	andi	r2,r2,16
10000d74:	103ff826 	beq	r2,zero,10000d58 <__alt_data_end+0xf8000d58>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetHidDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000d78:	00021840 	call	10002184 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000d7c:	01414184 	movi	r5,1286
10000d80:	01000084 	movi	r4,2
10000d84:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]:step 8 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000d88:	0009883a 	mov	r4,zero
10000d8c:	00003640 	call	10000364 <IO_read>
10000d90:	10bfffcc 	andi	r2,r2,65535
10000d94:	100b883a 	mov	r5,r2
10000d98:	01040034 	movhi	r4,4096
10000d9c:	21153f04 	addi	r4,r4,21756
10000da0:	00023440 	call	10002344 <printf>

	IO_write(HPI_ADDR,0x0508);
10000da4:	01414204 	movi	r5,1288
10000da8:	01000084 	movi	r4,2
10000dac:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000db0:	0009883a 	mov	r4,zero
10000db4:	00003640 	call	10000364 <IO_read>
10000db8:	e0bffc0d 	sth	r2,-16(fp)
	printf("[ENUM PROCESS]:step 8 TD Control Byte is %x\n",usb_ctl_val);
10000dbc:	e0bffc0b 	ldhu	r2,-16(fp)
10000dc0:	100b883a 	mov	r5,r2
10000dc4:	01040034 	movhi	r4,4096
10000dc8:	21154a04 	addi	r4,r4,21800
10000dcc:	00023440 	call	10002344 <printf>
	while (usb_ctl_val != 0x03)
10000dd0:	e0bffc0b 	ldhu	r2,-16(fp)
10000dd4:	108000e0 	cmpeqi	r2,r2,3
10000dd8:	1000061e 	bne	r2,zero,10000df4 <main+0xa28>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000ddc:	00022080 	call	10002208 <UsbGetRetryCnt>
10000de0:	e0bffc0d 	sth	r2,-16(fp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
10000de4:	01040034 	movhi	r4,4096
10000de8:	21146e04 	addi	r4,r4,20920
10000dec:	00024100 	call	10002410 <puts>
		goto USB_HOT_PLUG;
10000df0:	003d8006 	br	100003f4 <__alt_data_end+0xf80003f4>
	}

	printf("------------[ENUM PROCESS]:get descriptor (class 0x21) done!-------------------\n");
10000df4:	01040034 	movhi	r4,4096
10000df8:	21156804 	addi	r4,r4,21920
10000dfc:	00024100 	call	10002410 <puts>

	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
10000e00:	0001e440 	call	10001e44 <UsbGetReportDesc>
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000e04:	00000306 	br	10000e14 <main+0xa48>
	{
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
10000e08:	0001e440 	call	10001e44 <UsbGetReportDesc>
		usleep(10*1000);
10000e0c:	0109c404 	movi	r4,10000
10000e10:	0002e480 	call	10002e48 <usleep>
	// STEP 9 begin
	//-------------------------------get descriptor (class 0x22 = report)-------------------------------------------//
	// TASK: Call the appropriate function for this step.
	UsbGetReportDesc();
	//if no message
	while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000e14:	010000c4 	movi	r4,3
10000e18:	00003640 	call	10000364 <IO_read>
10000e1c:	10bfffcc 	andi	r2,r2,65535
10000e20:	1080040c 	andi	r2,r2,16
10000e24:	103ff826 	beq	r2,zero,10000e08 <__alt_data_end+0xf8000e08>
		// TASK: Call the appropriate function again if it wasn't processed successfully.
		UsbGetReportDesc();
		usleep(10*1000);
	}

	UsbWaitTDListDone();
10000e28:	00021840 	call	10002184 <UsbWaitTDListDone>

	IO_write(HPI_ADDR,0x0506);
10000e2c:	01414184 	movi	r5,1286
10000e30:	01000084 	movi	r4,2
10000e34:	00002f40 	call	100002f4 <IO_write>
	printf("[ENUM PROCESS]: step 9 TD Status Byte is %x\n",IO_read(HPI_DATA));
10000e38:	0009883a 	mov	r4,zero
10000e3c:	00003640 	call	10000364 <IO_read>
10000e40:	10bfffcc 	andi	r2,r2,65535
10000e44:	100b883a 	mov	r5,r2
10000e48:	01040034 	movhi	r4,4096
10000e4c:	21157c04 	addi	r4,r4,22000
10000e50:	00023440 	call	10002344 <printf>

	IO_write(HPI_ADDR,0x0508);
10000e54:	01414204 	movi	r5,1288
10000e58:	01000084 	movi	r4,2
10000e5c:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10000e60:	0009883a 	mov	r4,zero
10000e64:	00003640 	call	10000364 <IO_read>
10000e68:	e0bffc0d 	sth	r2,-16(fp)
	printf("[ENUM PROCESS]: step 9 TD Control Byte is %x\n",usb_ctl_val);
10000e6c:	e0bffc0b 	ldhu	r2,-16(fp)
10000e70:	100b883a 	mov	r5,r2
10000e74:	01040034 	movhi	r4,4096
10000e78:	21158804 	addi	r4,r4,22048
10000e7c:	00023440 	call	10002344 <printf>
	while (usb_ctl_val != 0x03)
10000e80:	e0bffc0b 	ldhu	r2,-16(fp)
10000e84:	108000e0 	cmpeqi	r2,r2,3
10000e88:	1000061e 	bne	r2,zero,10000ea4 <main+0xad8>
	{
		usb_ctl_val = UsbGetRetryCnt();
10000e8c:	00022080 	call	10002208 <UsbGetRetryCnt>
10000e90:	e0bffc0d 	sth	r2,-16(fp)

		// Fatal problem; try again
		printf ("Encountered Fatal Error, restarting\n");
10000e94:	01040034 	movhi	r4,4096
10000e98:	21146e04 	addi	r4,r4,20920
10000e9c:	00024100 	call	10002410 <puts>
		goto USB_HOT_PLUG;
10000ea0:	003d5406 	br	100003f4 <__alt_data_end+0xf80003f4>
	}

	printf("---------------[ENUM PROCESS]:get descriptor (class 0x22) done!----------------\n");
10000ea4:	01040034 	movhi	r4,4096
10000ea8:	21159404 	addi	r4,r4,22096
10000eac:	00024100 	call	10002410 <puts>



	//-----------------------------------get keycode value------------------------------------------------//
	usleep(10000);
10000eb0:	0109c404 	movi	r4,10000
10000eb4:	0002e480 	call	10002e48 <usleep>
	while(1)
	{
		toggle++;
10000eb8:	e0bffc83 	ldbu	r2,-14(fp)
10000ebc:	10800044 	addi	r2,r2,1
10000ec0:	e0bffc85 	stb	r2,-14(fp)
		IO_write(HPI_ADDR,0x0500); //the start address
10000ec4:	01414004 	movi	r5,1280
10000ec8:	01000084 	movi	r4,2
10000ecc:	00002f40 	call	100002f4 <IO_write>
		//data phase IN-1
		IO_write(HPI_DATA,0x051c); //500
10000ed0:	01414704 	movi	r5,1308
10000ed4:	0009883a 	mov	r4,zero
10000ed8:	00002f40 	call	100002f4 <IO_write>

		IO_write(HPI_DATA,0x000f & data_size);//2 data length
10000edc:	e0bffe83 	ldbu	r2,-6(fp)
10000ee0:	108003cc 	andi	r2,r2,15
10000ee4:	100b883a 	mov	r5,r2
10000ee8:	0009883a 	mov	r4,zero
10000eec:	00002f40 	call	100002f4 <IO_write>

		IO_write(HPI_DATA,0x0291);//4 //endpoint 1
10000ef0:	0140a444 	movi	r5,657
10000ef4:	0009883a 	mov	r4,zero
10000ef8:	00002f40 	call	100002f4 <IO_write>
		if(toggle%2)
10000efc:	e0bffc83 	ldbu	r2,-14(fp)
10000f00:	1080004c 	andi	r2,r2,1
10000f04:	10803fcc 	andi	r2,r2,255
10000f08:	10000426 	beq	r2,zero,10000f1c <main+0xb50>
		{
			IO_write(HPI_DATA,0x0001);//6 //data 1
10000f0c:	01400044 	movi	r5,1
10000f10:	0009883a 	mov	r4,zero
10000f14:	00002f40 	call	100002f4 <IO_write>
10000f18:	00000306 	br	10000f28 <main+0xb5c>
		}
		else
		{
			IO_write(HPI_DATA,0x0041);//6 //data 1
10000f1c:	01401044 	movi	r5,65
10000f20:	0009883a 	mov	r4,zero
10000f24:	00002f40 	call	100002f4 <IO_write>
		}
		IO_write(HPI_DATA,0x0013);//8
10000f28:	014004c4 	movi	r5,19
10000f2c:	0009883a 	mov	r4,zero
10000f30:	00002f40 	call	100002f4 <IO_write>
		IO_write(HPI_DATA,0x0000);//a
10000f34:	000b883a 	mov	r5,zero
10000f38:	0009883a 	mov	r4,zero
10000f3c:	00002f40 	call	100002f4 <IO_write>
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10000f40:	01414004 	movi	r5,1280
10000f44:	01006c04 	movi	r4,432
10000f48:	000118c0 	call	1000118c <UsbWrite>
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000f4c:	00002406 	br	10000fe0 <main+0xc14>
		{
			IO_write(HPI_ADDR,0x0500); //the start address
10000f50:	01414004 	movi	r5,1280
10000f54:	01000084 	movi	r4,2
10000f58:	00002f40 	call	100002f4 <IO_write>
			//data phase IN-1
			IO_write(HPI_DATA,0x051c); //500
10000f5c:	01414704 	movi	r5,1308
10000f60:	0009883a 	mov	r4,zero
10000f64:	00002f40 	call	100002f4 <IO_write>

			IO_write(HPI_DATA,0x000f & data_size);//2 data length
10000f68:	e0bffe83 	ldbu	r2,-6(fp)
10000f6c:	108003cc 	andi	r2,r2,15
10000f70:	100b883a 	mov	r5,r2
10000f74:	0009883a 	mov	r4,zero
10000f78:	00002f40 	call	100002f4 <IO_write>

			IO_write(HPI_DATA,0x0291);//4 //endpoint 1
10000f7c:	0140a444 	movi	r5,657
10000f80:	0009883a 	mov	r4,zero
10000f84:	00002f40 	call	100002f4 <IO_write>
			if(toggle%2)
10000f88:	e0bffc83 	ldbu	r2,-14(fp)
10000f8c:	1080004c 	andi	r2,r2,1
10000f90:	10803fcc 	andi	r2,r2,255
10000f94:	10000426 	beq	r2,zero,10000fa8 <main+0xbdc>
			{
				IO_write(HPI_DATA,0x0001);//6 //data 1
10000f98:	01400044 	movi	r5,1
10000f9c:	0009883a 	mov	r4,zero
10000fa0:	00002f40 	call	100002f4 <IO_write>
10000fa4:	00000306 	br	10000fb4 <main+0xbe8>
			}
			else
			{
				IO_write(HPI_DATA,0x0041);//6 //data 1
10000fa8:	01401044 	movi	r5,65
10000fac:	0009883a 	mov	r4,zero
10000fb0:	00002f40 	call	100002f4 <IO_write>
			}
			IO_write(HPI_DATA,0x0013);//8
10000fb4:	014004c4 	movi	r5,19
10000fb8:	0009883a 	mov	r4,zero
10000fbc:	00002f40 	call	100002f4 <IO_write>
			IO_write(HPI_DATA,0x0000);//
10000fc0:	000b883a 	mov	r5,zero
10000fc4:	0009883a 	mov	r4,zero
10000fc8:	00002f40 	call	100002f4 <IO_write>
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10000fcc:	01414004 	movi	r5,1280
10000fd0:	01006c04 	movi	r4,432
10000fd4:	000118c0 	call	1000118c <UsbWrite>
			usleep(10*1000);
10000fd8:	0109c404 	movi	r4,10000
10000fdc:	0002e480 	call	10002e48 <usleep>
		}
		IO_write(HPI_DATA,0x0013);//8
		IO_write(HPI_DATA,0x0000);//a
		UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
		
		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10000fe0:	010000c4 	movi	r4,3
10000fe4:	00003640 	call	10000364 <IO_read>
10000fe8:	10bfffcc 	andi	r2,r2,65535
10000fec:	1080040c 	andi	r2,r2,16
10000ff0:	103fd726 	beq	r2,zero,10000f50 <__alt_data_end+0xf8000f50>
			IO_write(HPI_DATA,0x0000);//
			UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
			usleep(10*1000);
		}//end while

		usb_ctl_val = UsbWaitTDListDone();
10000ff4:	00021840 	call	10002184 <UsbWaitTDListDone>
10000ff8:	e0bffc0d 	sth	r2,-16(fp)

		// The first two keycodes are stored in 0x051E. Other keycodes are in 
		// subsequent addresses.

		keycode =  (UsbRead(0x051e));
10000ffc:	01014784 	movi	r4,1310
10001000:	00011e40 	call	100011e4 <UsbRead>
10001004:	10bfffcc 	andi	r2,r2,65535
10001008:	e0bfff15 	stw	r2,-4(fp)
		keycode += (UsbRead(0x0520)<<16);
1000100c:	01014804 	movi	r4,1312
10001010:	00011e40 	call	100011e4 <UsbRead>
10001014:	10bfffcc 	andi	r2,r2,65535
10001018:	1004943a 	slli	r2,r2,16
1000101c:	1007883a 	mov	r3,r2
10001020:	e0bfff17 	ldw	r2,-4(fp)
10001024:	10c5883a 	add	r2,r2,r3
10001028:	e0bfff15 	stw	r2,-4(fp)

		printf("\nfirst keycode values is %08x  ",keycode);
1000102c:	e17fff17 	ldw	r5,-4(fp)
10001030:	01040034 	movhi	r4,4096
10001034:	2115a804 	addi	r4,r4,22176
10001038:	00023440 	call	10002344 <printf>
		// We only need the first keycode, which is at the lower byte of keycode.
		// Send the keycode to hardware via PIO.
		*keycode_base = keycode;
1000103c:	00802404 	movi	r2,144
10001040:	e0ffff17 	ldw	r3,-4(fp)
10001044:	10c00015 	stw	r3,0(r2)

		usleep(200);//usleep(5000);
10001048:	01003204 	movi	r4,200
1000104c:	0002e480 	call	10002e48 <usleep>
		usb_ctl_val = UsbRead(ctl_reg);
10001050:	d0a4d00b 	ldhu	r2,-27840(gp)
10001054:	10bfffcc 	andi	r2,r2,65535
10001058:	1009883a 	mov	r4,r2
1000105c:	00011e40 	call	100011e4 <UsbRead>
10001060:	e0bffc0d 	sth	r2,-16(fp)

		if(!(usb_ctl_val & no_device))
10001064:	d0a4d08b 	ldhu	r2,-27838(gp)
10001068:	e0fffc0b 	ldhu	r3,-16(fp)
1000106c:	1884703a 	and	r2,r3,r2
10001070:	10bfffcc 	andi	r2,r2,65535
10001074:	10003f1e 	bne	r2,zero,10001174 <main+0xda8>
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
10001078:	e03ffcc5 	stb	zero,-13(fp)
1000107c:	00000f06 	br	100010bc <main+0xcf0>
			{
				usleep(5*1000);
10001080:	0104e204 	movi	r4,5000
10001084:	0002e480 	call	10002e48 <usleep>
				usb_ctl_val = UsbRead(ctl_reg);
10001088:	d0a4d00b 	ldhu	r2,-27840(gp)
1000108c:	10bfffcc 	andi	r2,r2,65535
10001090:	1009883a 	mov	r4,r2
10001094:	00011e40 	call	100011e4 <UsbRead>
10001098:	e0bffc0d 	sth	r2,-16(fp)
				if(usb_ctl_val & no_device) break;
1000109c:	d0a4d08b 	ldhu	r2,-27838(gp)
100010a0:	e0fffc0b 	ldhu	r3,-16(fp)
100010a4:	1884703a 	and	r2,r3,r2
100010a8:	10bfffcc 	andi	r2,r2,65535
100010ac:	1000071e 	bne	r2,zero,100010cc <main+0xd00>
		usb_ctl_val = UsbRead(ctl_reg);

		if(!(usb_ctl_val & no_device))
		{
			//USB hot plug routine
			for(hot_plug_count = 0 ; hot_plug_count < 7 ; hot_plug_count++)
100010b0:	e0bffcc3 	ldbu	r2,-13(fp)
100010b4:	10800044 	addi	r2,r2,1
100010b8:	e0bffcc5 	stb	r2,-13(fp)
100010bc:	e0bffcc3 	ldbu	r2,-13(fp)
100010c0:	108001f0 	cmpltui	r2,r2,7
100010c4:	103fee1e 	bne	r2,zero,10001080 <__alt_data_end+0xf8001080>
100010c8:	00000106 	br	100010d0 <main+0xd04>
			{
				usleep(5*1000);
				usb_ctl_val = UsbRead(ctl_reg);
				if(usb_ctl_val & no_device) break;
100010cc:	0001883a 	nop
			}
			if(!(usb_ctl_val & no_device))
100010d0:	d0a4d08b 	ldhu	r2,-27838(gp)
100010d4:	e0fffc0b 	ldhu	r3,-16(fp)
100010d8:	1884703a 	and	r2,r3,r2
100010dc:	10bfffcc 	andi	r2,r2,65535
100010e0:	1000241e 	bne	r2,zero,10001174 <main+0xda8>
			{
				printf("\n[INFO]: the keyboard has been removed!!! \n");
100010e4:	01040034 	movhi	r4,4096
100010e8:	2115b004 	addi	r4,r4,22208
100010ec:	00024100 	call	10002410 <puts>
				printf("[INFO]: please insert again!!! \n");
100010f0:	01040034 	movhi	r4,4096
100010f4:	2115bb04 	addi	r4,r4,22252
100010f8:	00024100 	call	10002410 <puts>
			}
		}

		while (!(usb_ctl_val & no_device))
100010fc:	00001d06 	br	10001174 <main+0xda8>
		{

			usb_ctl_val = UsbRead(ctl_reg);
10001100:	d0a4d00b 	ldhu	r2,-27840(gp)
10001104:	10bfffcc 	andi	r2,r2,65535
10001108:	1009883a 	mov	r4,r2
1000110c:	00011e40 	call	100011e4 <UsbRead>
10001110:	e0bffc0d 	sth	r2,-16(fp)
			usleep(5*1000);
10001114:	0104e204 	movi	r4,5000
10001118:	0002e480 	call	10002e48 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
1000111c:	d0a4d00b 	ldhu	r2,-27840(gp)
10001120:	10bfffcc 	andi	r2,r2,65535
10001124:	1009883a 	mov	r4,r2
10001128:	00011e40 	call	100011e4 <UsbRead>
1000112c:	e0bffc0d 	sth	r2,-16(fp)
			usleep(5*1000);
10001130:	0104e204 	movi	r4,5000
10001134:	0002e480 	call	10002e48 <usleep>
			usb_ctl_val = UsbRead(ctl_reg);
10001138:	d0a4d00b 	ldhu	r2,-27840(gp)
1000113c:	10bfffcc 	andi	r2,r2,65535
10001140:	1009883a 	mov	r4,r2
10001144:	00011e40 	call	100011e4 <UsbRead>
10001148:	e0bffc0d 	sth	r2,-16(fp)
			usleep(5*1000);
1000114c:	0104e204 	movi	r4,5000
10001150:	0002e480 	call	10002e48 <usleep>

			if(usb_ctl_val & no_device)
10001154:	d0a4d08b 	ldhu	r2,-27838(gp)
10001158:	e0fffc0b 	ldhu	r3,-16(fp)
1000115c:	1884703a 	and	r2,r3,r2
10001160:	10bfffcc 	andi	r2,r2,65535
10001164:	10000126 	beq	r2,zero,1000116c <main+0xda0>
				goto USB_HOT_PLUG;
10001168:	003ca206 	br	100003f4 <__alt_data_end+0xf80003f4>

			usleep(200);
1000116c:	01003204 	movi	r4,200
10001170:	0002e480 	call	10002e48 <usleep>
				printf("\n[INFO]: the keyboard has been removed!!! \n");
				printf("[INFO]: please insert again!!! \n");
			}
		}

		while (!(usb_ctl_val & no_device))
10001174:	d0a4d08b 	ldhu	r2,-27838(gp)
10001178:	e0fffc0b 	ldhu	r3,-16(fp)
1000117c:	1884703a 	and	r2,r3,r2
10001180:	10bfffcc 	andi	r2,r2,65535
10001184:	103fde26 	beq	r2,zero,10001100 <__alt_data_end+0xf8001100>
				goto USB_HOT_PLUG;

			usleep(200);
		}

	}//end while
10001188:	003f4b06 	br	10000eb8 <__alt_data_end+0xf8000eb8>

1000118c <UsbWrite>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbWrite(alt_u16 Address, alt_u16 Data)
{
1000118c:	defffc04 	addi	sp,sp,-16
10001190:	dfc00315 	stw	ra,12(sp)
10001194:	df000215 	stw	fp,8(sp)
10001198:	df000204 	addi	fp,sp,8
1000119c:	2007883a 	mov	r3,r4
100011a0:	2805883a 	mov	r2,r5
100011a4:	e0fffe0d 	sth	r3,-8(fp)
100011a8:	e0bfff0d 	sth	r2,-4(fp)
	IO_write(HPI_ADDR, Address);
100011ac:	e0bffe0b 	ldhu	r2,-8(fp)
100011b0:	100b883a 	mov	r5,r2
100011b4:	01000084 	movi	r4,2
100011b8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA, Data);
100011bc:	e0bfff0b 	ldhu	r2,-4(fp)
100011c0:	100b883a 	mov	r5,r2
100011c4:	0009883a 	mov	r4,zero
100011c8:	00002f40 	call	100002f4 <IO_write>
}
100011cc:	0001883a 	nop
100011d0:	e037883a 	mov	sp,fp
100011d4:	dfc00117 	ldw	ra,4(sp)
100011d8:	df000017 	ldw	fp,0(sp)
100011dc:	dec00204 	addi	sp,sp,8
100011e0:	f800283a 	ret

100011e4 <UsbRead>:
 *
 * @note     None
 *
 ******************************************************************************/
alt_u16 UsbRead(alt_u16 Address)
{
100011e4:	defffc04 	addi	sp,sp,-16
100011e8:	dfc00315 	stw	ra,12(sp)
100011ec:	df000215 	stw	fp,8(sp)
100011f0:	df000204 	addi	fp,sp,8
100011f4:	2005883a 	mov	r2,r4
100011f8:	e0bfff0d 	sth	r2,-4(fp)
	alt_u16 temp;
	IO_write(HPI_ADDR, Address);
100011fc:	e0bfff0b 	ldhu	r2,-4(fp)
10001200:	100b883a 	mov	r5,r2
10001204:	01000084 	movi	r4,2
10001208:	00002f40 	call	100002f4 <IO_write>
	temp = IO_read(HPI_DATA);
1000120c:	0009883a 	mov	r4,zero
10001210:	00003640 	call	10000364 <IO_read>
10001214:	e0bffe0d 	sth	r2,-8(fp)
	return temp;
10001218:	e0bffe0b 	ldhu	r2,-8(fp)
}
1000121c:	e037883a 	mov	sp,fp
10001220:	dfc00117 	ldw	ra,4(sp)
10001224:	df000017 	ldw	fp,0(sp)
10001228:	dec00204 	addi	sp,sp,8
1000122c:	f800283a 	ret

10001230 <UsbSoftReset>:
 *
 * @note     None
 *
 ******************************************************************************/
void UsbSoftReset()
{
10001230:	defffe04 	addi	sp,sp,-8
10001234:	dfc00115 	stw	ra,4(sp)
10001238:	df000015 	stw	fp,0(sp)
1000123c:	d839883a 	mov	fp,sp
	//XIo_Out16(USB_MAILBOX, COMM_RESET);
	IO_write(HPI_MAILBOX,COMM_RESET); //COMM_JUMP2CODE
10001240:	017e9414 	movui	r5,64080
10001244:	01000044 	movi	r4,1
10001248:	00002f40 	call	100002f4 <IO_write>
	usleep(100000);
1000124c:	010000b4 	movhi	r4,2
10001250:	2121a804 	addi	r4,r4,-31072
10001254:	0002e480 	call	10002e48 <usleep>
	printf("[USB INIT]:reset finished!\n");
10001258:	01040034 	movhi	r4,4096
1000125c:	2115c304 	addi	r4,r4,22284
10001260:	00024100 	call	10002410 <puts>

	usleep(500000);
10001264:	01000234 	movhi	r4,8
10001268:	21284804 	addi	r4,r4,-24288
1000126c:	0002e480 	call	10002e48 <usleep>
	printf("[USB INIT]:Clear up the interrupt\r\n");
10001270:	01040034 	movhi	r4,4096
10001274:	2115ca04 	addi	r4,r4,22312
10001278:	00024100 	call	10002410 <puts>
	IO_read(HPI_MAILBOX);
1000127c:	01000044 	movi	r4,1
10001280:	00003640 	call	10000364 <IO_read>
	IO_read(HPI_STATUS);
10001284:	010000c4 	movi	r4,3
10001288:	00003640 	call	10000364 <IO_read>

	// Had to add the write due to a bug in BIOS where they overwrite
	// the mailbox after initialization with garbage.  The read clears
	// any pending interrupts.
	UsbRead (HPI_SIE1_MSG_ADR);
1000128c:	01005104 	movi	r4,324
10001290:	00011e40 	call	100011e4 <UsbRead>
	UsbWrite (HPI_SIE1_MSG_ADR, 0);
10001294:	000b883a 	mov	r5,zero
10001298:	01005104 	movi	r4,324
1000129c:	000118c0 	call	1000118c <UsbWrite>
	UsbRead (HPI_SIE2_MSG_ADR);
100012a0:	01005204 	movi	r4,328
100012a4:	00011e40 	call	100011e4 <UsbRead>
	UsbWrite (HPI_SIE2_MSG_ADR, 0);
100012a8:	000b883a 	mov	r5,zero
100012ac:	01005204 	movi	r4,328
100012b0:	000118c0 	call	1000118c <UsbWrite>


	UsbWrite (HOST1_STAT_REG, 0xFFFF);
100012b4:	017fffd4 	movui	r5,65535
100012b8:	01302414 	movui	r4,49296
100012bc:	000118c0 	call	1000118c <UsbWrite>
	UsbWrite (HOST2_STAT_REG, 0xFFFF);
100012c0:	017fffd4 	movui	r5,65535
100012c4:	01302c14 	movui	r4,49328
100012c8:	000118c0 	call	1000118c <UsbWrite>
}
100012cc:	0001883a 	nop
100012d0:	e037883a 	mov	sp,fp
100012d4:	dfc00117 	ldw	ra,4(sp)
100012d8:	df000017 	ldw	fp,0(sp)
100012dc:	dec00204 	addi	sp,sp,8
100012e0:	f800283a 	ret

100012e4 <UsbSetAddress>:


void UsbSetAddress()
{
100012e4:	defffe04 	addi	sp,sp,-8
100012e8:	dfc00115 	stw	ra,4(sp)
100012ec:	df000015 	stw	fp,0(sp)
100012f0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100012f4:	01414004 	movi	r5,1280
100012f8:	01000084 	movi	r4,2
100012fc:	00002f40 	call	100002f4 <IO_write>
	// TD #1: 6 writes
	IO_write(HPI_DATA,0x050C);
10001300:	01414304 	movi	r5,1292
10001304:	0009883a 	mov	r4,zero
10001308:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
1000130c:	01400204 	movi	r5,8
10001310:	0009883a 	mov	r4,zero
10001314:	00002f40 	call	100002f4 <IO_write>
	// TASK: Complete with 4 more IOWR functions
	IO_write(HPI_DATA,0x00D0);
10001318:	01403404 	movi	r5,208
1000131c:	0009883a 	mov	r4,zero
10001320:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001324:	01400044 	movi	r5,1
10001328:	0009883a 	mov	r4,zero
1000132c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001330:	014004c4 	movi	r5,19
10001334:	0009883a 	mov	r4,zero
10001338:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
1000133c:	01414504 	movi	r5,1300
10001340:	0009883a 	mov	r4,zero
10001344:	00002f40 	call	100002f4 <IO_write>
	// TD #2: 4 writes
	// TASK: Complete with 4 IOWR functions
	IO_write(HPI_DATA,0x0500);
10001348:	01414004 	movi	r5,1280
1000134c:	0009883a 	mov	r4,zero
10001350:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0002);
10001354:	01400084 	movi	r5,2
10001358:	0009883a 	mov	r4,zero
1000135c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001360:	000b883a 	mov	r5,zero
10001364:	0009883a 	mov	r4,zero
10001368:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
1000136c:	000b883a 	mov	r5,zero
10001370:	0009883a 	mov	r4,zero
10001374:	00002f40 	call	100002f4 <IO_write>
	// TD #3: 6 writes
	// TASK: Complete with 6 IOWR functions
	IO_write(HPI_DATA,0x0000); //
10001378:	000b883a 	mov	r5,zero
1000137c:	0009883a 	mov	r4,zero
10001380:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//
10001384:	000b883a 	mov	r5,zero
10001388:	0009883a 	mov	r4,zero
1000138c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0090);//
10001390:	01402404 	movi	r5,144
10001394:	0009883a 	mov	r4,zero
10001398:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);
1000139c:	01401044 	movi	r5,65
100013a0:	0009883a 	mov	r4,zero
100013a4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
100013a8:	014004c4 	movi	r5,19
100013ac:	0009883a 	mov	r4,zero
100013b0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
100013b4:	000b883a 	mov	r5,zero
100013b8:	0009883a 	mov	r4,zero
100013bc:	00002f40 	call	100002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100013c0:	01414004 	movi	r5,1280
100013c4:	01006c04 	movi	r4,432
100013c8:	000118c0 	call	1000118c <UsbWrite>
}
100013cc:	0001883a 	nop
100013d0:	e037883a 	mov	sp,fp
100013d4:	dfc00117 	ldw	ra,4(sp)
100013d8:	df000017 	ldw	fp,0(sp)
100013dc:	dec00204 	addi	sp,sp,8
100013e0:	f800283a 	ret

100013e4 <UsbGetDeviceDesc1>:


void UsbGetDeviceDesc1()
{
100013e4:	defffe04 	addi	sp,sp,-8
100013e8:	dfc00115 	stw	ra,4(sp)
100013ec:	df000015 	stw	fp,0(sp)
100013f0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100013f4:	01414004 	movi	r5,1280
100013f8:	01000084 	movi	r4,2
100013fc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001400:	01414304 	movi	r5,1292
10001404:	0009883a 	mov	r4,zero
10001408:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
1000140c:	01400204 	movi	r5,8
10001410:	0009883a 	mov	r4,zero
10001414:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10001418:	0140b404 	movi	r5,720
1000141c:	0009883a 	mov	r4,zero
10001420:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001424:	01400044 	movi	r5,1
10001428:	0009883a 	mov	r4,zero
1000142c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001430:	014004c4 	movi	r5,19
10001434:	0009883a 	mov	r4,zero
10001438:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
1000143c:	01414504 	movi	r5,1300
10001440:	0009883a 	mov	r4,zero
10001444:	00002f40 	call	100002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10001448:	0141a004 	movi	r5,1664
1000144c:	0009883a 	mov	r4,zero
10001450:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0100); //device 0x01
10001454:	01404004 	movi	r5,256
10001458:	0009883a 	mov	r4,zero
1000145c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001460:	000b883a 	mov	r5,zero
10001464:	0009883a 	mov	r4,zero
10001468:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);
1000146c:	01400204 	movi	r5,8
10001470:	0009883a 	mov	r4,zero
10001474:	00002f40 	call	100002f4 <IO_write>

	//data phase IN
	IO_write(HPI_DATA,0x052C); //
10001478:	01414b04 	movi	r5,1324
1000147c:	0009883a 	mov	r4,zero
10001480:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//
10001484:	01400204 	movi	r5,8
10001488:	0009883a 	mov	r4,zero
1000148c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//
10001490:	0140a404 	movi	r5,656
10001494:	0009883a 	mov	r4,zero
10001498:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);
1000149c:	01401044 	movi	r5,65
100014a0:	0009883a 	mov	r4,zero
100014a4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
100014a8:	014004c4 	movi	r5,19
100014ac:	0009883a 	mov	r4,zero
100014b0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);
100014b4:	01414804 	movi	r5,1312
100014b8:	0009883a 	mov	r4,zero
100014bc:	00002f40 	call	100002f4 <IO_write>

	//    //status phase
	IO_write(HPI_DATA,0x0000); //don't care
100014c0:	000b883a 	mov	r5,zero
100014c4:	0009883a 	mov	r4,zero
100014c8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
100014cc:	000b883a 	mov	r5,zero
100014d0:	0009883a 	mov	r4,zero
100014d4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//device address
100014d8:	01408404 	movi	r5,528
100014dc:	0009883a 	mov	r4,zero
100014e0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);
100014e4:	01401044 	movi	r5,65
100014e8:	0009883a 	mov	r4,zero
100014ec:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
100014f0:	014004c4 	movi	r5,19
100014f4:	0009883a 	mov	r4,zero
100014f8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
100014fc:	000b883a 	mov	r5,zero
10001500:	0009883a 	mov	r4,zero
10001504:	00002f40 	call	100002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001508:	01414004 	movi	r5,1280
1000150c:	01006c04 	movi	r4,432
10001510:	000118c0 	call	1000118c <UsbWrite>
}
10001514:	0001883a 	nop
10001518:	e037883a 	mov	sp,fp
1000151c:	dfc00117 	ldw	ra,4(sp)
10001520:	df000017 	ldw	fp,0(sp)
10001524:	dec00204 	addi	sp,sp,8
10001528:	f800283a 	ret

1000152c <UsbGetDeviceDesc2>:

void UsbGetDeviceDesc2()
{
1000152c:	defffe04 	addi	sp,sp,-8
10001530:	dfc00115 	stw	ra,4(sp)
10001534:	df000015 	stw	fp,0(sp)
10001538:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
1000153c:	01414004 	movi	r5,1280
10001540:	01000084 	movi	r4,2
10001544:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001548:	01414304 	movi	r5,1292
1000154c:	0009883a 	mov	r4,zero
10001550:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001554:	01400204 	movi	r5,8
10001558:	0009883a 	mov	r4,zero
1000155c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10001560:	0140b404 	movi	r5,720
10001564:	0009883a 	mov	r4,zero
10001568:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
1000156c:	01400044 	movi	r5,1
10001570:	0009883a 	mov	r4,zero
10001574:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001578:	014004c4 	movi	r5,19
1000157c:	0009883a 	mov	r4,zero
10001580:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001584:	01414504 	movi	r5,1300
10001588:	0009883a 	mov	r4,zero
1000158c:	00002f40 	call	100002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10001590:	0141a004 	movi	r5,1664
10001594:	0009883a 	mov	r4,zero
10001598:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0100);//e //device 0x01
1000159c:	01404004 	movi	r5,256
100015a0:	0009883a 	mov	r4,zero
100015a4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
100015a8:	000b883a 	mov	r5,zero
100015ac:	0009883a 	mov	r4,zero
100015b0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0012);//2
100015b4:	01400484 	movi	r5,18
100015b8:	0009883a 	mov	r4,zero
100015bc:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
100015c0:	01415104 	movi	r5,1348
100015c4:	0009883a 	mov	r4,zero
100015c8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
100015cc:	01400204 	movi	r5,8
100015d0:	0009883a 	mov	r4,zero
100015d4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
100015d8:	0140a404 	movi	r5,656
100015dc:	0009883a 	mov	r4,zero
100015e0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
100015e4:	01401044 	movi	r5,65
100015e8:	0009883a 	mov	r4,zero
100015ec:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
100015f0:	014004c4 	movi	r5,19
100015f4:	0009883a 	mov	r4,zero
100015f8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
100015fc:	01414804 	movi	r5,1312
10001600:	0009883a 	mov	r4,zero
10001604:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
10001608:	01415304 	movi	r5,1356
1000160c:	0009883a 	mov	r4,zero
10001610:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10001614:	01400204 	movi	r5,8
10001618:	0009883a 	mov	r4,zero
1000161c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10001620:	0140a404 	movi	r5,656
10001624:	0009883a 	mov	r4,zero
10001628:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6
1000162c:	01400044 	movi	r5,1
10001630:	0009883a 	mov	r4,zero
10001634:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10001638:	014004c4 	movi	r5,19
1000163c:	0009883a 	mov	r4,zero
10001640:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10001644:	01414b04 	movi	r5,1324
10001648:	0009883a 	mov	r4,zero
1000164c:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0554); //c
10001650:	01415504 	movi	r5,1364
10001654:	0009883a 	mov	r4,zero
10001658:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0002);//e
1000165c:	01400084 	movi	r5,2
10001660:	0009883a 	mov	r4,zero
10001664:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10001668:	0140a404 	movi	r5,656
1000166c:	0009883a 	mov	r4,zero
10001670:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10001674:	01401044 	movi	r5,65
10001678:	0009883a 	mov	r4,zero
1000167c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10001680:	014004c4 	movi	r5,19
10001684:	0009883a 	mov	r4,zero
10001688:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
1000168c:	01414e04 	movi	r5,1336
10001690:	0009883a 	mov	r4,zero
10001694:	00002f40 	call	100002f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //538
10001698:	000b883a 	mov	r5,zero
1000169c:	0009883a 	mov	r4,zero
100016a0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
100016a4:	000b883a 	mov	r5,zero
100016a8:	0009883a 	mov	r4,zero
100016ac:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//c
100016b0:	01408404 	movi	r5,528
100016b4:	0009883a 	mov	r4,zero
100016b8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//e
100016bc:	01401044 	movi	r5,65
100016c0:	0009883a 	mov	r4,zero
100016c4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
100016c8:	014004c4 	movi	r5,19
100016cc:	0009883a 	mov	r4,zero
100016d0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
100016d4:	000b883a 	mov	r5,zero
100016d8:	0009883a 	mov	r4,zero
100016dc:	00002f40 	call	100002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
100016e0:	01414004 	movi	r5,1280
100016e4:	01006c04 	movi	r4,432
100016e8:	000118c0 	call	1000118c <UsbWrite>
}
100016ec:	0001883a 	nop
100016f0:	e037883a 	mov	sp,fp
100016f4:	dfc00117 	ldw	ra,4(sp)
100016f8:	df000017 	ldw	fp,0(sp)
100016fc:	dec00204 	addi	sp,sp,8
10001700:	f800283a 	ret

10001704 <UsbGetConfigDesc1>:


void UsbGetConfigDesc1()
{
10001704:	defffe04 	addi	sp,sp,-8
10001708:	dfc00115 	stw	ra,4(sp)
1000170c:	df000015 	stw	fp,0(sp)
10001710:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001714:	01414004 	movi	r5,1280
10001718:	01000084 	movi	r4,2
1000171c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001720:	01414304 	movi	r5,1292
10001724:	0009883a 	mov	r4,zero
10001728:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
1000172c:	01400204 	movi	r5,8
10001730:	0009883a 	mov	r4,zero
10001734:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10001738:	0140b404 	movi	r5,720
1000173c:	0009883a 	mov	r4,zero
10001740:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001744:	01400044 	movi	r5,1
10001748:	0009883a 	mov	r4,zero
1000174c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001750:	014004c4 	movi	r5,19
10001754:	0009883a 	mov	r4,zero
10001758:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
1000175c:	01414504 	movi	r5,1300
10001760:	0009883a 	mov	r4,zero
10001764:	00002f40 	call	100002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
10001768:	0141a004 	movi	r5,1664
1000176c:	0009883a 	mov	r4,zero
10001770:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
10001774:	01408004 	movi	r5,512
10001778:	0009883a 	mov	r4,zero
1000177c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10001780:	000b883a 	mov	r5,zero
10001784:	0009883a 	mov	r4,zero
10001788:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0009);//2
1000178c:	01400244 	movi	r5,9
10001790:	0009883a 	mov	r4,zero
10001794:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10001798:	01415104 	movi	r5,1348
1000179c:	0009883a 	mov	r4,zero
100017a0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
100017a4:	01400204 	movi	r5,8
100017a8:	0009883a 	mov	r4,zero
100017ac:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
100017b0:	0140a404 	movi	r5,656
100017b4:	0009883a 	mov	r4,zero
100017b8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
100017bc:	01401044 	movi	r5,65
100017c0:	0009883a 	mov	r4,zero
100017c4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
100017c8:	014004c4 	movi	r5,19
100017cc:	0009883a 	mov	r4,zero
100017d0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
100017d4:	01414804 	movi	r5,1312
100017d8:	0009883a 	mov	r4,zero
100017dc:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x054c); //520
100017e0:	01415304 	movi	r5,1356
100017e4:	0009883a 	mov	r4,zero
100017e8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//2
100017ec:	01400044 	movi	r5,1
100017f0:	0009883a 	mov	r4,zero
100017f4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
100017f8:	0140a404 	movi	r5,656
100017fc:	0009883a 	mov	r4,zero
10001800:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10001804:	01400044 	movi	r5,1
10001808:	0009883a 	mov	r4,zero
1000180c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10001810:	014004c4 	movi	r5,19
10001814:	0009883a 	mov	r4,zero
10001818:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
1000181c:	01414b04 	movi	r5,1324
10001820:	0009883a 	mov	r4,zero
10001824:	00002f40 	call	100002f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
10001828:	000b883a 	mov	r5,zero
1000182c:	0009883a 	mov	r4,zero
10001830:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10001834:	000b883a 	mov	r5,zero
10001838:	0009883a 	mov	r4,zero
1000183c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
10001840:	01408404 	movi	r5,528
10001844:	0009883a 	mov	r4,zero
10001848:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
1000184c:	01401044 	movi	r5,65
10001850:	0009883a 	mov	r4,zero
10001854:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10001858:	014004c4 	movi	r5,19
1000185c:	0009883a 	mov	r4,zero
10001860:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10001864:	000b883a 	mov	r5,zero
10001868:	0009883a 	mov	r4,zero
1000186c:	00002f40 	call	100002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001870:	01414004 	movi	r5,1280
10001874:	01006c04 	movi	r4,432
10001878:	000118c0 	call	1000118c <UsbWrite>
}
1000187c:	0001883a 	nop
10001880:	e037883a 	mov	sp,fp
10001884:	dfc00117 	ldw	ra,4(sp)
10001888:	df000017 	ldw	fp,0(sp)
1000188c:	dec00204 	addi	sp,sp,8
10001890:	f800283a 	ret

10001894 <UsbGetConfigDesc2>:


void UsbGetConfigDesc2()
{
10001894:	defffe04 	addi	sp,sp,-8
10001898:	dfc00115 	stw	ra,4(sp)
1000189c:	df000015 	stw	fp,0(sp)
100018a0:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
100018a4:	01414004 	movi	r5,1280
100018a8:	01000084 	movi	r4,2
100018ac:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
100018b0:	01414304 	movi	r5,1292
100018b4:	0009883a 	mov	r4,zero
100018b8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
100018bc:	01400204 	movi	r5,8
100018c0:	0009883a 	mov	r4,zero
100018c4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
100018c8:	0140b404 	movi	r5,720
100018cc:	0009883a 	mov	r4,zero
100018d0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
100018d4:	01400044 	movi	r5,1
100018d8:	0009883a 	mov	r4,zero
100018dc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
100018e0:	014004c4 	movi	r5,19
100018e4:	0009883a 	mov	r4,zero
100018e8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
100018ec:	01414504 	movi	r5,1300
100018f0:	0009883a 	mov	r4,zero
100018f4:	00002f40 	call	100002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0680);//c
100018f8:	0141a004 	movi	r5,1664
100018fc:	0009883a 	mov	r4,zero
10001900:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0200);//e //config 0x02
10001904:	01408004 	movi	r5,512
10001908:	0009883a 	mov	r4,zero
1000190c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10001910:	000b883a 	mov	r5,zero
10001914:	0009883a 	mov	r4,zero
10001918:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x00FF);//2
1000191c:	01403fc4 	movi	r5,255
10001920:	0009883a 	mov	r4,zero
10001924:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x055c); //514
10001928:	01415704 	movi	r5,1372
1000192c:	0009883a 	mov	r4,zero
10001930:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10001934:	01400204 	movi	r5,8
10001938:	0009883a 	mov	r4,zero
1000193c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10001940:	0140a404 	movi	r5,656
10001944:	0009883a 	mov	r4,zero
10001948:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
1000194c:	01401044 	movi	r5,65
10001950:	0009883a 	mov	r4,zero
10001954:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10001958:	014004c4 	movi	r5,19
1000195c:	0009883a 	mov	r4,zero
10001960:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10001964:	01414804 	movi	r5,1312
10001968:	0009883a 	mov	r4,zero
1000196c:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0564); //520
10001970:	01415904 	movi	r5,1380
10001974:	0009883a 	mov	r4,zero
10001978:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
1000197c:	01400204 	movi	r5,8
10001980:	0009883a 	mov	r4,zero
10001984:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10001988:	0140a404 	movi	r5,656
1000198c:	0009883a 	mov	r4,zero
10001990:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10001994:	01400044 	movi	r5,1
10001998:	0009883a 	mov	r4,zero
1000199c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
100019a0:	014004c4 	movi	r5,19
100019a4:	0009883a 	mov	r4,zero
100019a8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
100019ac:	01414b04 	movi	r5,1324
100019b0:	0009883a 	mov	r4,zero
100019b4:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x056c); //52c
100019b8:	01415b04 	movi	r5,1388
100019bc:	0009883a 	mov	r4,zero
100019c0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
100019c4:	01400204 	movi	r5,8
100019c8:	0009883a 	mov	r4,zero
100019cc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
100019d0:	0140a404 	movi	r5,656
100019d4:	0009883a 	mov	r4,zero
100019d8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
100019dc:	01401044 	movi	r5,65
100019e0:	0009883a 	mov	r4,zero
100019e4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
100019e8:	014004c4 	movi	r5,19
100019ec:	0009883a 	mov	r4,zero
100019f0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
100019f4:	01414e04 	movi	r5,1336
100019f8:	0009883a 	mov	r4,zero
100019fc:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0574); //538
10001a00:	01415d04 	movi	r5,1396
10001a04:	0009883a 	mov	r4,zero
10001a08:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
10001a0c:	01400204 	movi	r5,8
10001a10:	0009883a 	mov	r4,zero
10001a14:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10001a18:	0140a404 	movi	r5,656
10001a1c:	0009883a 	mov	r4,zero
10001a20:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10001a24:	01400044 	movi	r5,1
10001a28:	0009883a 	mov	r4,zero
10001a2c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10001a30:	014004c4 	movi	r5,19
10001a34:	0009883a 	mov	r4,zero
10001a38:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
10001a3c:	01415104 	movi	r5,1348
10001a40:	0009883a 	mov	r4,zero
10001a44:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x057c); //544
10001a48:	01415f04 	movi	r5,1404
10001a4c:	0009883a 	mov	r4,zero
10001a50:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0002);//6
10001a54:	01400084 	movi	r5,2
10001a58:	0009883a 	mov	r4,zero
10001a5c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10001a60:	0140a404 	movi	r5,656
10001a64:	0009883a 	mov	r4,zero
10001a68:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
10001a6c:	01401044 	movi	r5,65
10001a70:	0009883a 	mov	r4,zero
10001a74:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10001a78:	014004c4 	movi	r5,19
10001a7c:	0009883a 	mov	r4,zero
10001a80:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
10001a84:	01415404 	movi	r5,1360
10001a88:	0009883a 	mov	r4,zero
10001a8c:	00002f40 	call	100002f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //550
10001a90:	000b883a 	mov	r5,zero
10001a94:	0009883a 	mov	r4,zero
10001a98:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//2
10001a9c:	000b883a 	mov	r5,zero
10001aa0:	0009883a 	mov	r4,zero
10001aa4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//4
10001aa8:	01408404 	movi	r5,528
10001aac:	0009883a 	mov	r4,zero
10001ab0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//6
10001ab4:	01401044 	movi	r5,65
10001ab8:	0009883a 	mov	r4,zero
10001abc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10001ac0:	014004c4 	movi	r5,19
10001ac4:	0009883a 	mov	r4,zero
10001ac8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//a
10001acc:	000b883a 	mov	r5,zero
10001ad0:	0009883a 	mov	r4,zero
10001ad4:	00002f40 	call	100002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001ad8:	01414004 	movi	r5,1280
10001adc:	01006c04 	movi	r4,432
10001ae0:	000118c0 	call	1000118c <UsbWrite>
}
10001ae4:	0001883a 	nop
10001ae8:	e037883a 	mov	sp,fp
10001aec:	dfc00117 	ldw	ra,4(sp)
10001af0:	df000017 	ldw	fp,0(sp)
10001af4:	dec00204 	addi	sp,sp,8
10001af8:	f800283a 	ret

10001afc <UsbSetConfig>:

void UsbSetConfig()
{
10001afc:	defffe04 	addi	sp,sp,-8
10001b00:	dfc00115 	stw	ra,4(sp)
10001b04:	df000015 	stw	fp,0(sp)
10001b08:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001b0c:	01414004 	movi	r5,1280
10001b10:	01000084 	movi	r4,2
10001b14:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001b18:	01414304 	movi	r5,1292
10001b1c:	0009883a 	mov	r4,zero
10001b20:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001b24:	01400204 	movi	r5,8
10001b28:	0009883a 	mov	r4,zero
10001b2c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10001b30:	0140b404 	movi	r5,720
10001b34:	0009883a 	mov	r4,zero
10001b38:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001b3c:	01400044 	movi	r5,1
10001b40:	0009883a 	mov	r4,zero
10001b44:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001b48:	014004c4 	movi	r5,19
10001b4c:	0009883a 	mov	r4,zero
10001b50:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001b54:	01414504 	movi	r5,1300
10001b58:	0009883a 	mov	r4,zero
10001b5c:	00002f40 	call	100002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0900);
10001b60:	01424004 	movi	r5,2304
10001b64:	0009883a 	mov	r4,zero
10001b68:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//device address
10001b6c:	01400044 	movi	r5,1
10001b70:	0009883a 	mov	r4,zero
10001b74:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001b78:	000b883a 	mov	r5,zero
10001b7c:	0009883a 	mov	r4,zero
10001b80:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001b84:	000b883a 	mov	r5,zero
10001b88:	0009883a 	mov	r4,zero
10001b8c:	00002f40 	call	100002f4 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
10001b90:	000b883a 	mov	r5,zero
10001b94:	0009883a 	mov	r4,zero
10001b98:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number
10001b9c:	000b883a 	mov	r5,zero
10001ba0:	0009883a 	mov	r4,zero
10001ba4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
10001ba8:	0140a404 	movi	r5,656
10001bac:	0009883a 	mov	r4,zero
10001bb0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
10001bb4:	01401044 	movi	r5,65
10001bb8:	0009883a 	mov	r4,zero
10001bbc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001bc0:	014004c4 	movi	r5,19
10001bc4:	0009883a 	mov	r4,zero
10001bc8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001bcc:	000b883a 	mov	r5,zero
10001bd0:	0009883a 	mov	r4,zero
10001bd4:	00002f40 	call	100002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001bd8:	01414004 	movi	r5,1280
10001bdc:	01006c04 	movi	r4,432
10001be0:	000118c0 	call	1000118c <UsbWrite>

}
10001be4:	0001883a 	nop
10001be8:	e037883a 	mov	sp,fp
10001bec:	dfc00117 	ldw	ra,4(sp)
10001bf0:	df000017 	ldw	fp,0(sp)
10001bf4:	dec00204 	addi	sp,sp,8
10001bf8:	f800283a 	ret

10001bfc <UsbClassRequest>:

void UsbClassRequest()
{
10001bfc:	defffe04 	addi	sp,sp,-8
10001c00:	dfc00115 	stw	ra,4(sp)
10001c04:	df000015 	stw	fp,0(sp)
10001c08:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001c0c:	01414004 	movi	r5,1280
10001c10:	01000084 	movi	r4,2
10001c14:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001c18:	01414304 	movi	r5,1292
10001c1c:	0009883a 	mov	r4,zero
10001c20:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001c24:	01400204 	movi	r5,8
10001c28:	0009883a 	mov	r4,zero
10001c2c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10001c30:	0140b404 	movi	r5,720
10001c34:	0009883a 	mov	r4,zero
10001c38:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001c3c:	01400044 	movi	r5,1
10001c40:	0009883a 	mov	r4,zero
10001c44:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001c48:	014004c4 	movi	r5,19
10001c4c:	0009883a 	mov	r4,zero
10001c50:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001c54:	01414504 	movi	r5,1300
10001c58:	0009883a 	mov	r4,zero
10001c5c:	00002f40 	call	100002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0A21);
10001c60:	01428844 	movi	r5,2593
10001c64:	0009883a 	mov	r4,zero
10001c68:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//device address
10001c6c:	000b883a 	mov	r5,zero
10001c70:	0009883a 	mov	r4,zero
10001c74:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001c78:	000b883a 	mov	r5,zero
10001c7c:	0009883a 	mov	r4,zero
10001c80:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001c84:	000b883a 	mov	r5,zero
10001c88:	0009883a 	mov	r4,zero
10001c8c:	00002f40 	call	100002f4 <IO_write>
	//in packet
	IO_write(HPI_DATA,0x0000); //don't care
10001c90:	000b883a 	mov	r5,zero
10001c94:	0009883a 	mov	r4,zero
10001c98:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//port number /data length
10001c9c:	000b883a 	mov	r5,zero
10001ca0:	0009883a 	mov	r4,zero
10001ca4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//device address
10001ca8:	0140a404 	movi	r5,656
10001cac:	0009883a 	mov	r4,zero
10001cb0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041); //data 1
10001cb4:	01401044 	movi	r5,65
10001cb8:	0009883a 	mov	r4,zero
10001cbc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001cc0:	014004c4 	movi	r5,19
10001cc4:	0009883a 	mov	r4,zero
10001cc8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);
10001ccc:	000b883a 	mov	r5,zero
10001cd0:	0009883a 	mov	r4,zero
10001cd4:	00002f40 	call	100002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001cd8:	01414004 	movi	r5,1280
10001cdc:	01006c04 	movi	r4,432
10001ce0:	000118c0 	call	1000118c <UsbWrite>
}
10001ce4:	0001883a 	nop
10001ce8:	e037883a 	mov	sp,fp
10001cec:	dfc00117 	ldw	ra,4(sp)
10001cf0:	df000017 	ldw	fp,0(sp)
10001cf4:	dec00204 	addi	sp,sp,8
10001cf8:	f800283a 	ret

10001cfc <UsbGetHidDesc>:


void UsbGetHidDesc()
{
10001cfc:	defffe04 	addi	sp,sp,-8
10001d00:	dfc00115 	stw	ra,4(sp)
10001d04:	df000015 	stw	fp,0(sp)
10001d08:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001d0c:	01414004 	movi	r5,1280
10001d10:	01000084 	movi	r4,2
10001d14:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001d18:	01414304 	movi	r5,1292
10001d1c:	0009883a 	mov	r4,zero
10001d20:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001d24:	01400204 	movi	r5,8
10001d28:	0009883a 	mov	r4,zero
10001d2c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //port address
10001d30:	0140b404 	movi	r5,720
10001d34:	0009883a 	mov	r4,zero
10001d38:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001d3c:	01400044 	movi	r5,1
10001d40:	0009883a 	mov	r4,zero
10001d44:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001d48:	014004c4 	movi	r5,19
10001d4c:	0009883a 	mov	r4,zero
10001d50:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001d54:	01414504 	movi	r5,1300
10001d58:	0009883a 	mov	r4,zero
10001d5c:	00002f40 	call	100002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
10001d60:	0141a044 	movi	r5,1665
10001d64:	0009883a 	mov	r4,zero
10001d68:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x2100);//e //HID 0x21
10001d6c:	01484004 	movi	r5,8448
10001d70:	0009883a 	mov	r4,zero
10001d74:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10001d78:	000b883a 	mov	r5,zero
10001d7c:	0009883a 	mov	r4,zero
10001d80:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
10001d84:	01401ec4 	movi	r5,123
10001d88:	0009883a 	mov	r4,zero
10001d8c:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0544); //514
10001d90:	01415104 	movi	r5,1348
10001d94:	0009883a 	mov	r4,zero
10001d98:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10001d9c:	01400204 	movi	r5,8
10001da0:	0009883a 	mov	r4,zero
10001da4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10001da8:	0140a404 	movi	r5,656
10001dac:	0009883a 	mov	r4,zero
10001db0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10001db4:	01401044 	movi	r5,65
10001db8:	0009883a 	mov	r4,zero
10001dbc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10001dc0:	014004c4 	movi	r5,19
10001dc4:	0009883a 	mov	r4,zero
10001dc8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10001dcc:	01414804 	movi	r5,1312
10001dd0:	0009883a 	mov	r4,zero
10001dd4:	00002f40 	call	100002f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //52c
10001dd8:	000b883a 	mov	r5,zero
10001ddc:	0009883a 	mov	r4,zero
10001de0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10001de4:	000b883a 	mov	r5,zero
10001de8:	0009883a 	mov	r4,zero
10001dec:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//530
10001df0:	01408404 	movi	r5,528
10001df4:	0009883a 	mov	r4,zero
10001df8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10001dfc:	01401044 	movi	r5,65
10001e00:	0009883a 	mov	r4,zero
10001e04:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10001e08:	014004c4 	movi	r5,19
10001e0c:	0009883a 	mov	r4,zero
10001e10:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10001e14:	000b883a 	mov	r5,zero
10001e18:	0009883a 	mov	r4,zero
10001e1c:	00002f40 	call	100002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10001e20:	01414004 	movi	r5,1280
10001e24:	01006c04 	movi	r4,432
10001e28:	000118c0 	call	1000118c <UsbWrite>

}
10001e2c:	0001883a 	nop
10001e30:	e037883a 	mov	sp,fp
10001e34:	dfc00117 	ldw	ra,4(sp)
10001e38:	df000017 	ldw	fp,0(sp)
10001e3c:	dec00204 	addi	sp,sp,8
10001e40:	f800283a 	ret

10001e44 <UsbGetReportDesc>:


void UsbGetReportDesc()
{
10001e44:	defffe04 	addi	sp,sp,-8
10001e48:	dfc00115 	stw	ra,4(sp)
10001e4c:	df000015 	stw	fp,0(sp)
10001e50:	d839883a 	mov	fp,sp
	//the starting address
	IO_write(HPI_ADDR,0x0500); //the start address
10001e54:	01414004 	movi	r5,1280
10001e58:	01000084 	movi	r4,2
10001e5c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x050C);
10001e60:	01414304 	movi	r5,1292
10001e64:	0009883a 	mov	r4,zero
10001e68:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008); //4 port number
10001e6c:	01400204 	movi	r5,8
10001e70:	0009883a 	mov	r4,zero
10001e74:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x02D0); //device address
10001e78:	0140b404 	movi	r5,720
10001e7c:	0009883a 	mov	r4,zero
10001e80:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);
10001e84:	01400044 	movi	r5,1
10001e88:	0009883a 	mov	r4,zero
10001e8c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);
10001e90:	014004c4 	movi	r5,19
10001e94:	0009883a 	mov	r4,zero
10001e98:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0514);
10001e9c:	01414504 	movi	r5,1300
10001ea0:	0009883a 	mov	r4,zero
10001ea4:	00002f40 	call	100002f4 <IO_write>

	//td content 4 bytes
	IO_write(HPI_DATA,0x0681);//c
10001ea8:	0141a044 	movi	r5,1665
10001eac:	0009883a 	mov	r4,zero
10001eb0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x2200);//e //report 0x22
10001eb4:	01488004 	movi	r5,8704
10001eb8:	0009883a 	mov	r4,zero
10001ebc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//0
10001ec0:	000b883a 	mov	r5,zero
10001ec4:	0009883a 	mov	r4,zero
10001ec8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x007B);//2
10001ecc:	01401ec4 	movi	r5,123
10001ed0:	0009883a 	mov	r4,zero
10001ed4:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-1
	IO_write(HPI_DATA,0x0580); //514
10001ed8:	01416004 	movi	r5,1408
10001edc:	0009883a 	mov	r4,zero
10001ee0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10001ee4:	01400204 	movi	r5,8
10001ee8:	0009883a 	mov	r4,zero
10001eec:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10001ef0:	0140a404 	movi	r5,656
10001ef4:	0009883a 	mov	r4,zero
10001ef8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
10001efc:	01401044 	movi	r5,65
10001f00:	0009883a 	mov	r4,zero
10001f04:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10001f08:	014004c4 	movi	r5,19
10001f0c:	0009883a 	mov	r4,zero
10001f10:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0520);//e
10001f14:	01414804 	movi	r5,1312
10001f18:	0009883a 	mov	r4,zero
10001f1c:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-2
	IO_write(HPI_DATA,0x0588); //520
10001f20:	01416204 	movi	r5,1416
10001f24:	0009883a 	mov	r4,zero
10001f28:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
10001f2c:	01400204 	movi	r5,8
10001f30:	0009883a 	mov	r4,zero
10001f34:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10001f38:	0140a404 	movi	r5,656
10001f3c:	0009883a 	mov	r4,zero
10001f40:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10001f44:	01400044 	movi	r5,1
10001f48:	0009883a 	mov	r4,zero
10001f4c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10001f50:	014004c4 	movi	r5,19
10001f54:	0009883a 	mov	r4,zero
10001f58:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x052c);//a
10001f5c:	01414b04 	movi	r5,1324
10001f60:	0009883a 	mov	r4,zero
10001f64:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-3
	IO_write(HPI_DATA,0x0590); //52c
10001f68:	01416404 	movi	r5,1424
10001f6c:	0009883a 	mov	r4,zero
10001f70:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10001f74:	01400204 	movi	r5,8
10001f78:	0009883a 	mov	r4,zero
10001f7c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//530
10001f80:	0140a404 	movi	r5,656
10001f84:	0009883a 	mov	r4,zero
10001f88:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2
10001f8c:	01401044 	movi	r5,65
10001f90:	0009883a 	mov	r4,zero
10001f94:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
10001f98:	014004c4 	movi	r5,19
10001f9c:	0009883a 	mov	r4,zero
10001fa0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0538);//6
10001fa4:	01414e04 	movi	r5,1336
10001fa8:	0009883a 	mov	r4,zero
10001fac:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-4
	IO_write(HPI_DATA,0x0598); //538
10001fb0:	01416604 	movi	r5,1432
10001fb4:	0009883a 	mov	r4,zero
10001fb8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//a
10001fbc:	01400204 	movi	r5,8
10001fc0:	0009883a 	mov	r4,zero
10001fc4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
10001fc8:	0140a404 	movi	r5,656
10001fcc:	0009883a 	mov	r4,zero
10001fd0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
10001fd4:	01400044 	movi	r5,1
10001fd8:	0009883a 	mov	r4,zero
10001fdc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//540
10001fe0:	014004c4 	movi	r5,19
10001fe4:	0009883a 	mov	r4,zero
10001fe8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0544);//2
10001fec:	01415104 	movi	r5,1348
10001ff0:	0009883a 	mov	r4,zero
10001ff4:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-5
	IO_write(HPI_DATA,0x05a0); //544
10001ff8:	01416804 	movi	r5,1440
10001ffc:	0009883a 	mov	r4,zero
10002000:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//6
10002004:	01400204 	movi	r5,8
10002008:	0009883a 	mov	r4,zero
1000200c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//8
10002010:	0140a404 	movi	r5,656
10002014:	0009883a 	mov	r4,zero
10002018:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a //data1
1000201c:	01401044 	movi	r5,65
10002020:	0009883a 	mov	r4,zero
10002024:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10002028:	014004c4 	movi	r5,19
1000202c:	0009883a 	mov	r4,zero
10002030:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0550);//e
10002034:	01415404 	movi	r5,1360
10002038:	0009883a 	mov	r4,zero
1000203c:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-6
	IO_write(HPI_DATA,0x05a8); //550
10002040:	01416a04 	movi	r5,1448
10002044:	0009883a 	mov	r4,zero
10002048:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//2
1000204c:	01400204 	movi	r5,8
10002050:	0009883a 	mov	r4,zero
10002054:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//4
10002058:	0140a404 	movi	r5,656
1000205c:	0009883a 	mov	r4,zero
10002060:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//6 //data0
10002064:	01400044 	movi	r5,1
10002068:	0009883a 	mov	r4,zero
1000206c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//8
10002070:	014004c4 	movi	r5,19
10002074:	0009883a 	mov	r4,zero
10002078:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x055c);//a
1000207c:	01415704 	movi	r5,1372
10002080:	0009883a 	mov	r4,zero
10002084:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-7
	IO_write(HPI_DATA,0x05b0); //c
10002088:	01416c04 	movi	r5,1456
1000208c:	0009883a 	mov	r4,zero
10002090:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0008);//e
10002094:	01400204 	movi	r5,8
10002098:	0009883a 	mov	r4,zero
1000209c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//560
100020a0:	0140a404 	movi	r5,656
100020a4:	0009883a 	mov	r4,zero
100020a8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//2 //data1
100020ac:	01401044 	movi	r5,65
100020b0:	0009883a 	mov	r4,zero
100020b4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//4
100020b8:	014004c4 	movi	r5,19
100020bc:	0009883a 	mov	r4,zero
100020c0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0568);//6
100020c4:	01415a04 	movi	r5,1384
100020c8:	0009883a 	mov	r4,zero
100020cc:	00002f40 	call	100002f4 <IO_write>

	//data phase IN-8
	IO_write(HPI_DATA,0x05b8); //8
100020d0:	01416e04 	movi	r5,1464
100020d4:	0009883a 	mov	r4,zero
100020d8:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0003);//a
100020dc:	014000c4 	movi	r5,3
100020e0:	0009883a 	mov	r4,zero
100020e4:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0290);//c
100020e8:	0140a404 	movi	r5,656
100020ec:	0009883a 	mov	r4,zero
100020f0:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0001);//e //data0
100020f4:	01400044 	movi	r5,1
100020f8:	0009883a 	mov	r4,zero
100020fc:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//570
10002100:	014004c4 	movi	r5,19
10002104:	0009883a 	mov	r4,zero
10002108:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0574);//2
1000210c:	01415d04 	movi	r5,1396
10002110:	0009883a 	mov	r4,zero
10002114:	00002f40 	call	100002f4 <IO_write>

	//status phase
	IO_write(HPI_DATA,0x0000); //574
10002118:	000b883a 	mov	r5,zero
1000211c:	0009883a 	mov	r4,zero
10002120:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//6
10002124:	000b883a 	mov	r5,zero
10002128:	0009883a 	mov	r4,zero
1000212c:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0210);//8
10002130:	01408404 	movi	r5,528
10002134:	0009883a 	mov	r4,zero
10002138:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0041);//a
1000213c:	01401044 	movi	r5,65
10002140:	0009883a 	mov	r4,zero
10002144:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0013);//c
10002148:	014004c4 	movi	r5,19
1000214c:	0009883a 	mov	r4,zero
10002150:	00002f40 	call	100002f4 <IO_write>
	IO_write(HPI_DATA,0x0000);//e
10002154:	000b883a 	mov	r5,zero
10002158:	0009883a 	mov	r4,zero
1000215c:	00002f40 	call	100002f4 <IO_write>

	UsbWrite(HUSB_SIE1_pCurrentTDPtr,0x0500); //HUSB_SIE1_pCurrentTDPtr
10002160:	01414004 	movi	r5,1280
10002164:	01006c04 	movi	r4,432
10002168:	000118c0 	call	1000118c <UsbWrite>

}
1000216c:	0001883a 	nop
10002170:	e037883a 	mov	sp,fp
10002174:	dfc00117 	ldw	ra,4(sp)
10002178:	df000017 	ldw	fp,0(sp)
1000217c:	dec00204 	addi	sp,sp,8
10002180:	f800283a 	ret

10002184 <UsbWaitTDListDone>:


alt_u16 UsbWaitTDListDone()
{
10002184:	defffd04 	addi	sp,sp,-12
10002188:	dfc00215 	stw	ra,8(sp)
1000218c:	df000115 	stw	fp,4(sp)
10002190:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
10002194:	01005104 	movi	r4,324
10002198:	00011e40 	call	100011e4 <UsbRead>
1000219c:	e0bfff0d 	sth	r2,-4(fp)
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
100021a0:	000b883a 	mov	r5,zero
100021a4:	01005104 	movi	r4,324
100021a8:	000118c0 	call	1000118c <UsbWrite>
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
100021ac:	00000d06 	br	100021e4 <UsbWaitTDListDone+0x60>
	{
		if(usb_ctl_val == 0x0000)
100021b0:	e0bfff0b 	ldhu	r2,-4(fp)
100021b4:	10000526 	beq	r2,zero,100021cc <UsbWaitTDListDone+0x48>
		{
		}
		else
		{
			printf("[SIE1 MSG]:SIE1 msg reg is %x\n",usb_ctl_val);
100021b8:	e0bfff0b 	ldhu	r2,-4(fp)
100021bc:	100b883a 	mov	r5,r2
100021c0:	01040034 	movhi	r4,4096
100021c4:	2115d304 	addi	r4,r4,22348
100021c8:	00023440 	call	10002344 <printf>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
100021cc:	01005104 	movi	r4,324
100021d0:	00011e40 	call	100011e4 <UsbRead>
100021d4:	e0bfff0d 	sth	r2,-4(fp)
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
100021d8:	000b883a 	mov	r5,zero
100021dc:	01005104 	movi	r4,324
100021e0:	000118c0 	call	1000118c <UsbWrite>
{
	alt_u16 usb_ctl_val;

	usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR); // STEP 3 j
	UsbWrite(HPI_SIE1_MSG_ADR, 0);
	while (usb_ctl_val != HUSB_TDListDone)  // k, read sie1 msg register
100021e4:	e0bfff0b 	ldhu	r2,-4(fp)
100021e8:	10840018 	cmpnei	r2,r2,4096
100021ec:	103ff01e 	bne	r2,zero,100021b0 <__alt_data_end+0xf80021b0>
		}
		usb_ctl_val = UsbRead(HPI_SIE1_MSG_ADR);
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
	}

	return usb_ctl_val;
100021f0:	e0bfff0b 	ldhu	r2,-4(fp)
}
100021f4:	e037883a 	mov	sp,fp
100021f8:	dfc00117 	ldw	ra,4(sp)
100021fc:	df000017 	ldw	fp,0(sp)
10002200:	dec00204 	addi	sp,sp,8
10002204:	f800283a 	ret

10002208 <UsbGetRetryCnt>:


alt_u16 UsbGetRetryCnt()
{
10002208:	defffd04 	addi	sp,sp,-12
1000220c:	dfc00215 	stw	ra,8(sp)
10002210:	df000115 	stw	fp,4(sp)
10002214:	df000104 	addi	fp,sp,4
	alt_u16 usb_ctl_val;

	IO_read(HPI_STATUS);
10002218:	010000c4 	movi	r4,3
1000221c:	00003640 	call	10000364 <IO_read>
	if(UsbRead(HPI_SIE1_MSG_ADR) == HUSB_TDListDone)
10002220:	01005104 	movi	r4,324
10002224:	00011e40 	call	100011e4 <UsbRead>
10002228:	10bfffcc 	andi	r2,r2,65535
1000222c:	10840018 	cmpnei	r2,r2,4096
10002230:	1000091e 	bne	r2,zero,10002258 <UsbGetRetryCnt+0x50>
	{
		UsbWrite(HPI_SIE1_MSG_ADR, 0);
10002234:	000b883a 	mov	r5,zero
10002238:	01005104 	movi	r4,324
1000223c:	000118c0 	call	1000118c <UsbWrite>

		while (!(IO_read(HPI_STATUS) & HPI_STATUS_SIE1msg_FLAG) )  //read sie1 msg register
10002240:	0001883a 	nop
10002244:	010000c4 	movi	r4,3
10002248:	00003640 	call	10000364 <IO_read>
1000224c:	10bfffcc 	andi	r2,r2,65535
10002250:	1080040c 	andi	r2,r2,16
10002254:	103ffb26 	beq	r2,zero,10002244 <__alt_data_end+0xf8002244>
		{
		}
	}
	//usleep(1000);
	IO_write(HPI_ADDR,0x0508);
10002258:	01414204 	movi	r5,1288
1000225c:	01000084 	movi	r4,2
10002260:	00002f40 	call	100002f4 <IO_write>
	usb_ctl_val = IO_read(HPI_DATA);
10002264:	0009883a 	mov	r4,zero
10002268:	00003640 	call	10000364 <IO_read>
1000226c:	e0bfff0d 	sth	r2,-4(fp)

	return usb_ctl_val;
10002270:	e0bfff0b 	ldhu	r2,-4(fp)
}
10002274:	e037883a 	mov	sp,fp
10002278:	dfc00117 	ldw	ra,4(sp)
1000227c:	df000017 	ldw	fp,0(sp)
10002280:	dec00204 	addi	sp,sp,8
10002284:	f800283a 	ret

10002288 <UsbPrintMem>:


void UsbPrintMem()
{
10002288:	defffc04 	addi	sp,sp,-16
1000228c:	dfc00315 	stw	ra,12(sp)
10002290:	df000215 	stw	fp,8(sp)
10002294:	df000204 	addi	fp,sp,8
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
10002298:	01414004 	movi	r5,1280
1000229c:	01000084 	movi	r4,2
100022a0:	00002f40 	call	100002f4 <IO_write>
	for (i = 0; i <= 200; i += 2)
100022a4:	e03ffe15 	stw	zero,-8(fp)
100022a8:	00000e06 	br	100022e4 <UsbPrintMem+0x5c>
	{
		code = IO_read(HPI_DATA);
100022ac:	0009883a 	mov	r4,zero
100022b0:	00003640 	call	10000364 <IO_read>
100022b4:	10bfffcc 	andi	r2,r2,65535
100022b8:	e0bfff15 	stw	r2,-4(fp)
		printf("\naddr %x = %04x\n", 0x0500+i, code);
100022bc:	e0bffe17 	ldw	r2,-8(fp)
100022c0:	10814004 	addi	r2,r2,1280
100022c4:	e1bfff17 	ldw	r6,-4(fp)
100022c8:	100b883a 	mov	r5,r2
100022cc:	01040034 	movhi	r4,4096
100022d0:	2115db04 	addi	r4,r4,22380
100022d4:	00023440 	call	10002344 <printf>

void UsbPrintMem()
{
	int i, code;
	IO_write(HPI_ADDR,0x0500); //the start address
	for (i = 0; i <= 200; i += 2)
100022d8:	e0bffe17 	ldw	r2,-8(fp)
100022dc:	10800084 	addi	r2,r2,2
100022e0:	e0bffe15 	stw	r2,-8(fp)
100022e4:	e0bffe17 	ldw	r2,-8(fp)
100022e8:	10803250 	cmplti	r2,r2,201
100022ec:	103fef1e 	bne	r2,zero,100022ac <__alt_data_end+0xf80022ac>
	{
		code = IO_read(HPI_DATA);
		printf("\naddr %x = %04x\n", 0x0500+i, code);
	}
}
100022f0:	0001883a 	nop
100022f4:	e037883a 	mov	sp,fp
100022f8:	dfc00117 	ldw	ra,4(sp)
100022fc:	df000017 	ldw	fp,0(sp)
10002300:	dec00204 	addi	sp,sp,8
10002304:	f800283a 	ret

10002308 <_printf_r>:
10002308:	defffd04 	addi	sp,sp,-12
1000230c:	dfc00015 	stw	ra,0(sp)
10002310:	d9800115 	stw	r6,4(sp)
10002314:	d9c00215 	stw	r7,8(sp)
10002318:	20c00217 	ldw	r3,8(r4)
1000231c:	01840034 	movhi	r6,4096
10002320:	318a7d04 	addi	r6,r6,10740
10002324:	19800115 	stw	r6,4(r3)
10002328:	280d883a 	mov	r6,r5
1000232c:	21400217 	ldw	r5,8(r4)
10002330:	d9c00104 	addi	r7,sp,4
10002334:	00024ac0 	call	100024ac <___vfprintf_internal_r>
10002338:	dfc00017 	ldw	ra,0(sp)
1000233c:	dec00304 	addi	sp,sp,12
10002340:	f800283a 	ret

10002344 <printf>:
10002344:	defffc04 	addi	sp,sp,-16
10002348:	dfc00015 	stw	ra,0(sp)
1000234c:	d9400115 	stw	r5,4(sp)
10002350:	d9800215 	stw	r6,8(sp)
10002354:	d9c00315 	stw	r7,12(sp)
10002358:	00840034 	movhi	r2,4096
1000235c:	109aa904 	addi	r2,r2,27300
10002360:	10800017 	ldw	r2,0(r2)
10002364:	01440034 	movhi	r5,4096
10002368:	294a7d04 	addi	r5,r5,10740
1000236c:	10c00217 	ldw	r3,8(r2)
10002370:	d9800104 	addi	r6,sp,4
10002374:	19400115 	stw	r5,4(r3)
10002378:	200b883a 	mov	r5,r4
1000237c:	11000217 	ldw	r4,8(r2)
10002380:	00029d80 	call	100029d8 <__vfprintf_internal>
10002384:	dfc00017 	ldw	ra,0(sp)
10002388:	dec00404 	addi	sp,sp,16
1000238c:	f800283a 	ret

10002390 <_puts_r>:
10002390:	defffd04 	addi	sp,sp,-12
10002394:	dc000015 	stw	r16,0(sp)
10002398:	2021883a 	mov	r16,r4
1000239c:	2809883a 	mov	r4,r5
100023a0:	dfc00215 	stw	ra,8(sp)
100023a4:	dc400115 	stw	r17,4(sp)
100023a8:	2823883a 	mov	r17,r5
100023ac:	00024240 	call	10002424 <strlen>
100023b0:	81400217 	ldw	r5,8(r16)
100023b4:	01040034 	movhi	r4,4096
100023b8:	210a7d04 	addi	r4,r4,10740
100023bc:	29000115 	stw	r4,4(r5)
100023c0:	100f883a 	mov	r7,r2
100023c4:	880d883a 	mov	r6,r17
100023c8:	8009883a 	mov	r4,r16
100023cc:	00029f40 	call	100029f4 <__sfvwrite_small_dev>
100023d0:	00ffffc4 	movi	r3,-1
100023d4:	10c00926 	beq	r2,r3,100023fc <_puts_r+0x6c>
100023d8:	81400217 	ldw	r5,8(r16)
100023dc:	01840034 	movhi	r6,4096
100023e0:	01c00044 	movi	r7,1
100023e4:	28800117 	ldw	r2,4(r5)
100023e8:	3195e004 	addi	r6,r6,22400
100023ec:	8009883a 	mov	r4,r16
100023f0:	103ee83a 	callr	r2
100023f4:	10bfffe0 	cmpeqi	r2,r2,-1
100023f8:	0085c83a 	sub	r2,zero,r2
100023fc:	dfc00217 	ldw	ra,8(sp)
10002400:	dc400117 	ldw	r17,4(sp)
10002404:	dc000017 	ldw	r16,0(sp)
10002408:	dec00304 	addi	sp,sp,12
1000240c:	f800283a 	ret

10002410 <puts>:
10002410:	00840034 	movhi	r2,4096
10002414:	109aa904 	addi	r2,r2,27300
10002418:	200b883a 	mov	r5,r4
1000241c:	11000017 	ldw	r4,0(r2)
10002420:	00023901 	jmpi	10002390 <_puts_r>

10002424 <strlen>:
10002424:	2005883a 	mov	r2,r4
10002428:	10c00007 	ldb	r3,0(r2)
1000242c:	18000226 	beq	r3,zero,10002438 <strlen+0x14>
10002430:	10800044 	addi	r2,r2,1
10002434:	003ffc06 	br	10002428 <__alt_data_end+0xf8002428>
10002438:	1105c83a 	sub	r2,r2,r4
1000243c:	f800283a 	ret

10002440 <print_repeat>:
10002440:	defffb04 	addi	sp,sp,-20
10002444:	dc800315 	stw	r18,12(sp)
10002448:	dc400215 	stw	r17,8(sp)
1000244c:	dc000115 	stw	r16,4(sp)
10002450:	dfc00415 	stw	ra,16(sp)
10002454:	2025883a 	mov	r18,r4
10002458:	2823883a 	mov	r17,r5
1000245c:	d9800005 	stb	r6,0(sp)
10002460:	3821883a 	mov	r16,r7
10002464:	04000a0e 	bge	zero,r16,10002490 <print_repeat+0x50>
10002468:	88800117 	ldw	r2,4(r17)
1000246c:	01c00044 	movi	r7,1
10002470:	d80d883a 	mov	r6,sp
10002474:	880b883a 	mov	r5,r17
10002478:	9009883a 	mov	r4,r18
1000247c:	103ee83a 	callr	r2
10002480:	843fffc4 	addi	r16,r16,-1
10002484:	103ff726 	beq	r2,zero,10002464 <__alt_data_end+0xf8002464>
10002488:	00bfffc4 	movi	r2,-1
1000248c:	00000106 	br	10002494 <print_repeat+0x54>
10002490:	0005883a 	mov	r2,zero
10002494:	dfc00417 	ldw	ra,16(sp)
10002498:	dc800317 	ldw	r18,12(sp)
1000249c:	dc400217 	ldw	r17,8(sp)
100024a0:	dc000117 	ldw	r16,4(sp)
100024a4:	dec00504 	addi	sp,sp,20
100024a8:	f800283a 	ret

100024ac <___vfprintf_internal_r>:
100024ac:	deffe504 	addi	sp,sp,-108
100024b0:	d8c00804 	addi	r3,sp,32
100024b4:	ddc01815 	stw	r23,96(sp)
100024b8:	dd801715 	stw	r22,92(sp)
100024bc:	dd401615 	stw	r21,88(sp)
100024c0:	dd001515 	stw	r20,84(sp)
100024c4:	dcc01415 	stw	r19,80(sp)
100024c8:	dc801315 	stw	r18,76(sp)
100024cc:	dc401215 	stw	r17,72(sp)
100024d0:	dc001115 	stw	r16,68(sp)
100024d4:	dfc01a15 	stw	ra,104(sp)
100024d8:	df001915 	stw	fp,100(sp)
100024dc:	2029883a 	mov	r20,r4
100024e0:	2823883a 	mov	r17,r5
100024e4:	382d883a 	mov	r22,r7
100024e8:	d9800f15 	stw	r6,60(sp)
100024ec:	0021883a 	mov	r16,zero
100024f0:	d8000e15 	stw	zero,56(sp)
100024f4:	d8000a15 	stw	zero,40(sp)
100024f8:	002b883a 	mov	r21,zero
100024fc:	0027883a 	mov	r19,zero
10002500:	0025883a 	mov	r18,zero
10002504:	d8000c15 	stw	zero,48(sp)
10002508:	d8000b15 	stw	zero,44(sp)
1000250c:	002f883a 	mov	r23,zero
10002510:	d8c00915 	stw	r3,36(sp)
10002514:	d8c00f17 	ldw	r3,60(sp)
10002518:	19000003 	ldbu	r4,0(r3)
1000251c:	20803fcc 	andi	r2,r4,255
10002520:	1080201c 	xori	r2,r2,128
10002524:	10bfe004 	addi	r2,r2,-128
10002528:	10011e26 	beq	r2,zero,100029a4 <___vfprintf_internal_r+0x4f8>
1000252c:	00c00044 	movi	r3,1
10002530:	b8c01426 	beq	r23,r3,10002584 <___vfprintf_internal_r+0xd8>
10002534:	1dc00216 	blt	r3,r23,10002540 <___vfprintf_internal_r+0x94>
10002538:	b8000626 	beq	r23,zero,10002554 <___vfprintf_internal_r+0xa8>
1000253c:	00011506 	br	10002994 <___vfprintf_internal_r+0x4e8>
10002540:	01400084 	movi	r5,2
10002544:	b9401d26 	beq	r23,r5,100025bc <___vfprintf_internal_r+0x110>
10002548:	014000c4 	movi	r5,3
1000254c:	b9402b26 	beq	r23,r5,100025fc <___vfprintf_internal_r+0x150>
10002550:	00011006 	br	10002994 <___vfprintf_internal_r+0x4e8>
10002554:	01400944 	movi	r5,37
10002558:	1140fc26 	beq	r2,r5,1000294c <___vfprintf_internal_r+0x4a0>
1000255c:	88800117 	ldw	r2,4(r17)
10002560:	d9000005 	stb	r4,0(sp)
10002564:	01c00044 	movi	r7,1
10002568:	d80d883a 	mov	r6,sp
1000256c:	880b883a 	mov	r5,r17
10002570:	a009883a 	mov	r4,r20
10002574:	103ee83a 	callr	r2
10002578:	1000d81e 	bne	r2,zero,100028dc <___vfprintf_internal_r+0x430>
1000257c:	84000044 	addi	r16,r16,1
10002580:	00010406 	br	10002994 <___vfprintf_internal_r+0x4e8>
10002584:	01400c04 	movi	r5,48
10002588:	1140fa26 	beq	r2,r5,10002974 <___vfprintf_internal_r+0x4c8>
1000258c:	01400944 	movi	r5,37
10002590:	11400a1e 	bne	r2,r5,100025bc <___vfprintf_internal_r+0x110>
10002594:	d8800005 	stb	r2,0(sp)
10002598:	88800117 	ldw	r2,4(r17)
1000259c:	b80f883a 	mov	r7,r23
100025a0:	d80d883a 	mov	r6,sp
100025a4:	880b883a 	mov	r5,r17
100025a8:	a009883a 	mov	r4,r20
100025ac:	103ee83a 	callr	r2
100025b0:	1000ca1e 	bne	r2,zero,100028dc <___vfprintf_internal_r+0x430>
100025b4:	84000044 	addi	r16,r16,1
100025b8:	0000f506 	br	10002990 <___vfprintf_internal_r+0x4e4>
100025bc:	25fff404 	addi	r23,r4,-48
100025c0:	bdc03fcc 	andi	r23,r23,255
100025c4:	00c00244 	movi	r3,9
100025c8:	1dc00936 	bltu	r3,r23,100025f0 <___vfprintf_internal_r+0x144>
100025cc:	00bfffc4 	movi	r2,-1
100025d0:	90800426 	beq	r18,r2,100025e4 <___vfprintf_internal_r+0x138>
100025d4:	01400284 	movi	r5,10
100025d8:	9009883a 	mov	r4,r18
100025dc:	0002cb80 	call	10002cb8 <__mulsi3>
100025e0:	00000106 	br	100025e8 <___vfprintf_internal_r+0x13c>
100025e4:	0005883a 	mov	r2,zero
100025e8:	b8a5883a 	add	r18,r23,r2
100025ec:	0000e206 	br	10002978 <___vfprintf_internal_r+0x4cc>
100025f0:	01400b84 	movi	r5,46
100025f4:	1140e426 	beq	r2,r5,10002988 <___vfprintf_internal_r+0x4dc>
100025f8:	05c00084 	movi	r23,2
100025fc:	213ff404 	addi	r4,r4,-48
10002600:	27003fcc 	andi	fp,r4,255
10002604:	00c00244 	movi	r3,9
10002608:	1f000936 	bltu	r3,fp,10002630 <___vfprintf_internal_r+0x184>
1000260c:	00bfffc4 	movi	r2,-1
10002610:	98800426 	beq	r19,r2,10002624 <___vfprintf_internal_r+0x178>
10002614:	01400284 	movi	r5,10
10002618:	9809883a 	mov	r4,r19
1000261c:	0002cb80 	call	10002cb8 <__mulsi3>
10002620:	00000106 	br	10002628 <___vfprintf_internal_r+0x17c>
10002624:	0005883a 	mov	r2,zero
10002628:	e0a7883a 	add	r19,fp,r2
1000262c:	0000d906 	br	10002994 <___vfprintf_internal_r+0x4e8>
10002630:	00c01b04 	movi	r3,108
10002634:	10c0d226 	beq	r2,r3,10002980 <___vfprintf_internal_r+0x4d4>
10002638:	013fffc4 	movi	r4,-1
1000263c:	99000226 	beq	r19,r4,10002648 <___vfprintf_internal_r+0x19c>
10002640:	d8000b15 	stw	zero,44(sp)
10002644:	00000106 	br	1000264c <___vfprintf_internal_r+0x1a0>
10002648:	04c00044 	movi	r19,1
1000264c:	01001a44 	movi	r4,105
10002650:	11001626 	beq	r2,r4,100026ac <___vfprintf_internal_r+0x200>
10002654:	20800916 	blt	r4,r2,1000267c <___vfprintf_internal_r+0x1d0>
10002658:	010018c4 	movi	r4,99
1000265c:	11008826 	beq	r2,r4,10002880 <___vfprintf_internal_r+0x3d4>
10002660:	01001904 	movi	r4,100
10002664:	11001126 	beq	r2,r4,100026ac <___vfprintf_internal_r+0x200>
10002668:	01001604 	movi	r4,88
1000266c:	1100c81e 	bne	r2,r4,10002990 <___vfprintf_internal_r+0x4e4>
10002670:	00c00044 	movi	r3,1
10002674:	d8c00e15 	stw	r3,56(sp)
10002678:	00001506 	br	100026d0 <___vfprintf_internal_r+0x224>
1000267c:	01001cc4 	movi	r4,115
10002680:	11009826 	beq	r2,r4,100028e4 <___vfprintf_internal_r+0x438>
10002684:	20800416 	blt	r4,r2,10002698 <___vfprintf_internal_r+0x1ec>
10002688:	01001bc4 	movi	r4,111
1000268c:	1100c01e 	bne	r2,r4,10002990 <___vfprintf_internal_r+0x4e4>
10002690:	05400204 	movi	r21,8
10002694:	00000f06 	br	100026d4 <___vfprintf_internal_r+0x228>
10002698:	01001d44 	movi	r4,117
1000269c:	11000d26 	beq	r2,r4,100026d4 <___vfprintf_internal_r+0x228>
100026a0:	01001e04 	movi	r4,120
100026a4:	11000a26 	beq	r2,r4,100026d0 <___vfprintf_internal_r+0x224>
100026a8:	0000b906 	br	10002990 <___vfprintf_internal_r+0x4e4>
100026ac:	d8c00a17 	ldw	r3,40(sp)
100026b0:	b7000104 	addi	fp,r22,4
100026b4:	18000726 	beq	r3,zero,100026d4 <___vfprintf_internal_r+0x228>
100026b8:	df000d15 	stw	fp,52(sp)
100026bc:	b5c00017 	ldw	r23,0(r22)
100026c0:	b800080e 	bge	r23,zero,100026e4 <___vfprintf_internal_r+0x238>
100026c4:	05efc83a 	sub	r23,zero,r23
100026c8:	02400044 	movi	r9,1
100026cc:	00000606 	br	100026e8 <___vfprintf_internal_r+0x23c>
100026d0:	05400404 	movi	r21,16
100026d4:	b0c00104 	addi	r3,r22,4
100026d8:	d8c00d15 	stw	r3,52(sp)
100026dc:	b5c00017 	ldw	r23,0(r22)
100026e0:	d8000a15 	stw	zero,40(sp)
100026e4:	0013883a 	mov	r9,zero
100026e8:	d839883a 	mov	fp,sp
100026ec:	b8001726 	beq	r23,zero,1000274c <___vfprintf_internal_r+0x2a0>
100026f0:	a80b883a 	mov	r5,r21
100026f4:	b809883a 	mov	r4,r23
100026f8:	da401015 	stw	r9,64(sp)
100026fc:	0002bfc0 	call	10002bfc <__udivsi3>
10002700:	a80b883a 	mov	r5,r21
10002704:	1009883a 	mov	r4,r2
10002708:	102d883a 	mov	r22,r2
1000270c:	0002cb80 	call	10002cb8 <__mulsi3>
10002710:	b885c83a 	sub	r2,r23,r2
10002714:	00c00244 	movi	r3,9
10002718:	da401017 	ldw	r9,64(sp)
1000271c:	18800216 	blt	r3,r2,10002728 <___vfprintf_internal_r+0x27c>
10002720:	10800c04 	addi	r2,r2,48
10002724:	00000506 	br	1000273c <___vfprintf_internal_r+0x290>
10002728:	d8c00e17 	ldw	r3,56(sp)
1000272c:	18000226 	beq	r3,zero,10002738 <___vfprintf_internal_r+0x28c>
10002730:	10800dc4 	addi	r2,r2,55
10002734:	00000106 	br	1000273c <___vfprintf_internal_r+0x290>
10002738:	108015c4 	addi	r2,r2,87
1000273c:	e0800005 	stb	r2,0(fp)
10002740:	b02f883a 	mov	r23,r22
10002744:	e7000044 	addi	fp,fp,1
10002748:	003fe806 	br	100026ec <__alt_data_end+0xf80026ec>
1000274c:	e6efc83a 	sub	r23,fp,sp
10002750:	9dc5c83a 	sub	r2,r19,r23
10002754:	0080090e 	bge	zero,r2,1000277c <___vfprintf_internal_r+0x2d0>
10002758:	e085883a 	add	r2,fp,r2
1000275c:	01400c04 	movi	r5,48
10002760:	d8c00917 	ldw	r3,36(sp)
10002764:	e009883a 	mov	r4,fp
10002768:	e0c0032e 	bgeu	fp,r3,10002778 <___vfprintf_internal_r+0x2cc>
1000276c:	e7000044 	addi	fp,fp,1
10002770:	21400005 	stb	r5,0(r4)
10002774:	e0bffa1e 	bne	fp,r2,10002760 <__alt_data_end+0xf8002760>
10002778:	e6efc83a 	sub	r23,fp,sp
1000277c:	d8c00b17 	ldw	r3,44(sp)
10002780:	4dd1883a 	add	r8,r9,r23
10002784:	922dc83a 	sub	r22,r18,r8
10002788:	18001626 	beq	r3,zero,100027e4 <___vfprintf_internal_r+0x338>
1000278c:	48000a26 	beq	r9,zero,100027b8 <___vfprintf_internal_r+0x30c>
10002790:	00800b44 	movi	r2,45
10002794:	d8800805 	stb	r2,32(sp)
10002798:	88800117 	ldw	r2,4(r17)
1000279c:	01c00044 	movi	r7,1
100027a0:	d9800804 	addi	r6,sp,32
100027a4:	880b883a 	mov	r5,r17
100027a8:	a009883a 	mov	r4,r20
100027ac:	103ee83a 	callr	r2
100027b0:	10004a1e 	bne	r2,zero,100028dc <___vfprintf_internal_r+0x430>
100027b4:	84000044 	addi	r16,r16,1
100027b8:	0580070e 	bge	zero,r22,100027d8 <___vfprintf_internal_r+0x32c>
100027bc:	b00f883a 	mov	r7,r22
100027c0:	01800c04 	movi	r6,48
100027c4:	880b883a 	mov	r5,r17
100027c8:	a009883a 	mov	r4,r20
100027cc:	00024400 	call	10002440 <print_repeat>
100027d0:	1000421e 	bne	r2,zero,100028dc <___vfprintf_internal_r+0x430>
100027d4:	85a1883a 	add	r16,r16,r22
100027d8:	e02d883a 	mov	r22,fp
100027dc:	bf2fc83a 	sub	r23,r23,fp
100027e0:	00002006 	br	10002864 <___vfprintf_internal_r+0x3b8>
100027e4:	0580090e 	bge	zero,r22,1000280c <___vfprintf_internal_r+0x360>
100027e8:	b00f883a 	mov	r7,r22
100027ec:	01800804 	movi	r6,32
100027f0:	880b883a 	mov	r5,r17
100027f4:	a009883a 	mov	r4,r20
100027f8:	da401015 	stw	r9,64(sp)
100027fc:	00024400 	call	10002440 <print_repeat>
10002800:	da401017 	ldw	r9,64(sp)
10002804:	1000351e 	bne	r2,zero,100028dc <___vfprintf_internal_r+0x430>
10002808:	85a1883a 	add	r16,r16,r22
1000280c:	483ff226 	beq	r9,zero,100027d8 <__alt_data_end+0xf80027d8>
10002810:	00800b44 	movi	r2,45
10002814:	d8800805 	stb	r2,32(sp)
10002818:	88800117 	ldw	r2,4(r17)
1000281c:	01c00044 	movi	r7,1
10002820:	d9800804 	addi	r6,sp,32
10002824:	880b883a 	mov	r5,r17
10002828:	a009883a 	mov	r4,r20
1000282c:	103ee83a 	callr	r2
10002830:	10002a1e 	bne	r2,zero,100028dc <___vfprintf_internal_r+0x430>
10002834:	84000044 	addi	r16,r16,1
10002838:	003fe706 	br	100027d8 <__alt_data_end+0xf80027d8>
1000283c:	b5bfffc4 	addi	r22,r22,-1
10002840:	b0800003 	ldbu	r2,0(r22)
10002844:	01c00044 	movi	r7,1
10002848:	d9800804 	addi	r6,sp,32
1000284c:	d8800805 	stb	r2,32(sp)
10002850:	88800117 	ldw	r2,4(r17)
10002854:	880b883a 	mov	r5,r17
10002858:	a009883a 	mov	r4,r20
1000285c:	103ee83a 	callr	r2
10002860:	10001e1e 	bne	r2,zero,100028dc <___vfprintf_internal_r+0x430>
10002864:	8585c83a 	sub	r2,r16,r22
10002868:	b5c9883a 	add	r4,r22,r23
1000286c:	e085883a 	add	r2,fp,r2
10002870:	013ff216 	blt	zero,r4,1000283c <__alt_data_end+0xf800283c>
10002874:	1021883a 	mov	r16,r2
10002878:	dd800d17 	ldw	r22,52(sp)
1000287c:	00004406 	br	10002990 <___vfprintf_internal_r+0x4e4>
10002880:	00800044 	movi	r2,1
10002884:	1480080e 	bge	r2,r18,100028a8 <___vfprintf_internal_r+0x3fc>
10002888:	95ffffc4 	addi	r23,r18,-1
1000288c:	b80f883a 	mov	r7,r23
10002890:	01800804 	movi	r6,32
10002894:	880b883a 	mov	r5,r17
10002898:	a009883a 	mov	r4,r20
1000289c:	00024400 	call	10002440 <print_repeat>
100028a0:	10000e1e 	bne	r2,zero,100028dc <___vfprintf_internal_r+0x430>
100028a4:	85e1883a 	add	r16,r16,r23
100028a8:	b0800017 	ldw	r2,0(r22)
100028ac:	01c00044 	movi	r7,1
100028b0:	d80d883a 	mov	r6,sp
100028b4:	d8800005 	stb	r2,0(sp)
100028b8:	88800117 	ldw	r2,4(r17)
100028bc:	880b883a 	mov	r5,r17
100028c0:	a009883a 	mov	r4,r20
100028c4:	b5c00104 	addi	r23,r22,4
100028c8:	103ee83a 	callr	r2
100028cc:	1000031e 	bne	r2,zero,100028dc <___vfprintf_internal_r+0x430>
100028d0:	84000044 	addi	r16,r16,1
100028d4:	b82d883a 	mov	r22,r23
100028d8:	00002d06 	br	10002990 <___vfprintf_internal_r+0x4e4>
100028dc:	00bfffc4 	movi	r2,-1
100028e0:	00003106 	br	100029a8 <___vfprintf_internal_r+0x4fc>
100028e4:	b5c00017 	ldw	r23,0(r22)
100028e8:	b7000104 	addi	fp,r22,4
100028ec:	b809883a 	mov	r4,r23
100028f0:	00024240 	call	10002424 <strlen>
100028f4:	9091c83a 	sub	r8,r18,r2
100028f8:	102d883a 	mov	r22,r2
100028fc:	0200090e 	bge	zero,r8,10002924 <___vfprintf_internal_r+0x478>
10002900:	400f883a 	mov	r7,r8
10002904:	01800804 	movi	r6,32
10002908:	880b883a 	mov	r5,r17
1000290c:	a009883a 	mov	r4,r20
10002910:	da001015 	stw	r8,64(sp)
10002914:	00024400 	call	10002440 <print_repeat>
10002918:	da001017 	ldw	r8,64(sp)
1000291c:	103fef1e 	bne	r2,zero,100028dc <__alt_data_end+0xf80028dc>
10002920:	8221883a 	add	r16,r16,r8
10002924:	88800117 	ldw	r2,4(r17)
10002928:	b00f883a 	mov	r7,r22
1000292c:	b80d883a 	mov	r6,r23
10002930:	880b883a 	mov	r5,r17
10002934:	a009883a 	mov	r4,r20
10002938:	103ee83a 	callr	r2
1000293c:	103fe71e 	bne	r2,zero,100028dc <__alt_data_end+0xf80028dc>
10002940:	85a1883a 	add	r16,r16,r22
10002944:	e02d883a 	mov	r22,fp
10002948:	00001106 	br	10002990 <___vfprintf_internal_r+0x4e4>
1000294c:	00c00044 	movi	r3,1
10002950:	04ffffc4 	movi	r19,-1
10002954:	d8000e15 	stw	zero,56(sp)
10002958:	d8c00a15 	stw	r3,40(sp)
1000295c:	05400284 	movi	r21,10
10002960:	9825883a 	mov	r18,r19
10002964:	d8000c15 	stw	zero,48(sp)
10002968:	d8000b15 	stw	zero,44(sp)
1000296c:	182f883a 	mov	r23,r3
10002970:	00000806 	br	10002994 <___vfprintf_internal_r+0x4e8>
10002974:	ddc00b15 	stw	r23,44(sp)
10002978:	05c00084 	movi	r23,2
1000297c:	00000506 	br	10002994 <___vfprintf_internal_r+0x4e8>
10002980:	00c00044 	movi	r3,1
10002984:	d8c00c15 	stw	r3,48(sp)
10002988:	05c000c4 	movi	r23,3
1000298c:	00000106 	br	10002994 <___vfprintf_internal_r+0x4e8>
10002990:	002f883a 	mov	r23,zero
10002994:	d8c00f17 	ldw	r3,60(sp)
10002998:	18c00044 	addi	r3,r3,1
1000299c:	d8c00f15 	stw	r3,60(sp)
100029a0:	003edc06 	br	10002514 <__alt_data_end+0xf8002514>
100029a4:	8005883a 	mov	r2,r16
100029a8:	dfc01a17 	ldw	ra,104(sp)
100029ac:	df001917 	ldw	fp,100(sp)
100029b0:	ddc01817 	ldw	r23,96(sp)
100029b4:	dd801717 	ldw	r22,92(sp)
100029b8:	dd401617 	ldw	r21,88(sp)
100029bc:	dd001517 	ldw	r20,84(sp)
100029c0:	dcc01417 	ldw	r19,80(sp)
100029c4:	dc801317 	ldw	r18,76(sp)
100029c8:	dc401217 	ldw	r17,72(sp)
100029cc:	dc001117 	ldw	r16,68(sp)
100029d0:	dec01b04 	addi	sp,sp,108
100029d4:	f800283a 	ret

100029d8 <__vfprintf_internal>:
100029d8:	00840034 	movhi	r2,4096
100029dc:	109aa904 	addi	r2,r2,27300
100029e0:	300f883a 	mov	r7,r6
100029e4:	280d883a 	mov	r6,r5
100029e8:	200b883a 	mov	r5,r4
100029ec:	11000017 	ldw	r4,0(r2)
100029f0:	00024ac1 	jmpi	100024ac <___vfprintf_internal_r>

100029f4 <__sfvwrite_small_dev>:
100029f4:	2880000b 	ldhu	r2,0(r5)
100029f8:	1080020c 	andi	r2,r2,8
100029fc:	10002126 	beq	r2,zero,10002a84 <__sfvwrite_small_dev+0x90>
10002a00:	2880008f 	ldh	r2,2(r5)
10002a04:	defffa04 	addi	sp,sp,-24
10002a08:	dc000015 	stw	r16,0(sp)
10002a0c:	dfc00515 	stw	ra,20(sp)
10002a10:	dd000415 	stw	r20,16(sp)
10002a14:	dcc00315 	stw	r19,12(sp)
10002a18:	dc800215 	stw	r18,8(sp)
10002a1c:	dc400115 	stw	r17,4(sp)
10002a20:	2821883a 	mov	r16,r5
10002a24:	10001216 	blt	r2,zero,10002a70 <__sfvwrite_small_dev+0x7c>
10002a28:	2027883a 	mov	r19,r4
10002a2c:	3025883a 	mov	r18,r6
10002a30:	3823883a 	mov	r17,r7
10002a34:	05010004 	movi	r20,1024
10002a38:	04400b0e 	bge	zero,r17,10002a68 <__sfvwrite_small_dev+0x74>
10002a3c:	880f883a 	mov	r7,r17
10002a40:	a440010e 	bge	r20,r17,10002a48 <__sfvwrite_small_dev+0x54>
10002a44:	01c10004 	movi	r7,1024
10002a48:	8140008f 	ldh	r5,2(r16)
10002a4c:	900d883a 	mov	r6,r18
10002a50:	9809883a 	mov	r4,r19
10002a54:	0002aac0 	call	10002aac <_write_r>
10002a58:	0080050e 	bge	zero,r2,10002a70 <__sfvwrite_small_dev+0x7c>
10002a5c:	88a3c83a 	sub	r17,r17,r2
10002a60:	90a5883a 	add	r18,r18,r2
10002a64:	003ff406 	br	10002a38 <__alt_data_end+0xf8002a38>
10002a68:	0005883a 	mov	r2,zero
10002a6c:	00000706 	br	10002a8c <__sfvwrite_small_dev+0x98>
10002a70:	8080000b 	ldhu	r2,0(r16)
10002a74:	10801014 	ori	r2,r2,64
10002a78:	8080000d 	sth	r2,0(r16)
10002a7c:	00bfffc4 	movi	r2,-1
10002a80:	00000206 	br	10002a8c <__sfvwrite_small_dev+0x98>
10002a84:	00bfffc4 	movi	r2,-1
10002a88:	f800283a 	ret
10002a8c:	dfc00517 	ldw	ra,20(sp)
10002a90:	dd000417 	ldw	r20,16(sp)
10002a94:	dcc00317 	ldw	r19,12(sp)
10002a98:	dc800217 	ldw	r18,8(sp)
10002a9c:	dc400117 	ldw	r17,4(sp)
10002aa0:	dc000017 	ldw	r16,0(sp)
10002aa4:	dec00604 	addi	sp,sp,24
10002aa8:	f800283a 	ret

10002aac <_write_r>:
10002aac:	defffd04 	addi	sp,sp,-12
10002ab0:	dc000015 	stw	r16,0(sp)
10002ab4:	04040034 	movhi	r16,4096
10002ab8:	dc400115 	stw	r17,4(sp)
10002abc:	841f7904 	addi	r16,r16,32228
10002ac0:	2023883a 	mov	r17,r4
10002ac4:	2809883a 	mov	r4,r5
10002ac8:	300b883a 	mov	r5,r6
10002acc:	380d883a 	mov	r6,r7
10002ad0:	dfc00215 	stw	ra,8(sp)
10002ad4:	80000015 	stw	zero,0(r16)
10002ad8:	0002eb40 	call	10002eb4 <write>
10002adc:	00ffffc4 	movi	r3,-1
10002ae0:	10c0031e 	bne	r2,r3,10002af0 <_write_r+0x44>
10002ae4:	80c00017 	ldw	r3,0(r16)
10002ae8:	18000126 	beq	r3,zero,10002af0 <_write_r+0x44>
10002aec:	88c00015 	stw	r3,0(r17)
10002af0:	dfc00217 	ldw	ra,8(sp)
10002af4:	dc400117 	ldw	r17,4(sp)
10002af8:	dc000017 	ldw	r16,0(sp)
10002afc:	dec00304 	addi	sp,sp,12
10002b00:	f800283a 	ret

10002b04 <__divsi3>:
10002b04:	20001b16 	blt	r4,zero,10002b74 <__divsi3+0x70>
10002b08:	000f883a 	mov	r7,zero
10002b0c:	28001616 	blt	r5,zero,10002b68 <__divsi3+0x64>
10002b10:	200d883a 	mov	r6,r4
10002b14:	29001a2e 	bgeu	r5,r4,10002b80 <__divsi3+0x7c>
10002b18:	00800804 	movi	r2,32
10002b1c:	00c00044 	movi	r3,1
10002b20:	00000106 	br	10002b28 <__divsi3+0x24>
10002b24:	10000d26 	beq	r2,zero,10002b5c <__divsi3+0x58>
10002b28:	294b883a 	add	r5,r5,r5
10002b2c:	10bfffc4 	addi	r2,r2,-1
10002b30:	18c7883a 	add	r3,r3,r3
10002b34:	293ffb36 	bltu	r5,r4,10002b24 <__alt_data_end+0xf8002b24>
10002b38:	0005883a 	mov	r2,zero
10002b3c:	18000726 	beq	r3,zero,10002b5c <__divsi3+0x58>
10002b40:	0005883a 	mov	r2,zero
10002b44:	31400236 	bltu	r6,r5,10002b50 <__divsi3+0x4c>
10002b48:	314dc83a 	sub	r6,r6,r5
10002b4c:	10c4b03a 	or	r2,r2,r3
10002b50:	1806d07a 	srli	r3,r3,1
10002b54:	280ad07a 	srli	r5,r5,1
10002b58:	183ffa1e 	bne	r3,zero,10002b44 <__alt_data_end+0xf8002b44>
10002b5c:	38000126 	beq	r7,zero,10002b64 <__divsi3+0x60>
10002b60:	0085c83a 	sub	r2,zero,r2
10002b64:	f800283a 	ret
10002b68:	014bc83a 	sub	r5,zero,r5
10002b6c:	39c0005c 	xori	r7,r7,1
10002b70:	003fe706 	br	10002b10 <__alt_data_end+0xf8002b10>
10002b74:	0109c83a 	sub	r4,zero,r4
10002b78:	01c00044 	movi	r7,1
10002b7c:	003fe306 	br	10002b0c <__alt_data_end+0xf8002b0c>
10002b80:	00c00044 	movi	r3,1
10002b84:	003fee06 	br	10002b40 <__alt_data_end+0xf8002b40>

10002b88 <__modsi3>:
10002b88:	20001716 	blt	r4,zero,10002be8 <__modsi3+0x60>
10002b8c:	000f883a 	mov	r7,zero
10002b90:	2005883a 	mov	r2,r4
10002b94:	28001216 	blt	r5,zero,10002be0 <__modsi3+0x58>
10002b98:	2900162e 	bgeu	r5,r4,10002bf4 <__modsi3+0x6c>
10002b9c:	01800804 	movi	r6,32
10002ba0:	00c00044 	movi	r3,1
10002ba4:	00000106 	br	10002bac <__modsi3+0x24>
10002ba8:	30000a26 	beq	r6,zero,10002bd4 <__modsi3+0x4c>
10002bac:	294b883a 	add	r5,r5,r5
10002bb0:	31bfffc4 	addi	r6,r6,-1
10002bb4:	18c7883a 	add	r3,r3,r3
10002bb8:	293ffb36 	bltu	r5,r4,10002ba8 <__alt_data_end+0xf8002ba8>
10002bbc:	18000526 	beq	r3,zero,10002bd4 <__modsi3+0x4c>
10002bc0:	1806d07a 	srli	r3,r3,1
10002bc4:	11400136 	bltu	r2,r5,10002bcc <__modsi3+0x44>
10002bc8:	1145c83a 	sub	r2,r2,r5
10002bcc:	280ad07a 	srli	r5,r5,1
10002bd0:	183ffb1e 	bne	r3,zero,10002bc0 <__alt_data_end+0xf8002bc0>
10002bd4:	38000126 	beq	r7,zero,10002bdc <__modsi3+0x54>
10002bd8:	0085c83a 	sub	r2,zero,r2
10002bdc:	f800283a 	ret
10002be0:	014bc83a 	sub	r5,zero,r5
10002be4:	003fec06 	br	10002b98 <__alt_data_end+0xf8002b98>
10002be8:	0109c83a 	sub	r4,zero,r4
10002bec:	01c00044 	movi	r7,1
10002bf0:	003fe706 	br	10002b90 <__alt_data_end+0xf8002b90>
10002bf4:	00c00044 	movi	r3,1
10002bf8:	003ff106 	br	10002bc0 <__alt_data_end+0xf8002bc0>

10002bfc <__udivsi3>:
10002bfc:	200d883a 	mov	r6,r4
10002c00:	2900152e 	bgeu	r5,r4,10002c58 <__udivsi3+0x5c>
10002c04:	28001416 	blt	r5,zero,10002c58 <__udivsi3+0x5c>
10002c08:	00800804 	movi	r2,32
10002c0c:	00c00044 	movi	r3,1
10002c10:	00000206 	br	10002c1c <__udivsi3+0x20>
10002c14:	10000e26 	beq	r2,zero,10002c50 <__udivsi3+0x54>
10002c18:	28000516 	blt	r5,zero,10002c30 <__udivsi3+0x34>
10002c1c:	294b883a 	add	r5,r5,r5
10002c20:	10bfffc4 	addi	r2,r2,-1
10002c24:	18c7883a 	add	r3,r3,r3
10002c28:	293ffa36 	bltu	r5,r4,10002c14 <__alt_data_end+0xf8002c14>
10002c2c:	18000826 	beq	r3,zero,10002c50 <__udivsi3+0x54>
10002c30:	0005883a 	mov	r2,zero
10002c34:	31400236 	bltu	r6,r5,10002c40 <__udivsi3+0x44>
10002c38:	314dc83a 	sub	r6,r6,r5
10002c3c:	10c4b03a 	or	r2,r2,r3
10002c40:	1806d07a 	srli	r3,r3,1
10002c44:	280ad07a 	srli	r5,r5,1
10002c48:	183ffa1e 	bne	r3,zero,10002c34 <__alt_data_end+0xf8002c34>
10002c4c:	f800283a 	ret
10002c50:	0005883a 	mov	r2,zero
10002c54:	f800283a 	ret
10002c58:	00c00044 	movi	r3,1
10002c5c:	003ff406 	br	10002c30 <__alt_data_end+0xf8002c30>

10002c60 <__umodsi3>:
10002c60:	2005883a 	mov	r2,r4
10002c64:	2900122e 	bgeu	r5,r4,10002cb0 <__umodsi3+0x50>
10002c68:	28001116 	blt	r5,zero,10002cb0 <__umodsi3+0x50>
10002c6c:	01800804 	movi	r6,32
10002c70:	00c00044 	movi	r3,1
10002c74:	00000206 	br	10002c80 <__umodsi3+0x20>
10002c78:	30000c26 	beq	r6,zero,10002cac <__umodsi3+0x4c>
10002c7c:	28000516 	blt	r5,zero,10002c94 <__umodsi3+0x34>
10002c80:	294b883a 	add	r5,r5,r5
10002c84:	31bfffc4 	addi	r6,r6,-1
10002c88:	18c7883a 	add	r3,r3,r3
10002c8c:	293ffa36 	bltu	r5,r4,10002c78 <__alt_data_end+0xf8002c78>
10002c90:	18000626 	beq	r3,zero,10002cac <__umodsi3+0x4c>
10002c94:	1806d07a 	srli	r3,r3,1
10002c98:	11400136 	bltu	r2,r5,10002ca0 <__umodsi3+0x40>
10002c9c:	1145c83a 	sub	r2,r2,r5
10002ca0:	280ad07a 	srli	r5,r5,1
10002ca4:	183ffb1e 	bne	r3,zero,10002c94 <__alt_data_end+0xf8002c94>
10002ca8:	f800283a 	ret
10002cac:	f800283a 	ret
10002cb0:	00c00044 	movi	r3,1
10002cb4:	003ff706 	br	10002c94 <__alt_data_end+0xf8002c94>

10002cb8 <__mulsi3>:
10002cb8:	0005883a 	mov	r2,zero
10002cbc:	20000726 	beq	r4,zero,10002cdc <__mulsi3+0x24>
10002cc0:	20c0004c 	andi	r3,r4,1
10002cc4:	2008d07a 	srli	r4,r4,1
10002cc8:	18000126 	beq	r3,zero,10002cd0 <__mulsi3+0x18>
10002ccc:	1145883a 	add	r2,r2,r5
10002cd0:	294b883a 	add	r5,r5,r5
10002cd4:	203ffa1e 	bne	r4,zero,10002cc0 <__alt_data_end+0xf8002cc0>
10002cd8:	f800283a 	ret
10002cdc:	f800283a 	ret

10002ce0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
10002ce0:	defffc04 	addi	sp,sp,-16
10002ce4:	df000315 	stw	fp,12(sp)
10002ce8:	df000304 	addi	fp,sp,12
10002cec:	e13ffd15 	stw	r4,-12(fp)
10002cf0:	e17ffe15 	stw	r5,-8(fp)
10002cf4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
10002cf8:	e0fffe17 	ldw	r3,-8(fp)
10002cfc:	e0bffd17 	ldw	r2,-12(fp)
10002d00:	18800c26 	beq	r3,r2,10002d34 <alt_load_section+0x54>
  {
    while( to != end )
10002d04:	00000806 	br	10002d28 <alt_load_section+0x48>
    {
      *to++ = *from++;
10002d08:	e0bffe17 	ldw	r2,-8(fp)
10002d0c:	10c00104 	addi	r3,r2,4
10002d10:	e0fffe15 	stw	r3,-8(fp)
10002d14:	e0fffd17 	ldw	r3,-12(fp)
10002d18:	19000104 	addi	r4,r3,4
10002d1c:	e13ffd15 	stw	r4,-12(fp)
10002d20:	18c00017 	ldw	r3,0(r3)
10002d24:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
10002d28:	e0fffe17 	ldw	r3,-8(fp)
10002d2c:	e0bfff17 	ldw	r2,-4(fp)
10002d30:	18bff51e 	bne	r3,r2,10002d08 <__alt_data_end+0xf8002d08>
    {
      *to++ = *from++;
    }
  }
}
10002d34:	0001883a 	nop
10002d38:	e037883a 	mov	sp,fp
10002d3c:	df000017 	ldw	fp,0(sp)
10002d40:	dec00104 	addi	sp,sp,4
10002d44:	f800283a 	ret

10002d48 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
10002d48:	defffe04 	addi	sp,sp,-8
10002d4c:	dfc00115 	stw	ra,4(sp)
10002d50:	df000015 	stw	fp,0(sp)
10002d54:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
10002d58:	01840034 	movhi	r6,4096
10002d5c:	319ab304 	addi	r6,r6,27340
10002d60:	01440034 	movhi	r5,4096
10002d64:	2955ee04 	addi	r5,r5,22456
10002d68:	01040034 	movhi	r4,4096
10002d6c:	211ab304 	addi	r4,r4,27340
10002d70:	0002ce00 	call	10002ce0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
10002d74:	01840034 	movhi	r6,4096
10002d78:	31808c04 	addi	r6,r6,560
10002d7c:	01440034 	movhi	r5,4096
10002d80:	29400804 	addi	r5,r5,32
10002d84:	01040034 	movhi	r4,4096
10002d88:	21000804 	addi	r4,r4,32
10002d8c:	0002ce00 	call	10002ce0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
10002d90:	01840034 	movhi	r6,4096
10002d94:	3195ee04 	addi	r6,r6,22456
10002d98:	01440034 	movhi	r5,4096
10002d9c:	2953fa04 	addi	r5,r5,20456
10002da0:	01040034 	movhi	r4,4096
10002da4:	2113fa04 	addi	r4,r4,20456
10002da8:	0002ce00 	call	10002ce0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
10002dac:	0003e6c0 	call	10003e6c <alt_dcache_flush_all>
  alt_icache_flush_all();
10002db0:	00040580 	call	10004058 <alt_icache_flush_all>
}
10002db4:	0001883a 	nop
10002db8:	e037883a 	mov	sp,fp
10002dbc:	dfc00117 	ldw	ra,4(sp)
10002dc0:	df000017 	ldw	fp,0(sp)
10002dc4:	dec00204 	addi	sp,sp,8
10002dc8:	f800283a 	ret

10002dcc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
10002dcc:	defffd04 	addi	sp,sp,-12
10002dd0:	dfc00215 	stw	ra,8(sp)
10002dd4:	df000115 	stw	fp,4(sp)
10002dd8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
10002ddc:	0009883a 	mov	r4,zero
10002de0:	0002fe80 	call	10002fe8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
10002de4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
10002de8:	00030200 	call	10003020 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
10002dec:	01840034 	movhi	r6,4096
10002df0:	3195e104 	addi	r6,r6,22404
10002df4:	01440034 	movhi	r5,4096
10002df8:	2955e104 	addi	r5,r5,22404
10002dfc:	01040034 	movhi	r4,4096
10002e00:	2115e104 	addi	r4,r4,22404
10002e04:	00043fc0 	call	100043fc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
10002e08:	0003f980 	call	10003f98 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
10002e0c:	01040034 	movhi	r4,4096
10002e10:	210ffe04 	addi	r4,r4,16376
10002e14:	0004c400 	call	10004c40 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
10002e18:	d0a4d217 	ldw	r2,-27832(gp)
10002e1c:	d0e4d317 	ldw	r3,-27828(gp)
10002e20:	d124d417 	ldw	r4,-27824(gp)
10002e24:	200d883a 	mov	r6,r4
10002e28:	180b883a 	mov	r5,r3
10002e2c:	1009883a 	mov	r4,r2
10002e30:	00003cc0 	call	100003cc <main>
10002e34:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
10002e38:	01000044 	movi	r4,1
10002e3c:	0003d940 	call	10003d94 <close>
  exit (result);
10002e40:	e13fff17 	ldw	r4,-4(fp)
10002e44:	0004c540 	call	10004c54 <exit>

10002e48 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
10002e48:	defffd04 	addi	sp,sp,-12
10002e4c:	dfc00215 	stw	ra,8(sp)
10002e50:	df000115 	stw	fp,4(sp)
10002e54:	df000104 	addi	fp,sp,4
10002e58:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
10002e5c:	e13fff17 	ldw	r4,-4(fp)
10002e60:	0003c000 	call	10003c00 <alt_busy_sleep>
}
10002e64:	e037883a 	mov	sp,fp
10002e68:	dfc00117 	ldw	ra,4(sp)
10002e6c:	df000017 	ldw	fp,0(sp)
10002e70:	dec00204 	addi	sp,sp,8
10002e74:	f800283a 	ret

10002e78 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10002e78:	defffe04 	addi	sp,sp,-8
10002e7c:	dfc00115 	stw	ra,4(sp)
10002e80:	df000015 	stw	fp,0(sp)
10002e84:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10002e88:	d0a00717 	ldw	r2,-32740(gp)
10002e8c:	10000326 	beq	r2,zero,10002e9c <alt_get_errno+0x24>
10002e90:	d0a00717 	ldw	r2,-32740(gp)
10002e94:	103ee83a 	callr	r2
10002e98:	00000106 	br	10002ea0 <alt_get_errno+0x28>
10002e9c:	d0a4d104 	addi	r2,gp,-27836
}
10002ea0:	e037883a 	mov	sp,fp
10002ea4:	dfc00117 	ldw	ra,4(sp)
10002ea8:	df000017 	ldw	fp,0(sp)
10002eac:	dec00204 	addi	sp,sp,8
10002eb0:	f800283a 	ret

10002eb4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
10002eb4:	defff904 	addi	sp,sp,-28
10002eb8:	dfc00615 	stw	ra,24(sp)
10002ebc:	df000515 	stw	fp,20(sp)
10002ec0:	df000504 	addi	fp,sp,20
10002ec4:	e13ffd15 	stw	r4,-12(fp)
10002ec8:	e17ffe15 	stw	r5,-8(fp)
10002ecc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
10002ed0:	e0bffd17 	ldw	r2,-12(fp)
10002ed4:	10000816 	blt	r2,zero,10002ef8 <write+0x44>
10002ed8:	01400304 	movi	r5,12
10002edc:	e13ffd17 	ldw	r4,-12(fp)
10002ee0:	0002cb80 	call	10002cb8 <__mulsi3>
10002ee4:	1007883a 	mov	r3,r2
10002ee8:	00840034 	movhi	r2,4096
10002eec:	109a4804 	addi	r2,r2,26912
10002ef0:	1885883a 	add	r2,r3,r2
10002ef4:	00000106 	br	10002efc <write+0x48>
10002ef8:	0005883a 	mov	r2,zero
10002efc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
10002f00:	e0bffb17 	ldw	r2,-20(fp)
10002f04:	10002126 	beq	r2,zero,10002f8c <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
10002f08:	e0bffb17 	ldw	r2,-20(fp)
10002f0c:	10800217 	ldw	r2,8(r2)
10002f10:	108000cc 	andi	r2,r2,3
10002f14:	10001826 	beq	r2,zero,10002f78 <write+0xc4>
10002f18:	e0bffb17 	ldw	r2,-20(fp)
10002f1c:	10800017 	ldw	r2,0(r2)
10002f20:	10800617 	ldw	r2,24(r2)
10002f24:	10001426 	beq	r2,zero,10002f78 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
10002f28:	e0bffb17 	ldw	r2,-20(fp)
10002f2c:	10800017 	ldw	r2,0(r2)
10002f30:	10800617 	ldw	r2,24(r2)
10002f34:	e0ffff17 	ldw	r3,-4(fp)
10002f38:	180d883a 	mov	r6,r3
10002f3c:	e17ffe17 	ldw	r5,-8(fp)
10002f40:	e13ffb17 	ldw	r4,-20(fp)
10002f44:	103ee83a 	callr	r2
10002f48:	e0bffc15 	stw	r2,-16(fp)
10002f4c:	e0bffc17 	ldw	r2,-16(fp)
10002f50:	1000070e 	bge	r2,zero,10002f70 <write+0xbc>
      {
        ALT_ERRNO = -rval;
10002f54:	0002e780 	call	10002e78 <alt_get_errno>
10002f58:	1007883a 	mov	r3,r2
10002f5c:	e0bffc17 	ldw	r2,-16(fp)
10002f60:	0085c83a 	sub	r2,zero,r2
10002f64:	18800015 	stw	r2,0(r3)
        return -1;
10002f68:	00bfffc4 	movi	r2,-1
10002f6c:	00000c06 	br	10002fa0 <write+0xec>
      }
      return rval;
10002f70:	e0bffc17 	ldw	r2,-16(fp)
10002f74:	00000a06 	br	10002fa0 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
10002f78:	0002e780 	call	10002e78 <alt_get_errno>
10002f7c:	1007883a 	mov	r3,r2
10002f80:	00800344 	movi	r2,13
10002f84:	18800015 	stw	r2,0(r3)
10002f88:	00000406 	br	10002f9c <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
10002f8c:	0002e780 	call	10002e78 <alt_get_errno>
10002f90:	1007883a 	mov	r3,r2
10002f94:	00801444 	movi	r2,81
10002f98:	18800015 	stw	r2,0(r3)
  }
  return -1;
10002f9c:	00bfffc4 	movi	r2,-1
}
10002fa0:	e037883a 	mov	sp,fp
10002fa4:	dfc00117 	ldw	ra,4(sp)
10002fa8:	df000017 	ldw	fp,0(sp)
10002fac:	dec00204 	addi	sp,sp,8
10002fb0:	f800283a 	ret

10002fb4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
10002fb4:	defffd04 	addi	sp,sp,-12
10002fb8:	dfc00215 	stw	ra,8(sp)
10002fbc:	df000115 	stw	fp,4(sp)
10002fc0:	df000104 	addi	fp,sp,4
10002fc4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
10002fc8:	d1600404 	addi	r5,gp,-32752
10002fcc:	e13fff17 	ldw	r4,-4(fp)
10002fd0:	0003ef40 	call	10003ef4 <alt_dev_llist_insert>
}
10002fd4:	e037883a 	mov	sp,fp
10002fd8:	dfc00117 	ldw	ra,4(sp)
10002fdc:	df000017 	ldw	fp,0(sp)
10002fe0:	dec00204 	addi	sp,sp,8
10002fe4:	f800283a 	ret

10002fe8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
10002fe8:	defffd04 	addi	sp,sp,-12
10002fec:	dfc00215 	stw	ra,8(sp)
10002ff0:	df000115 	stw	fp,4(sp)
10002ff4:	df000104 	addi	fp,sp,4
10002ff8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
10002ffc:	00049240 	call	10004924 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
10003000:	00800044 	movi	r2,1
10003004:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
10003008:	0001883a 	nop
1000300c:	e037883a 	mov	sp,fp
10003010:	dfc00117 	ldw	ra,4(sp)
10003014:	df000017 	ldw	fp,0(sp)
10003018:	dec00204 	addi	sp,sp,8
1000301c:	f800283a 	ret

10003020 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
10003020:	defffe04 	addi	sp,sp,-8
10003024:	dfc00115 	stw	ra,4(sp)
10003028:	df000015 	stw	fp,0(sp)
1000302c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
10003030:	01800144 	movi	r6,5
10003034:	000b883a 	mov	r5,zero
10003038:	01040034 	movhi	r4,4096
1000303c:	21163004 	addi	r4,r4,22720
10003040:	00031d00 	call	100031d0 <altera_avalon_jtag_uart_init>
10003044:	01040034 	movhi	r4,4096
10003048:	21162604 	addi	r4,r4,22680
1000304c:	0002fb40 	call	10002fb4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
10003050:	0001883a 	nop
}
10003054:	0001883a 	nop
10003058:	e037883a 	mov	sp,fp
1000305c:	dfc00117 	ldw	ra,4(sp)
10003060:	df000017 	ldw	fp,0(sp)
10003064:	dec00204 	addi	sp,sp,8
10003068:	f800283a 	ret

1000306c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
1000306c:	defffa04 	addi	sp,sp,-24
10003070:	dfc00515 	stw	ra,20(sp)
10003074:	df000415 	stw	fp,16(sp)
10003078:	df000404 	addi	fp,sp,16
1000307c:	e13ffd15 	stw	r4,-12(fp)
10003080:	e17ffe15 	stw	r5,-8(fp)
10003084:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10003088:	e0bffd17 	ldw	r2,-12(fp)
1000308c:	10800017 	ldw	r2,0(r2)
10003090:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
10003094:	e0bffc17 	ldw	r2,-16(fp)
10003098:	10c00a04 	addi	r3,r2,40
1000309c:	e0bffd17 	ldw	r2,-12(fp)
100030a0:	10800217 	ldw	r2,8(r2)
100030a4:	100f883a 	mov	r7,r2
100030a8:	e1bfff17 	ldw	r6,-4(fp)
100030ac:	e17ffe17 	ldw	r5,-8(fp)
100030b0:	1809883a 	mov	r4,r3
100030b4:	00036940 	call	10003694 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
100030b8:	e037883a 	mov	sp,fp
100030bc:	dfc00117 	ldw	ra,4(sp)
100030c0:	df000017 	ldw	fp,0(sp)
100030c4:	dec00204 	addi	sp,sp,8
100030c8:	f800283a 	ret

100030cc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
100030cc:	defffa04 	addi	sp,sp,-24
100030d0:	dfc00515 	stw	ra,20(sp)
100030d4:	df000415 	stw	fp,16(sp)
100030d8:	df000404 	addi	fp,sp,16
100030dc:	e13ffd15 	stw	r4,-12(fp)
100030e0:	e17ffe15 	stw	r5,-8(fp)
100030e4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
100030e8:	e0bffd17 	ldw	r2,-12(fp)
100030ec:	10800017 	ldw	r2,0(r2)
100030f0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
100030f4:	e0bffc17 	ldw	r2,-16(fp)
100030f8:	10c00a04 	addi	r3,r2,40
100030fc:	e0bffd17 	ldw	r2,-12(fp)
10003100:	10800217 	ldw	r2,8(r2)
10003104:	100f883a 	mov	r7,r2
10003108:	e1bfff17 	ldw	r6,-4(fp)
1000310c:	e17ffe17 	ldw	r5,-8(fp)
10003110:	1809883a 	mov	r4,r3
10003114:	00038b00 	call	100038b0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
10003118:	e037883a 	mov	sp,fp
1000311c:	dfc00117 	ldw	ra,4(sp)
10003120:	df000017 	ldw	fp,0(sp)
10003124:	dec00204 	addi	sp,sp,8
10003128:	f800283a 	ret

1000312c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
1000312c:	defffc04 	addi	sp,sp,-16
10003130:	dfc00315 	stw	ra,12(sp)
10003134:	df000215 	stw	fp,8(sp)
10003138:	df000204 	addi	fp,sp,8
1000313c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
10003140:	e0bfff17 	ldw	r2,-4(fp)
10003144:	10800017 	ldw	r2,0(r2)
10003148:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
1000314c:	e0bffe17 	ldw	r2,-8(fp)
10003150:	10c00a04 	addi	r3,r2,40
10003154:	e0bfff17 	ldw	r2,-4(fp)
10003158:	10800217 	ldw	r2,8(r2)
1000315c:	100b883a 	mov	r5,r2
10003160:	1809883a 	mov	r4,r3
10003164:	000353c0 	call	1000353c <altera_avalon_jtag_uart_close>
}
10003168:	e037883a 	mov	sp,fp
1000316c:	dfc00117 	ldw	ra,4(sp)
10003170:	df000017 	ldw	fp,0(sp)
10003174:	dec00204 	addi	sp,sp,8
10003178:	f800283a 	ret

1000317c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
1000317c:	defffa04 	addi	sp,sp,-24
10003180:	dfc00515 	stw	ra,20(sp)
10003184:	df000415 	stw	fp,16(sp)
10003188:	df000404 	addi	fp,sp,16
1000318c:	e13ffd15 	stw	r4,-12(fp)
10003190:	e17ffe15 	stw	r5,-8(fp)
10003194:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
10003198:	e0bffd17 	ldw	r2,-12(fp)
1000319c:	10800017 	ldw	r2,0(r2)
100031a0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
100031a4:	e0bffc17 	ldw	r2,-16(fp)
100031a8:	10800a04 	addi	r2,r2,40
100031ac:	e1bfff17 	ldw	r6,-4(fp)
100031b0:	e17ffe17 	ldw	r5,-8(fp)
100031b4:	1009883a 	mov	r4,r2
100031b8:	00035a40 	call	100035a4 <altera_avalon_jtag_uart_ioctl>
}
100031bc:	e037883a 	mov	sp,fp
100031c0:	dfc00117 	ldw	ra,4(sp)
100031c4:	df000017 	ldw	fp,0(sp)
100031c8:	dec00204 	addi	sp,sp,8
100031cc:	f800283a 	ret

100031d0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
100031d0:	defffa04 	addi	sp,sp,-24
100031d4:	dfc00515 	stw	ra,20(sp)
100031d8:	df000415 	stw	fp,16(sp)
100031dc:	df000404 	addi	fp,sp,16
100031e0:	e13ffd15 	stw	r4,-12(fp)
100031e4:	e17ffe15 	stw	r5,-8(fp)
100031e8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
100031ec:	e0bffd17 	ldw	r2,-12(fp)
100031f0:	00c00044 	movi	r3,1
100031f4:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
100031f8:	e0bffd17 	ldw	r2,-12(fp)
100031fc:	10800017 	ldw	r2,0(r2)
10003200:	10800104 	addi	r2,r2,4
10003204:	1007883a 	mov	r3,r2
10003208:	e0bffd17 	ldw	r2,-12(fp)
1000320c:	10800817 	ldw	r2,32(r2)
10003210:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
10003214:	e0bffe17 	ldw	r2,-8(fp)
10003218:	e0ffff17 	ldw	r3,-4(fp)
1000321c:	d8000015 	stw	zero,0(sp)
10003220:	e1fffd17 	ldw	r7,-12(fp)
10003224:	01840034 	movhi	r6,4096
10003228:	318ca404 	addi	r6,r6,12944
1000322c:	180b883a 	mov	r5,r3
10003230:	1009883a 	mov	r4,r2
10003234:	00040780 	call	10004078 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
10003238:	e0bffd17 	ldw	r2,-12(fp)
1000323c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
10003240:	e0bffd17 	ldw	r2,-12(fp)
10003244:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
10003248:	d0e4d617 	ldw	r3,-27816(gp)
1000324c:	e1fffd17 	ldw	r7,-12(fp)
10003250:	01840034 	movhi	r6,4096
10003254:	318d2704 	addi	r6,r6,13468
10003258:	180b883a 	mov	r5,r3
1000325c:	1009883a 	mov	r4,r2
10003260:	0003ad40 	call	10003ad4 <alt_alarm_start>
10003264:	1000040e 	bge	r2,zero,10003278 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
10003268:	e0fffd17 	ldw	r3,-12(fp)
1000326c:	00a00034 	movhi	r2,32768
10003270:	10bfffc4 	addi	r2,r2,-1
10003274:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
10003278:	0001883a 	nop
1000327c:	e037883a 	mov	sp,fp
10003280:	dfc00117 	ldw	ra,4(sp)
10003284:	df000017 	ldw	fp,0(sp)
10003288:	dec00204 	addi	sp,sp,8
1000328c:	f800283a 	ret

10003290 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
10003290:	defff804 	addi	sp,sp,-32
10003294:	df000715 	stw	fp,28(sp)
10003298:	df000704 	addi	fp,sp,28
1000329c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
100032a0:	e0bfff17 	ldw	r2,-4(fp)
100032a4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
100032a8:	e0bffb17 	ldw	r2,-20(fp)
100032ac:	10800017 	ldw	r2,0(r2)
100032b0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
100032b4:	e0bffc17 	ldw	r2,-16(fp)
100032b8:	10800104 	addi	r2,r2,4
100032bc:	10800037 	ldwio	r2,0(r2)
100032c0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
100032c4:	e0bffd17 	ldw	r2,-12(fp)
100032c8:	1080c00c 	andi	r2,r2,768
100032cc:	10006d26 	beq	r2,zero,10003484 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
100032d0:	e0bffd17 	ldw	r2,-12(fp)
100032d4:	1080400c 	andi	r2,r2,256
100032d8:	10003526 	beq	r2,zero,100033b0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
100032dc:	00800074 	movhi	r2,1
100032e0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
100032e4:	e0bffb17 	ldw	r2,-20(fp)
100032e8:	10800a17 	ldw	r2,40(r2)
100032ec:	10800044 	addi	r2,r2,1
100032f0:	1081ffcc 	andi	r2,r2,2047
100032f4:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
100032f8:	e0bffb17 	ldw	r2,-20(fp)
100032fc:	10c00b17 	ldw	r3,44(r2)
10003300:	e0bffe17 	ldw	r2,-8(fp)
10003304:	18801526 	beq	r3,r2,1000335c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
10003308:	e0bffc17 	ldw	r2,-16(fp)
1000330c:	10800037 	ldwio	r2,0(r2)
10003310:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
10003314:	e0bff917 	ldw	r2,-28(fp)
10003318:	10a0000c 	andi	r2,r2,32768
1000331c:	10001126 	beq	r2,zero,10003364 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
10003320:	e0bffb17 	ldw	r2,-20(fp)
10003324:	10800a17 	ldw	r2,40(r2)
10003328:	e0fff917 	ldw	r3,-28(fp)
1000332c:	1809883a 	mov	r4,r3
10003330:	e0fffb17 	ldw	r3,-20(fp)
10003334:	1885883a 	add	r2,r3,r2
10003338:	10800e04 	addi	r2,r2,56
1000333c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10003340:	e0bffb17 	ldw	r2,-20(fp)
10003344:	10800a17 	ldw	r2,40(r2)
10003348:	10800044 	addi	r2,r2,1
1000334c:	10c1ffcc 	andi	r3,r2,2047
10003350:	e0bffb17 	ldw	r2,-20(fp)
10003354:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
10003358:	003fe206 	br	100032e4 <__alt_data_end+0xf80032e4>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
1000335c:	0001883a 	nop
10003360:	00000106 	br	10003368 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
10003364:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
10003368:	e0bff917 	ldw	r2,-28(fp)
1000336c:	10bfffec 	andhi	r2,r2,65535
10003370:	10000f26 	beq	r2,zero,100033b0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10003374:	e0bffb17 	ldw	r2,-20(fp)
10003378:	10c00817 	ldw	r3,32(r2)
1000337c:	00bfff84 	movi	r2,-2
10003380:	1886703a 	and	r3,r3,r2
10003384:	e0bffb17 	ldw	r2,-20(fp)
10003388:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
1000338c:	e0bffc17 	ldw	r2,-16(fp)
10003390:	10800104 	addi	r2,r2,4
10003394:	1007883a 	mov	r3,r2
10003398:	e0bffb17 	ldw	r2,-20(fp)
1000339c:	10800817 	ldw	r2,32(r2)
100033a0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
100033a4:	e0bffc17 	ldw	r2,-16(fp)
100033a8:	10800104 	addi	r2,r2,4
100033ac:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
100033b0:	e0bffd17 	ldw	r2,-12(fp)
100033b4:	1080800c 	andi	r2,r2,512
100033b8:	103fbe26 	beq	r2,zero,100032b4 <__alt_data_end+0xf80032b4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
100033bc:	e0bffd17 	ldw	r2,-12(fp)
100033c0:	1004d43a 	srli	r2,r2,16
100033c4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
100033c8:	00001406 	br	1000341c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
100033cc:	e0bffc17 	ldw	r2,-16(fp)
100033d0:	e0fffb17 	ldw	r3,-20(fp)
100033d4:	18c00d17 	ldw	r3,52(r3)
100033d8:	e13ffb17 	ldw	r4,-20(fp)
100033dc:	20c7883a 	add	r3,r4,r3
100033e0:	18c20e04 	addi	r3,r3,2104
100033e4:	18c00003 	ldbu	r3,0(r3)
100033e8:	18c03fcc 	andi	r3,r3,255
100033ec:	18c0201c 	xori	r3,r3,128
100033f0:	18ffe004 	addi	r3,r3,-128
100033f4:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
100033f8:	e0bffb17 	ldw	r2,-20(fp)
100033fc:	10800d17 	ldw	r2,52(r2)
10003400:	10800044 	addi	r2,r2,1
10003404:	10c1ffcc 	andi	r3,r2,2047
10003408:	e0bffb17 	ldw	r2,-20(fp)
1000340c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
10003410:	e0bffa17 	ldw	r2,-24(fp)
10003414:	10bfffc4 	addi	r2,r2,-1
10003418:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
1000341c:	e0bffa17 	ldw	r2,-24(fp)
10003420:	10000526 	beq	r2,zero,10003438 <altera_avalon_jtag_uart_irq+0x1a8>
10003424:	e0bffb17 	ldw	r2,-20(fp)
10003428:	10c00d17 	ldw	r3,52(r2)
1000342c:	e0bffb17 	ldw	r2,-20(fp)
10003430:	10800c17 	ldw	r2,48(r2)
10003434:	18bfe51e 	bne	r3,r2,100033cc <__alt_data_end+0xf80033cc>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
10003438:	e0bffa17 	ldw	r2,-24(fp)
1000343c:	103f9d26 	beq	r2,zero,100032b4 <__alt_data_end+0xf80032b4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
10003440:	e0bffb17 	ldw	r2,-20(fp)
10003444:	10c00817 	ldw	r3,32(r2)
10003448:	00bfff44 	movi	r2,-3
1000344c:	1886703a 	and	r3,r3,r2
10003450:	e0bffb17 	ldw	r2,-20(fp)
10003454:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10003458:	e0bffb17 	ldw	r2,-20(fp)
1000345c:	10800017 	ldw	r2,0(r2)
10003460:	10800104 	addi	r2,r2,4
10003464:	1007883a 	mov	r3,r2
10003468:	e0bffb17 	ldw	r2,-20(fp)
1000346c:	10800817 	ldw	r2,32(r2)
10003470:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
10003474:	e0bffc17 	ldw	r2,-16(fp)
10003478:	10800104 	addi	r2,r2,4
1000347c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
10003480:	003f8c06 	br	100032b4 <__alt_data_end+0xf80032b4>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
10003484:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
10003488:	0001883a 	nop
1000348c:	e037883a 	mov	sp,fp
10003490:	df000017 	ldw	fp,0(sp)
10003494:	dec00104 	addi	sp,sp,4
10003498:	f800283a 	ret

1000349c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
1000349c:	defff804 	addi	sp,sp,-32
100034a0:	df000715 	stw	fp,28(sp)
100034a4:	df000704 	addi	fp,sp,28
100034a8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
100034ac:	e0bffb17 	ldw	r2,-20(fp)
100034b0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
100034b4:	e0bff917 	ldw	r2,-28(fp)
100034b8:	10800017 	ldw	r2,0(r2)
100034bc:	10800104 	addi	r2,r2,4
100034c0:	10800037 	ldwio	r2,0(r2)
100034c4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
100034c8:	e0bffa17 	ldw	r2,-24(fp)
100034cc:	1081000c 	andi	r2,r2,1024
100034d0:	10000b26 	beq	r2,zero,10003500 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
100034d4:	e0bff917 	ldw	r2,-28(fp)
100034d8:	10800017 	ldw	r2,0(r2)
100034dc:	10800104 	addi	r2,r2,4
100034e0:	1007883a 	mov	r3,r2
100034e4:	e0bff917 	ldw	r2,-28(fp)
100034e8:	10800817 	ldw	r2,32(r2)
100034ec:	10810014 	ori	r2,r2,1024
100034f0:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
100034f4:	e0bff917 	ldw	r2,-28(fp)
100034f8:	10000915 	stw	zero,36(r2)
100034fc:	00000a06 	br	10003528 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
10003500:	e0bff917 	ldw	r2,-28(fp)
10003504:	10c00917 	ldw	r3,36(r2)
10003508:	00a00034 	movhi	r2,32768
1000350c:	10bfff04 	addi	r2,r2,-4
10003510:	10c00536 	bltu	r2,r3,10003528 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
10003514:	e0bff917 	ldw	r2,-28(fp)
10003518:	10800917 	ldw	r2,36(r2)
1000351c:	10c00044 	addi	r3,r2,1
10003520:	e0bff917 	ldw	r2,-28(fp)
10003524:	10c00915 	stw	r3,36(r2)
10003528:	d0a4d617 	ldw	r2,-27816(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
1000352c:	e037883a 	mov	sp,fp
10003530:	df000017 	ldw	fp,0(sp)
10003534:	dec00104 	addi	sp,sp,4
10003538:	f800283a 	ret

1000353c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
1000353c:	defffd04 	addi	sp,sp,-12
10003540:	df000215 	stw	fp,8(sp)
10003544:	df000204 	addi	fp,sp,8
10003548:	e13ffe15 	stw	r4,-8(fp)
1000354c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10003550:	00000506 	br	10003568 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
10003554:	e0bfff17 	ldw	r2,-4(fp)
10003558:	1090000c 	andi	r2,r2,16384
1000355c:	10000226 	beq	r2,zero,10003568 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
10003560:	00bffd44 	movi	r2,-11
10003564:	00000b06 	br	10003594 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
10003568:	e0bffe17 	ldw	r2,-8(fp)
1000356c:	10c00d17 	ldw	r3,52(r2)
10003570:	e0bffe17 	ldw	r2,-8(fp)
10003574:	10800c17 	ldw	r2,48(r2)
10003578:	18800526 	beq	r3,r2,10003590 <altera_avalon_jtag_uart_close+0x54>
1000357c:	e0bffe17 	ldw	r2,-8(fp)
10003580:	10c00917 	ldw	r3,36(r2)
10003584:	e0bffe17 	ldw	r2,-8(fp)
10003588:	10800117 	ldw	r2,4(r2)
1000358c:	18bff136 	bltu	r3,r2,10003554 <__alt_data_end+0xf8003554>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
10003590:	0005883a 	mov	r2,zero
}
10003594:	e037883a 	mov	sp,fp
10003598:	df000017 	ldw	fp,0(sp)
1000359c:	dec00104 	addi	sp,sp,4
100035a0:	f800283a 	ret

100035a4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
100035a4:	defffa04 	addi	sp,sp,-24
100035a8:	df000515 	stw	fp,20(sp)
100035ac:	df000504 	addi	fp,sp,20
100035b0:	e13ffd15 	stw	r4,-12(fp)
100035b4:	e17ffe15 	stw	r5,-8(fp)
100035b8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
100035bc:	00bff9c4 	movi	r2,-25
100035c0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
100035c4:	e0bffe17 	ldw	r2,-8(fp)
100035c8:	10da8060 	cmpeqi	r3,r2,27137
100035cc:	1800031e 	bne	r3,zero,100035dc <altera_avalon_jtag_uart_ioctl+0x38>
100035d0:	109a80a0 	cmpeqi	r2,r2,27138
100035d4:	1000181e 	bne	r2,zero,10003638 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
100035d8:	00002906 	br	10003680 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
100035dc:	e0bffd17 	ldw	r2,-12(fp)
100035e0:	10c00117 	ldw	r3,4(r2)
100035e4:	00a00034 	movhi	r2,32768
100035e8:	10bfffc4 	addi	r2,r2,-1
100035ec:	18802126 	beq	r3,r2,10003674 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
100035f0:	e0bfff17 	ldw	r2,-4(fp)
100035f4:	10800017 	ldw	r2,0(r2)
100035f8:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
100035fc:	e0bffc17 	ldw	r2,-16(fp)
10003600:	10800090 	cmplti	r2,r2,2
10003604:	1000061e 	bne	r2,zero,10003620 <altera_avalon_jtag_uart_ioctl+0x7c>
10003608:	e0fffc17 	ldw	r3,-16(fp)
1000360c:	00a00034 	movhi	r2,32768
10003610:	10bfffc4 	addi	r2,r2,-1
10003614:	18800226 	beq	r3,r2,10003620 <altera_avalon_jtag_uart_ioctl+0x7c>
10003618:	e0bffc17 	ldw	r2,-16(fp)
1000361c:	00000206 	br	10003628 <altera_avalon_jtag_uart_ioctl+0x84>
10003620:	00a00034 	movhi	r2,32768
10003624:	10bfff84 	addi	r2,r2,-2
10003628:	e0fffd17 	ldw	r3,-12(fp)
1000362c:	18800115 	stw	r2,4(r3)
      rc = 0;
10003630:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10003634:	00000f06 	br	10003674 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
10003638:	e0bffd17 	ldw	r2,-12(fp)
1000363c:	10c00117 	ldw	r3,4(r2)
10003640:	00a00034 	movhi	r2,32768
10003644:	10bfffc4 	addi	r2,r2,-1
10003648:	18800c26 	beq	r3,r2,1000367c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
1000364c:	e0bffd17 	ldw	r2,-12(fp)
10003650:	10c00917 	ldw	r3,36(r2)
10003654:	e0bffd17 	ldw	r2,-12(fp)
10003658:	10800117 	ldw	r2,4(r2)
1000365c:	1885803a 	cmpltu	r2,r3,r2
10003660:	10c03fcc 	andi	r3,r2,255
10003664:	e0bfff17 	ldw	r2,-4(fp)
10003668:	10c00015 	stw	r3,0(r2)
      rc = 0;
1000366c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
10003670:	00000206 	br	1000367c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
10003674:	0001883a 	nop
10003678:	00000106 	br	10003680 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
1000367c:	0001883a 	nop

  default:
    break;
  }

  return rc;
10003680:	e0bffb17 	ldw	r2,-20(fp)
}
10003684:	e037883a 	mov	sp,fp
10003688:	df000017 	ldw	fp,0(sp)
1000368c:	dec00104 	addi	sp,sp,4
10003690:	f800283a 	ret

10003694 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
10003694:	defff304 	addi	sp,sp,-52
10003698:	dfc00c15 	stw	ra,48(sp)
1000369c:	df000b15 	stw	fp,44(sp)
100036a0:	df000b04 	addi	fp,sp,44
100036a4:	e13ffc15 	stw	r4,-16(fp)
100036a8:	e17ffd15 	stw	r5,-12(fp)
100036ac:	e1bffe15 	stw	r6,-8(fp)
100036b0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
100036b4:	e0bffd17 	ldw	r2,-12(fp)
100036b8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
100036bc:	00004706 	br	100037dc <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
100036c0:	e0bffc17 	ldw	r2,-16(fp)
100036c4:	10800a17 	ldw	r2,40(r2)
100036c8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
100036cc:	e0bffc17 	ldw	r2,-16(fp)
100036d0:	10800b17 	ldw	r2,44(r2)
100036d4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
100036d8:	e0fff717 	ldw	r3,-36(fp)
100036dc:	e0bff817 	ldw	r2,-32(fp)
100036e0:	18800536 	bltu	r3,r2,100036f8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
100036e4:	e0fff717 	ldw	r3,-36(fp)
100036e8:	e0bff817 	ldw	r2,-32(fp)
100036ec:	1885c83a 	sub	r2,r3,r2
100036f0:	e0bff615 	stw	r2,-40(fp)
100036f4:	00000406 	br	10003708 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
100036f8:	00c20004 	movi	r3,2048
100036fc:	e0bff817 	ldw	r2,-32(fp)
10003700:	1885c83a 	sub	r2,r3,r2
10003704:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10003708:	e0bff617 	ldw	r2,-40(fp)
1000370c:	10001e26 	beq	r2,zero,10003788 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
10003710:	e0fffe17 	ldw	r3,-8(fp)
10003714:	e0bff617 	ldw	r2,-40(fp)
10003718:	1880022e 	bgeu	r3,r2,10003724 <altera_avalon_jtag_uart_read+0x90>
        n = space;
1000371c:	e0bffe17 	ldw	r2,-8(fp)
10003720:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
10003724:	e0bffc17 	ldw	r2,-16(fp)
10003728:	10c00e04 	addi	r3,r2,56
1000372c:	e0bff817 	ldw	r2,-32(fp)
10003730:	1885883a 	add	r2,r3,r2
10003734:	e1bff617 	ldw	r6,-40(fp)
10003738:	100b883a 	mov	r5,r2
1000373c:	e13ff517 	ldw	r4,-44(fp)
10003740:	0004ca40 	call	10004ca4 <memcpy>
      ptr   += n;
10003744:	e0fff517 	ldw	r3,-44(fp)
10003748:	e0bff617 	ldw	r2,-40(fp)
1000374c:	1885883a 	add	r2,r3,r2
10003750:	e0bff515 	stw	r2,-44(fp)
      space -= n;
10003754:	e0fffe17 	ldw	r3,-8(fp)
10003758:	e0bff617 	ldw	r2,-40(fp)
1000375c:	1885c83a 	sub	r2,r3,r2
10003760:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
10003764:	e0fff817 	ldw	r3,-32(fp)
10003768:	e0bff617 	ldw	r2,-40(fp)
1000376c:	1885883a 	add	r2,r3,r2
10003770:	10c1ffcc 	andi	r3,r2,2047
10003774:	e0bffc17 	ldw	r2,-16(fp)
10003778:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
1000377c:	e0bffe17 	ldw	r2,-8(fp)
10003780:	00bfcf16 	blt	zero,r2,100036c0 <__alt_data_end+0xf80036c0>
10003784:	00000106 	br	1000378c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
10003788:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
1000378c:	e0fff517 	ldw	r3,-44(fp)
10003790:	e0bffd17 	ldw	r2,-12(fp)
10003794:	1880141e 	bne	r3,r2,100037e8 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
10003798:	e0bfff17 	ldw	r2,-4(fp)
1000379c:	1090000c 	andi	r2,r2,16384
100037a0:	1000131e 	bne	r2,zero,100037f0 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
100037a4:	0001883a 	nop
100037a8:	e0bffc17 	ldw	r2,-16(fp)
100037ac:	10c00a17 	ldw	r3,40(r2)
100037b0:	e0bff717 	ldw	r2,-36(fp)
100037b4:	1880051e 	bne	r3,r2,100037cc <altera_avalon_jtag_uart_read+0x138>
100037b8:	e0bffc17 	ldw	r2,-16(fp)
100037bc:	10c00917 	ldw	r3,36(r2)
100037c0:	e0bffc17 	ldw	r2,-16(fp)
100037c4:	10800117 	ldw	r2,4(r2)
100037c8:	18bff736 	bltu	r3,r2,100037a8 <__alt_data_end+0xf80037a8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
100037cc:	e0bffc17 	ldw	r2,-16(fp)
100037d0:	10c00a17 	ldw	r3,40(r2)
100037d4:	e0bff717 	ldw	r2,-36(fp)
100037d8:	18800726 	beq	r3,r2,100037f8 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
100037dc:	e0bffe17 	ldw	r2,-8(fp)
100037e0:	00bfb716 	blt	zero,r2,100036c0 <__alt_data_end+0xf80036c0>
100037e4:	00000506 	br	100037fc <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
100037e8:	0001883a 	nop
100037ec:	00000306 	br	100037fc <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
100037f0:	0001883a 	nop
100037f4:	00000106 	br	100037fc <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
100037f8:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
100037fc:	e0fff517 	ldw	r3,-44(fp)
10003800:	e0bffd17 	ldw	r2,-12(fp)
10003804:	18801826 	beq	r3,r2,10003868 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10003808:	0005303a 	rdctl	r2,status
1000380c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10003810:	e0fffb17 	ldw	r3,-20(fp)
10003814:	00bfff84 	movi	r2,-2
10003818:	1884703a 	and	r2,r3,r2
1000381c:	1001703a 	wrctl	status,r2
  
  return context;
10003820:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
10003824:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
10003828:	e0bffc17 	ldw	r2,-16(fp)
1000382c:	10800817 	ldw	r2,32(r2)
10003830:	10c00054 	ori	r3,r2,1
10003834:	e0bffc17 	ldw	r2,-16(fp)
10003838:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
1000383c:	e0bffc17 	ldw	r2,-16(fp)
10003840:	10800017 	ldw	r2,0(r2)
10003844:	10800104 	addi	r2,r2,4
10003848:	1007883a 	mov	r3,r2
1000384c:	e0bffc17 	ldw	r2,-16(fp)
10003850:	10800817 	ldw	r2,32(r2)
10003854:	18800035 	stwio	r2,0(r3)
10003858:	e0bffa17 	ldw	r2,-24(fp)
1000385c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10003860:	e0bff917 	ldw	r2,-28(fp)
10003864:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
10003868:	e0fff517 	ldw	r3,-44(fp)
1000386c:	e0bffd17 	ldw	r2,-12(fp)
10003870:	18800426 	beq	r3,r2,10003884 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
10003874:	e0fff517 	ldw	r3,-44(fp)
10003878:	e0bffd17 	ldw	r2,-12(fp)
1000387c:	1885c83a 	sub	r2,r3,r2
10003880:	00000606 	br	1000389c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
10003884:	e0bfff17 	ldw	r2,-4(fp)
10003888:	1090000c 	andi	r2,r2,16384
1000388c:	10000226 	beq	r2,zero,10003898 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
10003890:	00bffd44 	movi	r2,-11
10003894:	00000106 	br	1000389c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
10003898:	00bffec4 	movi	r2,-5
}
1000389c:	e037883a 	mov	sp,fp
100038a0:	dfc00117 	ldw	ra,4(sp)
100038a4:	df000017 	ldw	fp,0(sp)
100038a8:	dec00204 	addi	sp,sp,8
100038ac:	f800283a 	ret

100038b0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
100038b0:	defff304 	addi	sp,sp,-52
100038b4:	dfc00c15 	stw	ra,48(sp)
100038b8:	df000b15 	stw	fp,44(sp)
100038bc:	df000b04 	addi	fp,sp,44
100038c0:	e13ffc15 	stw	r4,-16(fp)
100038c4:	e17ffd15 	stw	r5,-12(fp)
100038c8:	e1bffe15 	stw	r6,-8(fp)
100038cc:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
100038d0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
100038d4:	e0bffd17 	ldw	r2,-12(fp)
100038d8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
100038dc:	00003706 	br	100039bc <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
100038e0:	e0bffc17 	ldw	r2,-16(fp)
100038e4:	10800c17 	ldw	r2,48(r2)
100038e8:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
100038ec:	e0bffc17 	ldw	r2,-16(fp)
100038f0:	10800d17 	ldw	r2,52(r2)
100038f4:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
100038f8:	e0fff917 	ldw	r3,-28(fp)
100038fc:	e0bff517 	ldw	r2,-44(fp)
10003900:	1880062e 	bgeu	r3,r2,1000391c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
10003904:	e0fff517 	ldw	r3,-44(fp)
10003908:	e0bff917 	ldw	r2,-28(fp)
1000390c:	1885c83a 	sub	r2,r3,r2
10003910:	10bfffc4 	addi	r2,r2,-1
10003914:	e0bff615 	stw	r2,-40(fp)
10003918:	00000b06 	br	10003948 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
1000391c:	e0bff517 	ldw	r2,-44(fp)
10003920:	10000526 	beq	r2,zero,10003938 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
10003924:	00c20004 	movi	r3,2048
10003928:	e0bff917 	ldw	r2,-28(fp)
1000392c:	1885c83a 	sub	r2,r3,r2
10003930:	e0bff615 	stw	r2,-40(fp)
10003934:	00000406 	br	10003948 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
10003938:	00c1ffc4 	movi	r3,2047
1000393c:	e0bff917 	ldw	r2,-28(fp)
10003940:	1885c83a 	sub	r2,r3,r2
10003944:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
10003948:	e0bff617 	ldw	r2,-40(fp)
1000394c:	10001e26 	beq	r2,zero,100039c8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
10003950:	e0fffe17 	ldw	r3,-8(fp)
10003954:	e0bff617 	ldw	r2,-40(fp)
10003958:	1880022e 	bgeu	r3,r2,10003964 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
1000395c:	e0bffe17 	ldw	r2,-8(fp)
10003960:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
10003964:	e0bffc17 	ldw	r2,-16(fp)
10003968:	10c20e04 	addi	r3,r2,2104
1000396c:	e0bff917 	ldw	r2,-28(fp)
10003970:	1885883a 	add	r2,r3,r2
10003974:	e1bff617 	ldw	r6,-40(fp)
10003978:	e17ffd17 	ldw	r5,-12(fp)
1000397c:	1009883a 	mov	r4,r2
10003980:	0004ca40 	call	10004ca4 <memcpy>
      ptr   += n;
10003984:	e0fffd17 	ldw	r3,-12(fp)
10003988:	e0bff617 	ldw	r2,-40(fp)
1000398c:	1885883a 	add	r2,r3,r2
10003990:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
10003994:	e0fffe17 	ldw	r3,-8(fp)
10003998:	e0bff617 	ldw	r2,-40(fp)
1000399c:	1885c83a 	sub	r2,r3,r2
100039a0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
100039a4:	e0fff917 	ldw	r3,-28(fp)
100039a8:	e0bff617 	ldw	r2,-40(fp)
100039ac:	1885883a 	add	r2,r3,r2
100039b0:	10c1ffcc 	andi	r3,r2,2047
100039b4:	e0bffc17 	ldw	r2,-16(fp)
100039b8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
100039bc:	e0bffe17 	ldw	r2,-8(fp)
100039c0:	00bfc716 	blt	zero,r2,100038e0 <__alt_data_end+0xf80038e0>
100039c4:	00000106 	br	100039cc <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
100039c8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100039cc:	0005303a 	rdctl	r2,status
100039d0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100039d4:	e0fffb17 	ldw	r3,-20(fp)
100039d8:	00bfff84 	movi	r2,-2
100039dc:	1884703a 	and	r2,r3,r2
100039e0:	1001703a 	wrctl	status,r2
  
  return context;
100039e4:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
100039e8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
100039ec:	e0bffc17 	ldw	r2,-16(fp)
100039f0:	10800817 	ldw	r2,32(r2)
100039f4:	10c00094 	ori	r3,r2,2
100039f8:	e0bffc17 	ldw	r2,-16(fp)
100039fc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
10003a00:	e0bffc17 	ldw	r2,-16(fp)
10003a04:	10800017 	ldw	r2,0(r2)
10003a08:	10800104 	addi	r2,r2,4
10003a0c:	1007883a 	mov	r3,r2
10003a10:	e0bffc17 	ldw	r2,-16(fp)
10003a14:	10800817 	ldw	r2,32(r2)
10003a18:	18800035 	stwio	r2,0(r3)
10003a1c:	e0bffa17 	ldw	r2,-24(fp)
10003a20:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10003a24:	e0bff817 	ldw	r2,-32(fp)
10003a28:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
10003a2c:	e0bffe17 	ldw	r2,-8(fp)
10003a30:	0080100e 	bge	zero,r2,10003a74 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
10003a34:	e0bfff17 	ldw	r2,-4(fp)
10003a38:	1090000c 	andi	r2,r2,16384
10003a3c:	1000101e 	bne	r2,zero,10003a80 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
10003a40:	0001883a 	nop
10003a44:	e0bffc17 	ldw	r2,-16(fp)
10003a48:	10c00d17 	ldw	r3,52(r2)
10003a4c:	e0bff517 	ldw	r2,-44(fp)
10003a50:	1880051e 	bne	r3,r2,10003a68 <altera_avalon_jtag_uart_write+0x1b8>
10003a54:	e0bffc17 	ldw	r2,-16(fp)
10003a58:	10c00917 	ldw	r3,36(r2)
10003a5c:	e0bffc17 	ldw	r2,-16(fp)
10003a60:	10800117 	ldw	r2,4(r2)
10003a64:	18bff736 	bltu	r3,r2,10003a44 <__alt_data_end+0xf8003a44>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
10003a68:	e0bffc17 	ldw	r2,-16(fp)
10003a6c:	10800917 	ldw	r2,36(r2)
10003a70:	1000051e 	bne	r2,zero,10003a88 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
10003a74:	e0bffe17 	ldw	r2,-8(fp)
10003a78:	00bfd016 	blt	zero,r2,100039bc <__alt_data_end+0xf80039bc>
10003a7c:	00000306 	br	10003a8c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
10003a80:	0001883a 	nop
10003a84:	00000106 	br	10003a8c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
10003a88:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
10003a8c:	e0fffd17 	ldw	r3,-12(fp)
10003a90:	e0bff717 	ldw	r2,-36(fp)
10003a94:	18800426 	beq	r3,r2,10003aa8 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
10003a98:	e0fffd17 	ldw	r3,-12(fp)
10003a9c:	e0bff717 	ldw	r2,-36(fp)
10003aa0:	1885c83a 	sub	r2,r3,r2
10003aa4:	00000606 	br	10003ac0 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
10003aa8:	e0bfff17 	ldw	r2,-4(fp)
10003aac:	1090000c 	andi	r2,r2,16384
10003ab0:	10000226 	beq	r2,zero,10003abc <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
10003ab4:	00bffd44 	movi	r2,-11
10003ab8:	00000106 	br	10003ac0 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
10003abc:	00bffec4 	movi	r2,-5
}
10003ac0:	e037883a 	mov	sp,fp
10003ac4:	dfc00117 	ldw	ra,4(sp)
10003ac8:	df000017 	ldw	fp,0(sp)
10003acc:	dec00204 	addi	sp,sp,8
10003ad0:	f800283a 	ret

10003ad4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
10003ad4:	defff504 	addi	sp,sp,-44
10003ad8:	df000a15 	stw	fp,40(sp)
10003adc:	df000a04 	addi	fp,sp,40
10003ae0:	e13ffc15 	stw	r4,-16(fp)
10003ae4:	e17ffd15 	stw	r5,-12(fp)
10003ae8:	e1bffe15 	stw	r6,-8(fp)
10003aec:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
10003af0:	e03ff615 	stw	zero,-40(fp)
10003af4:	d0a4d617 	ldw	r2,-27816(gp)
  
  if (alt_ticks_per_second ())
10003af8:	10003c26 	beq	r2,zero,10003bec <alt_alarm_start+0x118>
  {
    if (alarm)
10003afc:	e0bffc17 	ldw	r2,-16(fp)
10003b00:	10003826 	beq	r2,zero,10003be4 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
10003b04:	e0bffc17 	ldw	r2,-16(fp)
10003b08:	e0fffe17 	ldw	r3,-8(fp)
10003b0c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
10003b10:	e0bffc17 	ldw	r2,-16(fp)
10003b14:	e0ffff17 	ldw	r3,-4(fp)
10003b18:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10003b1c:	0005303a 	rdctl	r2,status
10003b20:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10003b24:	e0fff917 	ldw	r3,-28(fp)
10003b28:	00bfff84 	movi	r2,-2
10003b2c:	1884703a 	and	r2,r3,r2
10003b30:	1001703a 	wrctl	status,r2
  
  return context;
10003b34:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
10003b38:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
10003b3c:	d0a4d717 	ldw	r2,-27812(gp)
      
      current_nticks = alt_nticks();
10003b40:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
10003b44:	e0fffd17 	ldw	r3,-12(fp)
10003b48:	e0bff617 	ldw	r2,-40(fp)
10003b4c:	1885883a 	add	r2,r3,r2
10003b50:	10c00044 	addi	r3,r2,1
10003b54:	e0bffc17 	ldw	r2,-16(fp)
10003b58:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
10003b5c:	e0bffc17 	ldw	r2,-16(fp)
10003b60:	10c00217 	ldw	r3,8(r2)
10003b64:	e0bff617 	ldw	r2,-40(fp)
10003b68:	1880042e 	bgeu	r3,r2,10003b7c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
10003b6c:	e0bffc17 	ldw	r2,-16(fp)
10003b70:	00c00044 	movi	r3,1
10003b74:	10c00405 	stb	r3,16(r2)
10003b78:	00000206 	br	10003b84 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
10003b7c:	e0bffc17 	ldw	r2,-16(fp)
10003b80:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
10003b84:	e0bffc17 	ldw	r2,-16(fp)
10003b88:	d0e00904 	addi	r3,gp,-32732
10003b8c:	e0fffa15 	stw	r3,-24(fp)
10003b90:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10003b94:	e0bffb17 	ldw	r2,-20(fp)
10003b98:	e0fffa17 	ldw	r3,-24(fp)
10003b9c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10003ba0:	e0bffa17 	ldw	r2,-24(fp)
10003ba4:	10c00017 	ldw	r3,0(r2)
10003ba8:	e0bffb17 	ldw	r2,-20(fp)
10003bac:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10003bb0:	e0bffa17 	ldw	r2,-24(fp)
10003bb4:	10800017 	ldw	r2,0(r2)
10003bb8:	e0fffb17 	ldw	r3,-20(fp)
10003bbc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10003bc0:	e0bffa17 	ldw	r2,-24(fp)
10003bc4:	e0fffb17 	ldw	r3,-20(fp)
10003bc8:	10c00015 	stw	r3,0(r2)
10003bcc:	e0bff817 	ldw	r2,-32(fp)
10003bd0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10003bd4:	e0bff717 	ldw	r2,-36(fp)
10003bd8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
10003bdc:	0005883a 	mov	r2,zero
10003be0:	00000306 	br	10003bf0 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
10003be4:	00bffa84 	movi	r2,-22
10003be8:	00000106 	br	10003bf0 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
10003bec:	00bfde84 	movi	r2,-134
  }
}
10003bf0:	e037883a 	mov	sp,fp
10003bf4:	df000017 	ldw	fp,0(sp)
10003bf8:	dec00104 	addi	sp,sp,4
10003bfc:	f800283a 	ret

10003c00 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
10003c00:	defffa04 	addi	sp,sp,-24
10003c04:	dfc00515 	stw	ra,20(sp)
10003c08:	df000415 	stw	fp,16(sp)
10003c0c:	df000404 	addi	fp,sp,16
10003c10:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
10003c14:	00800244 	movi	r2,9
10003c18:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
10003c1c:	014003f4 	movhi	r5,15
10003c20:	29509004 	addi	r5,r5,16960
10003c24:	e13ffd17 	ldw	r4,-12(fp)
10003c28:	0002cb80 	call	10002cb8 <__mulsi3>
10003c2c:	100b883a 	mov	r5,r2
10003c30:	0100bef4 	movhi	r4,763
10003c34:	213c2004 	addi	r4,r4,-3968
10003c38:	0002bfc0 	call	10002bfc <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
10003c3c:	100b883a 	mov	r5,r2
10003c40:	01200034 	movhi	r4,32768
10003c44:	213fffc4 	addi	r4,r4,-1
10003c48:	0002bfc0 	call	10002bfc <__udivsi3>
10003c4c:	100b883a 	mov	r5,r2
10003c50:	e13fff17 	ldw	r4,-4(fp)
10003c54:	0002bfc0 	call	10002bfc <__udivsi3>
10003c58:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
10003c5c:	e0bffe17 	ldw	r2,-8(fp)
10003c60:	10002a26 	beq	r2,zero,10003d0c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
10003c64:	e03ffc15 	stw	zero,-16(fp)
10003c68:	00001706 	br	10003cc8 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
10003c6c:	00a00034 	movhi	r2,32768
10003c70:	10bfffc4 	addi	r2,r2,-1
10003c74:	10bfffc4 	addi	r2,r2,-1
10003c78:	103ffe1e 	bne	r2,zero,10003c74 <__alt_data_end+0xf8003c74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
10003c7c:	014003f4 	movhi	r5,15
10003c80:	29509004 	addi	r5,r5,16960
10003c84:	e13ffd17 	ldw	r4,-12(fp)
10003c88:	0002cb80 	call	10002cb8 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
10003c8c:	100b883a 	mov	r5,r2
10003c90:	0100bef4 	movhi	r4,763
10003c94:	213c2004 	addi	r4,r4,-3968
10003c98:	0002bfc0 	call	10002bfc <__udivsi3>
10003c9c:	100b883a 	mov	r5,r2
10003ca0:	01200034 	movhi	r4,32768
10003ca4:	213fffc4 	addi	r4,r4,-1
10003ca8:	0002bfc0 	call	10002bfc <__udivsi3>
10003cac:	1007883a 	mov	r3,r2
10003cb0:	e0bfff17 	ldw	r2,-4(fp)
10003cb4:	10c5c83a 	sub	r2,r2,r3
10003cb8:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
10003cbc:	e0bffc17 	ldw	r2,-16(fp)
10003cc0:	10800044 	addi	r2,r2,1
10003cc4:	e0bffc15 	stw	r2,-16(fp)
10003cc8:	e0fffc17 	ldw	r3,-16(fp)
10003ccc:	e0bffe17 	ldw	r2,-8(fp)
10003cd0:	18bfe616 	blt	r3,r2,10003c6c <__alt_data_end+0xf8003c6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
10003cd4:	014003f4 	movhi	r5,15
10003cd8:	29509004 	addi	r5,r5,16960
10003cdc:	e13ffd17 	ldw	r4,-12(fp)
10003ce0:	0002cb80 	call	10002cb8 <__mulsi3>
10003ce4:	100b883a 	mov	r5,r2
10003ce8:	0100bef4 	movhi	r4,763
10003cec:	213c2004 	addi	r4,r4,-3968
10003cf0:	0002bfc0 	call	10002bfc <__udivsi3>
10003cf4:	e17fff17 	ldw	r5,-4(fp)
10003cf8:	1009883a 	mov	r4,r2
10003cfc:	0002cb80 	call	10002cb8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
10003d00:	10bfffc4 	addi	r2,r2,-1
10003d04:	103ffe1e 	bne	r2,zero,10003d00 <__alt_data_end+0xf8003d00>
10003d08:	00000d06 	br	10003d40 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
10003d0c:	014003f4 	movhi	r5,15
10003d10:	29509004 	addi	r5,r5,16960
10003d14:	e13ffd17 	ldw	r4,-12(fp)
10003d18:	0002cb80 	call	10002cb8 <__mulsi3>
10003d1c:	100b883a 	mov	r5,r2
10003d20:	0100bef4 	movhi	r4,763
10003d24:	213c2004 	addi	r4,r4,-3968
10003d28:	0002bfc0 	call	10002bfc <__udivsi3>
10003d2c:	e17fff17 	ldw	r5,-4(fp)
10003d30:	1009883a 	mov	r4,r2
10003d34:	0002cb80 	call	10002cb8 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
10003d38:	10bfffc4 	addi	r2,r2,-1
10003d3c:	00bffe16 	blt	zero,r2,10003d38 <__alt_data_end+0xf8003d38>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
10003d40:	0005883a 	mov	r2,zero
}
10003d44:	e037883a 	mov	sp,fp
10003d48:	dfc00117 	ldw	ra,4(sp)
10003d4c:	df000017 	ldw	fp,0(sp)
10003d50:	dec00204 	addi	sp,sp,8
10003d54:	f800283a 	ret

10003d58 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10003d58:	defffe04 	addi	sp,sp,-8
10003d5c:	dfc00115 	stw	ra,4(sp)
10003d60:	df000015 	stw	fp,0(sp)
10003d64:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10003d68:	d0a00717 	ldw	r2,-32740(gp)
10003d6c:	10000326 	beq	r2,zero,10003d7c <alt_get_errno+0x24>
10003d70:	d0a00717 	ldw	r2,-32740(gp)
10003d74:	103ee83a 	callr	r2
10003d78:	00000106 	br	10003d80 <alt_get_errno+0x28>
10003d7c:	d0a4d104 	addi	r2,gp,-27836
}
10003d80:	e037883a 	mov	sp,fp
10003d84:	dfc00117 	ldw	ra,4(sp)
10003d88:	df000017 	ldw	fp,0(sp)
10003d8c:	dec00204 	addi	sp,sp,8
10003d90:	f800283a 	ret

10003d94 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
10003d94:	defffb04 	addi	sp,sp,-20
10003d98:	dfc00415 	stw	ra,16(sp)
10003d9c:	df000315 	stw	fp,12(sp)
10003da0:	df000304 	addi	fp,sp,12
10003da4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
10003da8:	e0bfff17 	ldw	r2,-4(fp)
10003dac:	10000816 	blt	r2,zero,10003dd0 <close+0x3c>
10003db0:	01400304 	movi	r5,12
10003db4:	e13fff17 	ldw	r4,-4(fp)
10003db8:	0002cb80 	call	10002cb8 <__mulsi3>
10003dbc:	1007883a 	mov	r3,r2
10003dc0:	00840034 	movhi	r2,4096
10003dc4:	109a4804 	addi	r2,r2,26912
10003dc8:	1885883a 	add	r2,r3,r2
10003dcc:	00000106 	br	10003dd4 <close+0x40>
10003dd0:	0005883a 	mov	r2,zero
10003dd4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
10003dd8:	e0bffd17 	ldw	r2,-12(fp)
10003ddc:	10001926 	beq	r2,zero,10003e44 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
10003de0:	e0bffd17 	ldw	r2,-12(fp)
10003de4:	10800017 	ldw	r2,0(r2)
10003de8:	10800417 	ldw	r2,16(r2)
10003dec:	10000626 	beq	r2,zero,10003e08 <close+0x74>
10003df0:	e0bffd17 	ldw	r2,-12(fp)
10003df4:	10800017 	ldw	r2,0(r2)
10003df8:	10800417 	ldw	r2,16(r2)
10003dfc:	e13ffd17 	ldw	r4,-12(fp)
10003e00:	103ee83a 	callr	r2
10003e04:	00000106 	br	10003e0c <close+0x78>
10003e08:	0005883a 	mov	r2,zero
10003e0c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
10003e10:	e13fff17 	ldw	r4,-4(fp)
10003e14:	00046fc0 	call	100046fc <alt_release_fd>
    if (rval < 0)
10003e18:	e0bffe17 	ldw	r2,-8(fp)
10003e1c:	1000070e 	bge	r2,zero,10003e3c <close+0xa8>
    {
      ALT_ERRNO = -rval;
10003e20:	0003d580 	call	10003d58 <alt_get_errno>
10003e24:	1007883a 	mov	r3,r2
10003e28:	e0bffe17 	ldw	r2,-8(fp)
10003e2c:	0085c83a 	sub	r2,zero,r2
10003e30:	18800015 	stw	r2,0(r3)
      return -1;
10003e34:	00bfffc4 	movi	r2,-1
10003e38:	00000706 	br	10003e58 <close+0xc4>
    }
    return 0;
10003e3c:	0005883a 	mov	r2,zero
10003e40:	00000506 	br	10003e58 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
10003e44:	0003d580 	call	10003d58 <alt_get_errno>
10003e48:	1007883a 	mov	r3,r2
10003e4c:	00801444 	movi	r2,81
10003e50:	18800015 	stw	r2,0(r3)
    return -1;
10003e54:	00bfffc4 	movi	r2,-1
  }
}
10003e58:	e037883a 	mov	sp,fp
10003e5c:	dfc00117 	ldw	ra,4(sp)
10003e60:	df000017 	ldw	fp,0(sp)
10003e64:	dec00204 	addi	sp,sp,8
10003e68:	f800283a 	ret

10003e6c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
10003e6c:	deffff04 	addi	sp,sp,-4
10003e70:	df000015 	stw	fp,0(sp)
10003e74:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
10003e78:	0001883a 	nop
10003e7c:	e037883a 	mov	sp,fp
10003e80:	df000017 	ldw	fp,0(sp)
10003e84:	dec00104 	addi	sp,sp,4
10003e88:	f800283a 	ret

10003e8c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
10003e8c:	defffc04 	addi	sp,sp,-16
10003e90:	df000315 	stw	fp,12(sp)
10003e94:	df000304 	addi	fp,sp,12
10003e98:	e13ffd15 	stw	r4,-12(fp)
10003e9c:	e17ffe15 	stw	r5,-8(fp)
10003ea0:	e1bfff15 	stw	r6,-4(fp)
  return len;
10003ea4:	e0bfff17 	ldw	r2,-4(fp)
}
10003ea8:	e037883a 	mov	sp,fp
10003eac:	df000017 	ldw	fp,0(sp)
10003eb0:	dec00104 	addi	sp,sp,4
10003eb4:	f800283a 	ret

10003eb8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10003eb8:	defffe04 	addi	sp,sp,-8
10003ebc:	dfc00115 	stw	ra,4(sp)
10003ec0:	df000015 	stw	fp,0(sp)
10003ec4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10003ec8:	d0a00717 	ldw	r2,-32740(gp)
10003ecc:	10000326 	beq	r2,zero,10003edc <alt_get_errno+0x24>
10003ed0:	d0a00717 	ldw	r2,-32740(gp)
10003ed4:	103ee83a 	callr	r2
10003ed8:	00000106 	br	10003ee0 <alt_get_errno+0x28>
10003edc:	d0a4d104 	addi	r2,gp,-27836
}
10003ee0:	e037883a 	mov	sp,fp
10003ee4:	dfc00117 	ldw	ra,4(sp)
10003ee8:	df000017 	ldw	fp,0(sp)
10003eec:	dec00204 	addi	sp,sp,8
10003ef0:	f800283a 	ret

10003ef4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
10003ef4:	defffa04 	addi	sp,sp,-24
10003ef8:	dfc00515 	stw	ra,20(sp)
10003efc:	df000415 	stw	fp,16(sp)
10003f00:	df000404 	addi	fp,sp,16
10003f04:	e13ffe15 	stw	r4,-8(fp)
10003f08:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
10003f0c:	e0bffe17 	ldw	r2,-8(fp)
10003f10:	10000326 	beq	r2,zero,10003f20 <alt_dev_llist_insert+0x2c>
10003f14:	e0bffe17 	ldw	r2,-8(fp)
10003f18:	10800217 	ldw	r2,8(r2)
10003f1c:	1000061e 	bne	r2,zero,10003f38 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
10003f20:	0003eb80 	call	10003eb8 <alt_get_errno>
10003f24:	1007883a 	mov	r3,r2
10003f28:	00800584 	movi	r2,22
10003f2c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
10003f30:	00bffa84 	movi	r2,-22
10003f34:	00001306 	br	10003f84 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
10003f38:	e0bffe17 	ldw	r2,-8(fp)
10003f3c:	e0ffff17 	ldw	r3,-4(fp)
10003f40:	e0fffc15 	stw	r3,-16(fp)
10003f44:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
10003f48:	e0bffd17 	ldw	r2,-12(fp)
10003f4c:	e0fffc17 	ldw	r3,-16(fp)
10003f50:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
10003f54:	e0bffc17 	ldw	r2,-16(fp)
10003f58:	10c00017 	ldw	r3,0(r2)
10003f5c:	e0bffd17 	ldw	r2,-12(fp)
10003f60:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
10003f64:	e0bffc17 	ldw	r2,-16(fp)
10003f68:	10800017 	ldw	r2,0(r2)
10003f6c:	e0fffd17 	ldw	r3,-12(fp)
10003f70:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
10003f74:	e0bffc17 	ldw	r2,-16(fp)
10003f78:	e0fffd17 	ldw	r3,-12(fp)
10003f7c:	10c00015 	stw	r3,0(r2)

  return 0;  
10003f80:	0005883a 	mov	r2,zero
}
10003f84:	e037883a 	mov	sp,fp
10003f88:	dfc00117 	ldw	ra,4(sp)
10003f8c:	df000017 	ldw	fp,0(sp)
10003f90:	dec00204 	addi	sp,sp,8
10003f94:	f800283a 	ret

10003f98 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
10003f98:	defffd04 	addi	sp,sp,-12
10003f9c:	dfc00215 	stw	ra,8(sp)
10003fa0:	df000115 	stw	fp,4(sp)
10003fa4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10003fa8:	00840034 	movhi	r2,4096
10003fac:	1093f904 	addi	r2,r2,20452
10003fb0:	e0bfff15 	stw	r2,-4(fp)
10003fb4:	00000606 	br	10003fd0 <_do_ctors+0x38>
        (*ctor) (); 
10003fb8:	e0bfff17 	ldw	r2,-4(fp)
10003fbc:	10800017 	ldw	r2,0(r2)
10003fc0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
10003fc4:	e0bfff17 	ldw	r2,-4(fp)
10003fc8:	10bfff04 	addi	r2,r2,-4
10003fcc:	e0bfff15 	stw	r2,-4(fp)
10003fd0:	e0ffff17 	ldw	r3,-4(fp)
10003fd4:	00840034 	movhi	r2,4096
10003fd8:	1093fa04 	addi	r2,r2,20456
10003fdc:	18bff62e 	bgeu	r3,r2,10003fb8 <__alt_data_end+0xf8003fb8>
        (*ctor) (); 
}
10003fe0:	0001883a 	nop
10003fe4:	e037883a 	mov	sp,fp
10003fe8:	dfc00117 	ldw	ra,4(sp)
10003fec:	df000017 	ldw	fp,0(sp)
10003ff0:	dec00204 	addi	sp,sp,8
10003ff4:	f800283a 	ret

10003ff8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
10003ff8:	defffd04 	addi	sp,sp,-12
10003ffc:	dfc00215 	stw	ra,8(sp)
10004000:	df000115 	stw	fp,4(sp)
10004004:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10004008:	00840034 	movhi	r2,4096
1000400c:	1093f904 	addi	r2,r2,20452
10004010:	e0bfff15 	stw	r2,-4(fp)
10004014:	00000606 	br	10004030 <_do_dtors+0x38>
        (*dtor) (); 
10004018:	e0bfff17 	ldw	r2,-4(fp)
1000401c:	10800017 	ldw	r2,0(r2)
10004020:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
10004024:	e0bfff17 	ldw	r2,-4(fp)
10004028:	10bfff04 	addi	r2,r2,-4
1000402c:	e0bfff15 	stw	r2,-4(fp)
10004030:	e0ffff17 	ldw	r3,-4(fp)
10004034:	00840034 	movhi	r2,4096
10004038:	1093fa04 	addi	r2,r2,20456
1000403c:	18bff62e 	bgeu	r3,r2,10004018 <__alt_data_end+0xf8004018>
        (*dtor) (); 
}
10004040:	0001883a 	nop
10004044:	e037883a 	mov	sp,fp
10004048:	dfc00117 	ldw	ra,4(sp)
1000404c:	df000017 	ldw	fp,0(sp)
10004050:	dec00204 	addi	sp,sp,8
10004054:	f800283a 	ret

10004058 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
10004058:	deffff04 	addi	sp,sp,-4
1000405c:	df000015 	stw	fp,0(sp)
10004060:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
10004064:	0001883a 	nop
10004068:	e037883a 	mov	sp,fp
1000406c:	df000017 	ldw	fp,0(sp)
10004070:	dec00104 	addi	sp,sp,4
10004074:	f800283a 	ret

10004078 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10004078:	defff904 	addi	sp,sp,-28
1000407c:	dfc00615 	stw	ra,24(sp)
10004080:	df000515 	stw	fp,20(sp)
10004084:	df000504 	addi	fp,sp,20
10004088:	e13ffc15 	stw	r4,-16(fp)
1000408c:	e17ffd15 	stw	r5,-12(fp)
10004090:	e1bffe15 	stw	r6,-8(fp)
10004094:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
10004098:	e0800217 	ldw	r2,8(fp)
1000409c:	d8800015 	stw	r2,0(sp)
100040a0:	e1ffff17 	ldw	r7,-4(fp)
100040a4:	e1bffe17 	ldw	r6,-8(fp)
100040a8:	e17ffd17 	ldw	r5,-12(fp)
100040ac:	e13ffc17 	ldw	r4,-16(fp)
100040b0:	00042280 	call	10004228 <alt_iic_isr_register>
}  
100040b4:	e037883a 	mov	sp,fp
100040b8:	dfc00117 	ldw	ra,4(sp)
100040bc:	df000017 	ldw	fp,0(sp)
100040c0:	dec00204 	addi	sp,sp,8
100040c4:	f800283a 	ret

100040c8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
100040c8:	defff904 	addi	sp,sp,-28
100040cc:	df000615 	stw	fp,24(sp)
100040d0:	df000604 	addi	fp,sp,24
100040d4:	e13ffe15 	stw	r4,-8(fp)
100040d8:	e17fff15 	stw	r5,-4(fp)
100040dc:	e0bfff17 	ldw	r2,-4(fp)
100040e0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
100040e4:	0005303a 	rdctl	r2,status
100040e8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
100040ec:	e0fffb17 	ldw	r3,-20(fp)
100040f0:	00bfff84 	movi	r2,-2
100040f4:	1884703a 	and	r2,r3,r2
100040f8:	1001703a 	wrctl	status,r2
  
  return context;
100040fc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10004100:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
10004104:	00c00044 	movi	r3,1
10004108:	e0bffa17 	ldw	r2,-24(fp)
1000410c:	1884983a 	sll	r2,r3,r2
10004110:	1007883a 	mov	r3,r2
10004114:	d0a4d517 	ldw	r2,-27820(gp)
10004118:	1884b03a 	or	r2,r3,r2
1000411c:	d0a4d515 	stw	r2,-27820(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
10004120:	d0a4d517 	ldw	r2,-27820(gp)
10004124:	100170fa 	wrctl	ienable,r2
10004128:	e0bffc17 	ldw	r2,-16(fp)
1000412c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10004130:	e0bffd17 	ldw	r2,-12(fp)
10004134:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
10004138:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
1000413c:	0001883a 	nop
}
10004140:	e037883a 	mov	sp,fp
10004144:	df000017 	ldw	fp,0(sp)
10004148:	dec00104 	addi	sp,sp,4
1000414c:	f800283a 	ret

10004150 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
10004150:	defff904 	addi	sp,sp,-28
10004154:	df000615 	stw	fp,24(sp)
10004158:	df000604 	addi	fp,sp,24
1000415c:	e13ffe15 	stw	r4,-8(fp)
10004160:	e17fff15 	stw	r5,-4(fp)
10004164:	e0bfff17 	ldw	r2,-4(fp)
10004168:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
1000416c:	0005303a 	rdctl	r2,status
10004170:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10004174:	e0fffb17 	ldw	r3,-20(fp)
10004178:	00bfff84 	movi	r2,-2
1000417c:	1884703a 	and	r2,r3,r2
10004180:	1001703a 	wrctl	status,r2
  
  return context;
10004184:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
10004188:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
1000418c:	00c00044 	movi	r3,1
10004190:	e0bffa17 	ldw	r2,-24(fp)
10004194:	1884983a 	sll	r2,r3,r2
10004198:	0084303a 	nor	r2,zero,r2
1000419c:	1007883a 	mov	r3,r2
100041a0:	d0a4d517 	ldw	r2,-27820(gp)
100041a4:	1884703a 	and	r2,r3,r2
100041a8:	d0a4d515 	stw	r2,-27820(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
100041ac:	d0a4d517 	ldw	r2,-27820(gp)
100041b0:	100170fa 	wrctl	ienable,r2
100041b4:	e0bffc17 	ldw	r2,-16(fp)
100041b8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100041bc:	e0bffd17 	ldw	r2,-12(fp)
100041c0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
100041c4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
100041c8:	0001883a 	nop
}
100041cc:	e037883a 	mov	sp,fp
100041d0:	df000017 	ldw	fp,0(sp)
100041d4:	dec00104 	addi	sp,sp,4
100041d8:	f800283a 	ret

100041dc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
100041dc:	defffc04 	addi	sp,sp,-16
100041e0:	df000315 	stw	fp,12(sp)
100041e4:	df000304 	addi	fp,sp,12
100041e8:	e13ffe15 	stw	r4,-8(fp)
100041ec:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
100041f0:	000530fa 	rdctl	r2,ienable
100041f4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
100041f8:	00c00044 	movi	r3,1
100041fc:	e0bfff17 	ldw	r2,-4(fp)
10004200:	1884983a 	sll	r2,r3,r2
10004204:	1007883a 	mov	r3,r2
10004208:	e0bffd17 	ldw	r2,-12(fp)
1000420c:	1884703a 	and	r2,r3,r2
10004210:	1004c03a 	cmpne	r2,r2,zero
10004214:	10803fcc 	andi	r2,r2,255
}
10004218:	e037883a 	mov	sp,fp
1000421c:	df000017 	ldw	fp,0(sp)
10004220:	dec00104 	addi	sp,sp,4
10004224:	f800283a 	ret

10004228 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
10004228:	defff504 	addi	sp,sp,-44
1000422c:	dfc00a15 	stw	ra,40(sp)
10004230:	df000915 	stw	fp,36(sp)
10004234:	df000904 	addi	fp,sp,36
10004238:	e13ffc15 	stw	r4,-16(fp)
1000423c:	e17ffd15 	stw	r5,-12(fp)
10004240:	e1bffe15 	stw	r6,-8(fp)
10004244:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
10004248:	00bffa84 	movi	r2,-22
1000424c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
10004250:	e0bffd17 	ldw	r2,-12(fp)
10004254:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
10004258:	e0bff817 	ldw	r2,-32(fp)
1000425c:	10800808 	cmpgei	r2,r2,32
10004260:	1000271e 	bne	r2,zero,10004300 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10004264:	0005303a 	rdctl	r2,status
10004268:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
1000426c:	e0fffb17 	ldw	r3,-20(fp)
10004270:	00bfff84 	movi	r2,-2
10004274:	1884703a 	and	r2,r3,r2
10004278:	1001703a 	wrctl	status,r2
  
  return context;
1000427c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
10004280:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
10004284:	00840034 	movhi	r2,4096
10004288:	109f8104 	addi	r2,r2,32260
1000428c:	e0fff817 	ldw	r3,-32(fp)
10004290:	180690fa 	slli	r3,r3,3
10004294:	10c5883a 	add	r2,r2,r3
10004298:	e0fffe17 	ldw	r3,-8(fp)
1000429c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
100042a0:	00840034 	movhi	r2,4096
100042a4:	109f8104 	addi	r2,r2,32260
100042a8:	e0fff817 	ldw	r3,-32(fp)
100042ac:	180690fa 	slli	r3,r3,3
100042b0:	10c5883a 	add	r2,r2,r3
100042b4:	10800104 	addi	r2,r2,4
100042b8:	e0ffff17 	ldw	r3,-4(fp)
100042bc:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
100042c0:	e0bffe17 	ldw	r2,-8(fp)
100042c4:	10000526 	beq	r2,zero,100042dc <alt_iic_isr_register+0xb4>
100042c8:	e0bff817 	ldw	r2,-32(fp)
100042cc:	100b883a 	mov	r5,r2
100042d0:	e13ffc17 	ldw	r4,-16(fp)
100042d4:	00040c80 	call	100040c8 <alt_ic_irq_enable>
100042d8:	00000406 	br	100042ec <alt_iic_isr_register+0xc4>
100042dc:	e0bff817 	ldw	r2,-32(fp)
100042e0:	100b883a 	mov	r5,r2
100042e4:	e13ffc17 	ldw	r4,-16(fp)
100042e8:	00041500 	call	10004150 <alt_ic_irq_disable>
100042ec:	e0bff715 	stw	r2,-36(fp)
100042f0:	e0bffa17 	ldw	r2,-24(fp)
100042f4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
100042f8:	e0bff917 	ldw	r2,-28(fp)
100042fc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
10004300:	e0bff717 	ldw	r2,-36(fp)
}
10004304:	e037883a 	mov	sp,fp
10004308:	dfc00117 	ldw	ra,4(sp)
1000430c:	df000017 	ldw	fp,0(sp)
10004310:	dec00204 	addi	sp,sp,8
10004314:	f800283a 	ret

10004318 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
10004318:	defff804 	addi	sp,sp,-32
1000431c:	dfc00715 	stw	ra,28(sp)
10004320:	df000615 	stw	fp,24(sp)
10004324:	dc000515 	stw	r16,20(sp)
10004328:	df000604 	addi	fp,sp,24
1000432c:	e13ffb15 	stw	r4,-20(fp)
10004330:	e17ffc15 	stw	r5,-16(fp)
10004334:	e1bffd15 	stw	r6,-12(fp)
10004338:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
1000433c:	e1bffe17 	ldw	r6,-8(fp)
10004340:	e17ffd17 	ldw	r5,-12(fp)
10004344:	e13ffc17 	ldw	r4,-16(fp)
10004348:	00045a00 	call	100045a0 <open>
1000434c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
10004350:	e0bffa17 	ldw	r2,-24(fp)
10004354:	10002216 	blt	r2,zero,100043e0 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
10004358:	04040034 	movhi	r16,4096
1000435c:	841a4804 	addi	r16,r16,26912
10004360:	e0bffa17 	ldw	r2,-24(fp)
10004364:	01400304 	movi	r5,12
10004368:	1009883a 	mov	r4,r2
1000436c:	0002cb80 	call	10002cb8 <__mulsi3>
10004370:	8085883a 	add	r2,r16,r2
10004374:	10c00017 	ldw	r3,0(r2)
10004378:	e0bffb17 	ldw	r2,-20(fp)
1000437c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
10004380:	04040034 	movhi	r16,4096
10004384:	841a4804 	addi	r16,r16,26912
10004388:	e0bffa17 	ldw	r2,-24(fp)
1000438c:	01400304 	movi	r5,12
10004390:	1009883a 	mov	r4,r2
10004394:	0002cb80 	call	10002cb8 <__mulsi3>
10004398:	8085883a 	add	r2,r16,r2
1000439c:	10800104 	addi	r2,r2,4
100043a0:	10c00017 	ldw	r3,0(r2)
100043a4:	e0bffb17 	ldw	r2,-20(fp)
100043a8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
100043ac:	04040034 	movhi	r16,4096
100043b0:	841a4804 	addi	r16,r16,26912
100043b4:	e0bffa17 	ldw	r2,-24(fp)
100043b8:	01400304 	movi	r5,12
100043bc:	1009883a 	mov	r4,r2
100043c0:	0002cb80 	call	10002cb8 <__mulsi3>
100043c4:	8085883a 	add	r2,r16,r2
100043c8:	10800204 	addi	r2,r2,8
100043cc:	10c00017 	ldw	r3,0(r2)
100043d0:	e0bffb17 	ldw	r2,-20(fp)
100043d4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
100043d8:	e13ffa17 	ldw	r4,-24(fp)
100043dc:	00046fc0 	call	100046fc <alt_release_fd>
  }
} 
100043e0:	0001883a 	nop
100043e4:	e6ffff04 	addi	sp,fp,-4
100043e8:	dfc00217 	ldw	ra,8(sp)
100043ec:	df000117 	ldw	fp,4(sp)
100043f0:	dc000017 	ldw	r16,0(sp)
100043f4:	dec00304 	addi	sp,sp,12
100043f8:	f800283a 	ret

100043fc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
100043fc:	defffb04 	addi	sp,sp,-20
10004400:	dfc00415 	stw	ra,16(sp)
10004404:	df000315 	stw	fp,12(sp)
10004408:	df000304 	addi	fp,sp,12
1000440c:	e13ffd15 	stw	r4,-12(fp)
10004410:	e17ffe15 	stw	r5,-8(fp)
10004414:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
10004418:	01c07fc4 	movi	r7,511
1000441c:	01800044 	movi	r6,1
10004420:	e17ffd17 	ldw	r5,-12(fp)
10004424:	01040034 	movhi	r4,4096
10004428:	211a4b04 	addi	r4,r4,26924
1000442c:	00043180 	call	10004318 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
10004430:	01c07fc4 	movi	r7,511
10004434:	000d883a 	mov	r6,zero
10004438:	e17ffe17 	ldw	r5,-8(fp)
1000443c:	01040034 	movhi	r4,4096
10004440:	211a4804 	addi	r4,r4,26912
10004444:	00043180 	call	10004318 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
10004448:	01c07fc4 	movi	r7,511
1000444c:	01800044 	movi	r6,1
10004450:	e17fff17 	ldw	r5,-4(fp)
10004454:	01040034 	movhi	r4,4096
10004458:	211a4e04 	addi	r4,r4,26936
1000445c:	00043180 	call	10004318 <alt_open_fd>
}  
10004460:	0001883a 	nop
10004464:	e037883a 	mov	sp,fp
10004468:	dfc00117 	ldw	ra,4(sp)
1000446c:	df000017 	ldw	fp,0(sp)
10004470:	dec00204 	addi	sp,sp,8
10004474:	f800283a 	ret

10004478 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
10004478:	defffe04 	addi	sp,sp,-8
1000447c:	dfc00115 	stw	ra,4(sp)
10004480:	df000015 	stw	fp,0(sp)
10004484:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
10004488:	d0a00717 	ldw	r2,-32740(gp)
1000448c:	10000326 	beq	r2,zero,1000449c <alt_get_errno+0x24>
10004490:	d0a00717 	ldw	r2,-32740(gp)
10004494:	103ee83a 	callr	r2
10004498:	00000106 	br	100044a0 <alt_get_errno+0x28>
1000449c:	d0a4d104 	addi	r2,gp,-27836
}
100044a0:	e037883a 	mov	sp,fp
100044a4:	dfc00117 	ldw	ra,4(sp)
100044a8:	df000017 	ldw	fp,0(sp)
100044ac:	dec00204 	addi	sp,sp,8
100044b0:	f800283a 	ret

100044b4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
100044b4:	defffb04 	addi	sp,sp,-20
100044b8:	dfc00415 	stw	ra,16(sp)
100044bc:	df000315 	stw	fp,12(sp)
100044c0:	dc000215 	stw	r16,8(sp)
100044c4:	df000304 	addi	fp,sp,12
100044c8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
100044cc:	e0bffe17 	ldw	r2,-8(fp)
100044d0:	10800217 	ldw	r2,8(r2)
100044d4:	10d00034 	orhi	r3,r2,16384
100044d8:	e0bffe17 	ldw	r2,-8(fp)
100044dc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
100044e0:	e03ffd15 	stw	zero,-12(fp)
100044e4:	00002306 	br	10004574 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
100044e8:	04040034 	movhi	r16,4096
100044ec:	841a4804 	addi	r16,r16,26912
100044f0:	e0bffd17 	ldw	r2,-12(fp)
100044f4:	01400304 	movi	r5,12
100044f8:	1009883a 	mov	r4,r2
100044fc:	0002cb80 	call	10002cb8 <__mulsi3>
10004500:	8085883a 	add	r2,r16,r2
10004504:	10c00017 	ldw	r3,0(r2)
10004508:	e0bffe17 	ldw	r2,-8(fp)
1000450c:	10800017 	ldw	r2,0(r2)
10004510:	1880151e 	bne	r3,r2,10004568 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10004514:	04040034 	movhi	r16,4096
10004518:	841a4804 	addi	r16,r16,26912
1000451c:	e0bffd17 	ldw	r2,-12(fp)
10004520:	01400304 	movi	r5,12
10004524:	1009883a 	mov	r4,r2
10004528:	0002cb80 	call	10002cb8 <__mulsi3>
1000452c:	8085883a 	add	r2,r16,r2
10004530:	10800204 	addi	r2,r2,8
10004534:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
10004538:	10000b0e 	bge	r2,zero,10004568 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
1000453c:	01400304 	movi	r5,12
10004540:	e13ffd17 	ldw	r4,-12(fp)
10004544:	0002cb80 	call	10002cb8 <__mulsi3>
10004548:	1007883a 	mov	r3,r2
1000454c:	00840034 	movhi	r2,4096
10004550:	109a4804 	addi	r2,r2,26912
10004554:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
10004558:	e0bffe17 	ldw	r2,-8(fp)
1000455c:	18800226 	beq	r3,r2,10004568 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
10004560:	00bffcc4 	movi	r2,-13
10004564:	00000806 	br	10004588 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
10004568:	e0bffd17 	ldw	r2,-12(fp)
1000456c:	10800044 	addi	r2,r2,1
10004570:	e0bffd15 	stw	r2,-12(fp)
10004574:	d0a00617 	ldw	r2,-32744(gp)
10004578:	1007883a 	mov	r3,r2
1000457c:	e0bffd17 	ldw	r2,-12(fp)
10004580:	18bfd92e 	bgeu	r3,r2,100044e8 <__alt_data_end+0xf80044e8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
10004584:	0005883a 	mov	r2,zero
}
10004588:	e6ffff04 	addi	sp,fp,-4
1000458c:	dfc00217 	ldw	ra,8(sp)
10004590:	df000117 	ldw	fp,4(sp)
10004594:	dc000017 	ldw	r16,0(sp)
10004598:	dec00304 	addi	sp,sp,12
1000459c:	f800283a 	ret

100045a0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
100045a0:	defff604 	addi	sp,sp,-40
100045a4:	dfc00915 	stw	ra,36(sp)
100045a8:	df000815 	stw	fp,32(sp)
100045ac:	df000804 	addi	fp,sp,32
100045b0:	e13ffd15 	stw	r4,-12(fp)
100045b4:	e17ffe15 	stw	r5,-8(fp)
100045b8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
100045bc:	00bfffc4 	movi	r2,-1
100045c0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
100045c4:	00bffb44 	movi	r2,-19
100045c8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
100045cc:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
100045d0:	d1600404 	addi	r5,gp,-32752
100045d4:	e13ffd17 	ldw	r4,-12(fp)
100045d8:	00049480 	call	10004948 <alt_find_dev>
100045dc:	e0bff815 	stw	r2,-32(fp)
100045e0:	e0bff817 	ldw	r2,-32(fp)
100045e4:	1000051e 	bne	r2,zero,100045fc <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
100045e8:	e13ffd17 	ldw	r4,-12(fp)
100045ec:	00049d80 	call	100049d8 <alt_find_file>
100045f0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
100045f4:	00800044 	movi	r2,1
100045f8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
100045fc:	e0bff817 	ldw	r2,-32(fp)
10004600:	10002b26 	beq	r2,zero,100046b0 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
10004604:	e13ff817 	ldw	r4,-32(fp)
10004608:	0004ae00 	call	10004ae0 <alt_get_fd>
1000460c:	e0bff915 	stw	r2,-28(fp)
10004610:	e0bff917 	ldw	r2,-28(fp)
10004614:	1000030e 	bge	r2,zero,10004624 <open+0x84>
    {
      status = index;
10004618:	e0bff917 	ldw	r2,-28(fp)
1000461c:	e0bffa15 	stw	r2,-24(fp)
10004620:	00002506 	br	100046b8 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
10004624:	01400304 	movi	r5,12
10004628:	e13ff917 	ldw	r4,-28(fp)
1000462c:	0002cb80 	call	10002cb8 <__mulsi3>
10004630:	1007883a 	mov	r3,r2
10004634:	00840034 	movhi	r2,4096
10004638:	109a4804 	addi	r2,r2,26912
1000463c:	1885883a 	add	r2,r3,r2
10004640:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
10004644:	e0fffe17 	ldw	r3,-8(fp)
10004648:	00900034 	movhi	r2,16384
1000464c:	10bfffc4 	addi	r2,r2,-1
10004650:	1886703a 	and	r3,r3,r2
10004654:	e0bffc17 	ldw	r2,-16(fp)
10004658:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
1000465c:	e0bffb17 	ldw	r2,-20(fp)
10004660:	1000051e 	bne	r2,zero,10004678 <open+0xd8>
10004664:	e13ffc17 	ldw	r4,-16(fp)
10004668:	00044b40 	call	100044b4 <alt_file_locked>
1000466c:	e0bffa15 	stw	r2,-24(fp)
10004670:	e0bffa17 	ldw	r2,-24(fp)
10004674:	10001016 	blt	r2,zero,100046b8 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
10004678:	e0bff817 	ldw	r2,-32(fp)
1000467c:	10800317 	ldw	r2,12(r2)
10004680:	10000826 	beq	r2,zero,100046a4 <open+0x104>
10004684:	e0bff817 	ldw	r2,-32(fp)
10004688:	10800317 	ldw	r2,12(r2)
1000468c:	e1ffff17 	ldw	r7,-4(fp)
10004690:	e1bffe17 	ldw	r6,-8(fp)
10004694:	e17ffd17 	ldw	r5,-12(fp)
10004698:	e13ffc17 	ldw	r4,-16(fp)
1000469c:	103ee83a 	callr	r2
100046a0:	00000106 	br	100046a8 <open+0x108>
100046a4:	0005883a 	mov	r2,zero
100046a8:	e0bffa15 	stw	r2,-24(fp)
100046ac:	00000206 	br	100046b8 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
100046b0:	00bffb44 	movi	r2,-19
100046b4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
100046b8:	e0bffa17 	ldw	r2,-24(fp)
100046bc:	1000090e 	bge	r2,zero,100046e4 <open+0x144>
  {
    alt_release_fd (index);  
100046c0:	e13ff917 	ldw	r4,-28(fp)
100046c4:	00046fc0 	call	100046fc <alt_release_fd>
    ALT_ERRNO = -status;
100046c8:	00044780 	call	10004478 <alt_get_errno>
100046cc:	1007883a 	mov	r3,r2
100046d0:	e0bffa17 	ldw	r2,-24(fp)
100046d4:	0085c83a 	sub	r2,zero,r2
100046d8:	18800015 	stw	r2,0(r3)
    return -1;
100046dc:	00bfffc4 	movi	r2,-1
100046e0:	00000106 	br	100046e8 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
100046e4:	e0bff917 	ldw	r2,-28(fp)
}
100046e8:	e037883a 	mov	sp,fp
100046ec:	dfc00117 	ldw	ra,4(sp)
100046f0:	df000017 	ldw	fp,0(sp)
100046f4:	dec00204 	addi	sp,sp,8
100046f8:	f800283a 	ret

100046fc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
100046fc:	defffc04 	addi	sp,sp,-16
10004700:	dfc00315 	stw	ra,12(sp)
10004704:	df000215 	stw	fp,8(sp)
10004708:	dc000115 	stw	r16,4(sp)
1000470c:	df000204 	addi	fp,sp,8
10004710:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
10004714:	e0bffe17 	ldw	r2,-8(fp)
10004718:	108000d0 	cmplti	r2,r2,3
1000471c:	1000111e 	bne	r2,zero,10004764 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
10004720:	04040034 	movhi	r16,4096
10004724:	841a4804 	addi	r16,r16,26912
10004728:	e0bffe17 	ldw	r2,-8(fp)
1000472c:	01400304 	movi	r5,12
10004730:	1009883a 	mov	r4,r2
10004734:	0002cb80 	call	10002cb8 <__mulsi3>
10004738:	8085883a 	add	r2,r16,r2
1000473c:	10800204 	addi	r2,r2,8
10004740:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
10004744:	04040034 	movhi	r16,4096
10004748:	841a4804 	addi	r16,r16,26912
1000474c:	e0bffe17 	ldw	r2,-8(fp)
10004750:	01400304 	movi	r5,12
10004754:	1009883a 	mov	r4,r2
10004758:	0002cb80 	call	10002cb8 <__mulsi3>
1000475c:	8085883a 	add	r2,r16,r2
10004760:	10000015 	stw	zero,0(r2)
  }
}
10004764:	0001883a 	nop
10004768:	e6ffff04 	addi	sp,fp,-4
1000476c:	dfc00217 	ldw	ra,8(sp)
10004770:	df000117 	ldw	fp,4(sp)
10004774:	dc000017 	ldw	r16,0(sp)
10004778:	dec00304 	addi	sp,sp,12
1000477c:	f800283a 	ret

10004780 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
10004780:	defffa04 	addi	sp,sp,-24
10004784:	df000515 	stw	fp,20(sp)
10004788:	df000504 	addi	fp,sp,20
1000478c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
10004790:	0005303a 	rdctl	r2,status
10004794:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
10004798:	e0fffc17 	ldw	r3,-16(fp)
1000479c:	00bfff84 	movi	r2,-2
100047a0:	1884703a 	and	r2,r3,r2
100047a4:	1001703a 	wrctl	status,r2
  
  return context;
100047a8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
100047ac:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
100047b0:	e0bfff17 	ldw	r2,-4(fp)
100047b4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
100047b8:	e0bffd17 	ldw	r2,-12(fp)
100047bc:	10800017 	ldw	r2,0(r2)
100047c0:	e0fffd17 	ldw	r3,-12(fp)
100047c4:	18c00117 	ldw	r3,4(r3)
100047c8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
100047cc:	e0bffd17 	ldw	r2,-12(fp)
100047d0:	10800117 	ldw	r2,4(r2)
100047d4:	e0fffd17 	ldw	r3,-12(fp)
100047d8:	18c00017 	ldw	r3,0(r3)
100047dc:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
100047e0:	e0bffd17 	ldw	r2,-12(fp)
100047e4:	e0fffd17 	ldw	r3,-12(fp)
100047e8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
100047ec:	e0bffd17 	ldw	r2,-12(fp)
100047f0:	e0fffd17 	ldw	r3,-12(fp)
100047f4:	10c00015 	stw	r3,0(r2)
100047f8:	e0bffb17 	ldw	r2,-20(fp)
100047fc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
10004800:	e0bffe17 	ldw	r2,-8(fp)
10004804:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
10004808:	0001883a 	nop
1000480c:	e037883a 	mov	sp,fp
10004810:	df000017 	ldw	fp,0(sp)
10004814:	dec00104 	addi	sp,sp,4
10004818:	f800283a 	ret

1000481c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
1000481c:	defffb04 	addi	sp,sp,-20
10004820:	dfc00415 	stw	ra,16(sp)
10004824:	df000315 	stw	fp,12(sp)
10004828:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
1000482c:	d0a00917 	ldw	r2,-32732(gp)
10004830:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
10004834:	d0a4d717 	ldw	r2,-27812(gp)
10004838:	10800044 	addi	r2,r2,1
1000483c:	d0a4d715 	stw	r2,-27812(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
10004840:	00002e06 	br	100048fc <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
10004844:	e0bffd17 	ldw	r2,-12(fp)
10004848:	10800017 	ldw	r2,0(r2)
1000484c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
10004850:	e0bffd17 	ldw	r2,-12(fp)
10004854:	10800403 	ldbu	r2,16(r2)
10004858:	10803fcc 	andi	r2,r2,255
1000485c:	10000426 	beq	r2,zero,10004870 <alt_tick+0x54>
10004860:	d0a4d717 	ldw	r2,-27812(gp)
10004864:	1000021e 	bne	r2,zero,10004870 <alt_tick+0x54>
    {
      alarm->rollover = 0;
10004868:	e0bffd17 	ldw	r2,-12(fp)
1000486c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
10004870:	e0bffd17 	ldw	r2,-12(fp)
10004874:	10800217 	ldw	r2,8(r2)
10004878:	d0e4d717 	ldw	r3,-27812(gp)
1000487c:	18801d36 	bltu	r3,r2,100048f4 <alt_tick+0xd8>
10004880:	e0bffd17 	ldw	r2,-12(fp)
10004884:	10800403 	ldbu	r2,16(r2)
10004888:	10803fcc 	andi	r2,r2,255
1000488c:	1000191e 	bne	r2,zero,100048f4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
10004890:	e0bffd17 	ldw	r2,-12(fp)
10004894:	10800317 	ldw	r2,12(r2)
10004898:	e0fffd17 	ldw	r3,-12(fp)
1000489c:	18c00517 	ldw	r3,20(r3)
100048a0:	1809883a 	mov	r4,r3
100048a4:	103ee83a 	callr	r2
100048a8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
100048ac:	e0bfff17 	ldw	r2,-4(fp)
100048b0:	1000031e 	bne	r2,zero,100048c0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
100048b4:	e13ffd17 	ldw	r4,-12(fp)
100048b8:	00047800 	call	10004780 <alt_alarm_stop>
100048bc:	00000d06 	br	100048f4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
100048c0:	e0bffd17 	ldw	r2,-12(fp)
100048c4:	10c00217 	ldw	r3,8(r2)
100048c8:	e0bfff17 	ldw	r2,-4(fp)
100048cc:	1887883a 	add	r3,r3,r2
100048d0:	e0bffd17 	ldw	r2,-12(fp)
100048d4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
100048d8:	e0bffd17 	ldw	r2,-12(fp)
100048dc:	10c00217 	ldw	r3,8(r2)
100048e0:	d0a4d717 	ldw	r2,-27812(gp)
100048e4:	1880032e 	bgeu	r3,r2,100048f4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
100048e8:	e0bffd17 	ldw	r2,-12(fp)
100048ec:	00c00044 	movi	r3,1
100048f0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
100048f4:	e0bffe17 	ldw	r2,-8(fp)
100048f8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
100048fc:	e0fffd17 	ldw	r3,-12(fp)
10004900:	d0a00904 	addi	r2,gp,-32732
10004904:	18bfcf1e 	bne	r3,r2,10004844 <__alt_data_end+0xf8004844>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
10004908:	0001883a 	nop
}
1000490c:	0001883a 	nop
10004910:	e037883a 	mov	sp,fp
10004914:	dfc00117 	ldw	ra,4(sp)
10004918:	df000017 	ldw	fp,0(sp)
1000491c:	dec00204 	addi	sp,sp,8
10004920:	f800283a 	ret

10004924 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
10004924:	deffff04 	addi	sp,sp,-4
10004928:	df000015 	stw	fp,0(sp)
1000492c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
10004930:	000170fa 	wrctl	ienable,zero
}
10004934:	0001883a 	nop
10004938:	e037883a 	mov	sp,fp
1000493c:	df000017 	ldw	fp,0(sp)
10004940:	dec00104 	addi	sp,sp,4
10004944:	f800283a 	ret

10004948 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
10004948:	defffa04 	addi	sp,sp,-24
1000494c:	dfc00515 	stw	ra,20(sp)
10004950:	df000415 	stw	fp,16(sp)
10004954:	df000404 	addi	fp,sp,16
10004958:	e13ffe15 	stw	r4,-8(fp)
1000495c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
10004960:	e0bfff17 	ldw	r2,-4(fp)
10004964:	10800017 	ldw	r2,0(r2)
10004968:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
1000496c:	e13ffe17 	ldw	r4,-8(fp)
10004970:	00024240 	call	10002424 <strlen>
10004974:	10800044 	addi	r2,r2,1
10004978:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
1000497c:	00000d06 	br	100049b4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
10004980:	e0bffc17 	ldw	r2,-16(fp)
10004984:	10800217 	ldw	r2,8(r2)
10004988:	e0fffd17 	ldw	r3,-12(fp)
1000498c:	180d883a 	mov	r6,r3
10004990:	e17ffe17 	ldw	r5,-8(fp)
10004994:	1009883a 	mov	r4,r2
10004998:	0004c740 	call	10004c74 <memcmp>
1000499c:	1000021e 	bne	r2,zero,100049a8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
100049a0:	e0bffc17 	ldw	r2,-16(fp)
100049a4:	00000706 	br	100049c4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
100049a8:	e0bffc17 	ldw	r2,-16(fp)
100049ac:	10800017 	ldw	r2,0(r2)
100049b0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
100049b4:	e0fffc17 	ldw	r3,-16(fp)
100049b8:	e0bfff17 	ldw	r2,-4(fp)
100049bc:	18bff01e 	bne	r3,r2,10004980 <__alt_data_end+0xf8004980>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
100049c0:	0005883a 	mov	r2,zero
}
100049c4:	e037883a 	mov	sp,fp
100049c8:	dfc00117 	ldw	ra,4(sp)
100049cc:	df000017 	ldw	fp,0(sp)
100049d0:	dec00204 	addi	sp,sp,8
100049d4:	f800283a 	ret

100049d8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
100049d8:	defffb04 	addi	sp,sp,-20
100049dc:	dfc00415 	stw	ra,16(sp)
100049e0:	df000315 	stw	fp,12(sp)
100049e4:	df000304 	addi	fp,sp,12
100049e8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
100049ec:	d0a00217 	ldw	r2,-32760(gp)
100049f0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
100049f4:	00003106 	br	10004abc <alt_find_file+0xe4>
  {
    len = strlen(next->name);
100049f8:	e0bffd17 	ldw	r2,-12(fp)
100049fc:	10800217 	ldw	r2,8(r2)
10004a00:	1009883a 	mov	r4,r2
10004a04:	00024240 	call	10002424 <strlen>
10004a08:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
10004a0c:	e0bffd17 	ldw	r2,-12(fp)
10004a10:	10c00217 	ldw	r3,8(r2)
10004a14:	e0bffe17 	ldw	r2,-8(fp)
10004a18:	10bfffc4 	addi	r2,r2,-1
10004a1c:	1885883a 	add	r2,r3,r2
10004a20:	10800003 	ldbu	r2,0(r2)
10004a24:	10803fcc 	andi	r2,r2,255
10004a28:	1080201c 	xori	r2,r2,128
10004a2c:	10bfe004 	addi	r2,r2,-128
10004a30:	10800bd8 	cmpnei	r2,r2,47
10004a34:	1000031e 	bne	r2,zero,10004a44 <alt_find_file+0x6c>
    {
      len -= 1;
10004a38:	e0bffe17 	ldw	r2,-8(fp)
10004a3c:	10bfffc4 	addi	r2,r2,-1
10004a40:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10004a44:	e0bffe17 	ldw	r2,-8(fp)
10004a48:	e0ffff17 	ldw	r3,-4(fp)
10004a4c:	1885883a 	add	r2,r3,r2
10004a50:	10800003 	ldbu	r2,0(r2)
10004a54:	10803fcc 	andi	r2,r2,255
10004a58:	1080201c 	xori	r2,r2,128
10004a5c:	10bfe004 	addi	r2,r2,-128
10004a60:	10800be0 	cmpeqi	r2,r2,47
10004a64:	1000081e 	bne	r2,zero,10004a88 <alt_find_file+0xb0>
10004a68:	e0bffe17 	ldw	r2,-8(fp)
10004a6c:	e0ffff17 	ldw	r3,-4(fp)
10004a70:	1885883a 	add	r2,r3,r2
10004a74:	10800003 	ldbu	r2,0(r2)
10004a78:	10803fcc 	andi	r2,r2,255
10004a7c:	1080201c 	xori	r2,r2,128
10004a80:	10bfe004 	addi	r2,r2,-128
10004a84:	10000a1e 	bne	r2,zero,10004ab0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
10004a88:	e0bffd17 	ldw	r2,-12(fp)
10004a8c:	10800217 	ldw	r2,8(r2)
10004a90:	e0fffe17 	ldw	r3,-8(fp)
10004a94:	180d883a 	mov	r6,r3
10004a98:	e17fff17 	ldw	r5,-4(fp)
10004a9c:	1009883a 	mov	r4,r2
10004aa0:	0004c740 	call	10004c74 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
10004aa4:	1000021e 	bne	r2,zero,10004ab0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
10004aa8:	e0bffd17 	ldw	r2,-12(fp)
10004aac:	00000706 	br	10004acc <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
10004ab0:	e0bffd17 	ldw	r2,-12(fp)
10004ab4:	10800017 	ldw	r2,0(r2)
10004ab8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
10004abc:	e0fffd17 	ldw	r3,-12(fp)
10004ac0:	d0a00204 	addi	r2,gp,-32760
10004ac4:	18bfcc1e 	bne	r3,r2,100049f8 <__alt_data_end+0xf80049f8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
10004ac8:	0005883a 	mov	r2,zero
}
10004acc:	e037883a 	mov	sp,fp
10004ad0:	dfc00117 	ldw	ra,4(sp)
10004ad4:	df000017 	ldw	fp,0(sp)
10004ad8:	dec00204 	addi	sp,sp,8
10004adc:	f800283a 	ret

10004ae0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
10004ae0:	defffa04 	addi	sp,sp,-24
10004ae4:	dfc00515 	stw	ra,20(sp)
10004ae8:	df000415 	stw	fp,16(sp)
10004aec:	dc000315 	stw	r16,12(sp)
10004af0:	df000404 	addi	fp,sp,16
10004af4:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
10004af8:	00bffa04 	movi	r2,-24
10004afc:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10004b00:	e03ffc15 	stw	zero,-16(fp)
10004b04:	00001d06 	br	10004b7c <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
10004b08:	04040034 	movhi	r16,4096
10004b0c:	841a4804 	addi	r16,r16,26912
10004b10:	e0bffc17 	ldw	r2,-16(fp)
10004b14:	01400304 	movi	r5,12
10004b18:	1009883a 	mov	r4,r2
10004b1c:	0002cb80 	call	10002cb8 <__mulsi3>
10004b20:	8085883a 	add	r2,r16,r2
10004b24:	10800017 	ldw	r2,0(r2)
10004b28:	1000111e 	bne	r2,zero,10004b70 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
10004b2c:	04040034 	movhi	r16,4096
10004b30:	841a4804 	addi	r16,r16,26912
10004b34:	e0bffc17 	ldw	r2,-16(fp)
10004b38:	01400304 	movi	r5,12
10004b3c:	1009883a 	mov	r4,r2
10004b40:	0002cb80 	call	10002cb8 <__mulsi3>
10004b44:	8085883a 	add	r2,r16,r2
10004b48:	e0fffe17 	ldw	r3,-8(fp)
10004b4c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
10004b50:	d0e00617 	ldw	r3,-32744(gp)
10004b54:	e0bffc17 	ldw	r2,-16(fp)
10004b58:	1880020e 	bge	r3,r2,10004b64 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
10004b5c:	e0bffc17 	ldw	r2,-16(fp)
10004b60:	d0a00615 	stw	r2,-32744(gp)
      }
      rc = i;
10004b64:	e0bffc17 	ldw	r2,-16(fp)
10004b68:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
10004b6c:	00000606 	br	10004b88 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
10004b70:	e0bffc17 	ldw	r2,-16(fp)
10004b74:	10800044 	addi	r2,r2,1
10004b78:	e0bffc15 	stw	r2,-16(fp)
10004b7c:	e0bffc17 	ldw	r2,-16(fp)
10004b80:	10800810 	cmplti	r2,r2,32
10004b84:	103fe01e 	bne	r2,zero,10004b08 <__alt_data_end+0xf8004b08>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
10004b88:	e0bffd17 	ldw	r2,-12(fp)
}
10004b8c:	e6ffff04 	addi	sp,fp,-4
10004b90:	dfc00217 	ldw	ra,8(sp)
10004b94:	df000117 	ldw	fp,4(sp)
10004b98:	dc000017 	ldw	r16,0(sp)
10004b9c:	dec00304 	addi	sp,sp,12
10004ba0:	f800283a 	ret

10004ba4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
10004ba4:	defffe04 	addi	sp,sp,-8
10004ba8:	df000115 	stw	fp,4(sp)
10004bac:	df000104 	addi	fp,sp,4
10004bb0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
10004bb4:	e0bfff17 	ldw	r2,-4(fp)
10004bb8:	10bffe84 	addi	r2,r2,-6
10004bbc:	10c00428 	cmpgeui	r3,r2,16
10004bc0:	18001a1e 	bne	r3,zero,10004c2c <alt_exception_cause_generated_bad_addr+0x88>
10004bc4:	100690ba 	slli	r3,r2,2
10004bc8:	00840034 	movhi	r2,4096
10004bcc:	1092f704 	addi	r2,r2,19420
10004bd0:	1885883a 	add	r2,r3,r2
10004bd4:	10800017 	ldw	r2,0(r2)
10004bd8:	1000683a 	jmp	r2
10004bdc:	10004c1c 	xori	zero,r2,304
10004be0:	10004c1c 	xori	zero,r2,304
10004be4:	10004c2c 	andhi	zero,r2,304
10004be8:	10004c2c 	andhi	zero,r2,304
10004bec:	10004c2c 	andhi	zero,r2,304
10004bf0:	10004c1c 	xori	zero,r2,304
10004bf4:	10004c24 	muli	zero,r2,304
10004bf8:	10004c2c 	andhi	zero,r2,304
10004bfc:	10004c1c 	xori	zero,r2,304
10004c00:	10004c1c 	xori	zero,r2,304
10004c04:	10004c2c 	andhi	zero,r2,304
10004c08:	10004c1c 	xori	zero,r2,304
10004c0c:	10004c24 	muli	zero,r2,304
10004c10:	10004c2c 	andhi	zero,r2,304
10004c14:	10004c2c 	andhi	zero,r2,304
10004c18:	10004c1c 	xori	zero,r2,304
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
10004c1c:	00800044 	movi	r2,1
10004c20:	00000306 	br	10004c30 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
10004c24:	0005883a 	mov	r2,zero
10004c28:	00000106 	br	10004c30 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
10004c2c:	0005883a 	mov	r2,zero
  }
}
10004c30:	e037883a 	mov	sp,fp
10004c34:	df000017 	ldw	fp,0(sp)
10004c38:	dec00104 	addi	sp,sp,4
10004c3c:	f800283a 	ret

10004c40 <atexit>:
10004c40:	200b883a 	mov	r5,r4
10004c44:	000f883a 	mov	r7,zero
10004c48:	000d883a 	mov	r6,zero
10004c4c:	0009883a 	mov	r4,zero
10004c50:	0004ccc1 	jmpi	10004ccc <__register_exitproc>

10004c54 <exit>:
10004c54:	defffe04 	addi	sp,sp,-8
10004c58:	000b883a 	mov	r5,zero
10004c5c:	dc000015 	stw	r16,0(sp)
10004c60:	dfc00115 	stw	ra,4(sp)
10004c64:	2021883a 	mov	r16,r4
10004c68:	0004e240 	call	10004e24 <__call_exitprocs>
10004c6c:	8009883a 	mov	r4,r16
10004c70:	0004fb40 	call	10004fb4 <_exit>

10004c74 <memcmp>:
10004c74:	218d883a 	add	r6,r4,r6
10004c78:	21800826 	beq	r4,r6,10004c9c <memcmp+0x28>
10004c7c:	20800003 	ldbu	r2,0(r4)
10004c80:	28c00003 	ldbu	r3,0(r5)
10004c84:	10c00226 	beq	r2,r3,10004c90 <memcmp+0x1c>
10004c88:	10c5c83a 	sub	r2,r2,r3
10004c8c:	f800283a 	ret
10004c90:	21000044 	addi	r4,r4,1
10004c94:	29400044 	addi	r5,r5,1
10004c98:	003ff706 	br	10004c78 <__alt_data_end+0xf8004c78>
10004c9c:	0005883a 	mov	r2,zero
10004ca0:	f800283a 	ret

10004ca4 <memcpy>:
10004ca4:	2005883a 	mov	r2,r4
10004ca8:	2007883a 	mov	r3,r4
10004cac:	218d883a 	add	r6,r4,r6
10004cb0:	19800526 	beq	r3,r6,10004cc8 <memcpy+0x24>
10004cb4:	29000003 	ldbu	r4,0(r5)
10004cb8:	18c00044 	addi	r3,r3,1
10004cbc:	29400044 	addi	r5,r5,1
10004cc0:	193fffc5 	stb	r4,-1(r3)
10004cc4:	003ffa06 	br	10004cb0 <__alt_data_end+0xf8004cb0>
10004cc8:	f800283a 	ret

10004ccc <__register_exitproc>:
10004ccc:	00840034 	movhi	r2,4096
10004cd0:	109aa804 	addi	r2,r2,27296
10004cd4:	10c00017 	ldw	r3,0(r2)
10004cd8:	defff904 	addi	sp,sp,-28
10004cdc:	dc000015 	stw	r16,0(sp)
10004ce0:	1c000c17 	ldw	r16,48(r3)
10004ce4:	dd400515 	stw	r21,20(sp)
10004ce8:	dd000415 	stw	r20,16(sp)
10004cec:	dcc00315 	stw	r19,12(sp)
10004cf0:	dc800215 	stw	r18,8(sp)
10004cf4:	dc400115 	stw	r17,4(sp)
10004cf8:	dfc00615 	stw	ra,24(sp)
10004cfc:	202b883a 	mov	r21,r4
10004d00:	2823883a 	mov	r17,r5
10004d04:	3027883a 	mov	r19,r6
10004d08:	3825883a 	mov	r18,r7
10004d0c:	1029883a 	mov	r20,r2
10004d10:	8000021e 	bne	r16,zero,10004d1c <__register_exitproc+0x50>
10004d14:	1c000d04 	addi	r16,r3,52
10004d18:	1c000c15 	stw	r16,48(r3)
10004d1c:	80800117 	ldw	r2,4(r16)
10004d20:	00c007c4 	movi	r3,31
10004d24:	1880110e 	bge	r3,r2,10004d6c <__register_exitproc+0xa0>
10004d28:	00800034 	movhi	r2,0
10004d2c:	10800004 	addi	r2,r2,0
10004d30:	1000021e 	bne	r2,zero,10004d3c <__register_exitproc+0x70>
10004d34:	00bfffc4 	movi	r2,-1
10004d38:	00003106 	br	10004e00 <__register_exitproc+0x134>
10004d3c:	01002304 	movi	r4,140
10004d40:	00000000 	call	10000000 <__alt_mem_sdram>
10004d44:	1021883a 	mov	r16,r2
10004d48:	103ffa26 	beq	r2,zero,10004d34 <__alt_data_end+0xf8004d34>
10004d4c:	10000115 	stw	zero,4(r2)
10004d50:	a0800017 	ldw	r2,0(r20)
10004d54:	10c00c17 	ldw	r3,48(r2)
10004d58:	80c00015 	stw	r3,0(r16)
10004d5c:	14000c15 	stw	r16,48(r2)
10004d60:	80002215 	stw	zero,136(r16)
10004d64:	a8001d26 	beq	r21,zero,10004ddc <__register_exitproc+0x110>
10004d68:	00000606 	br	10004d84 <__register_exitproc+0xb8>
10004d6c:	a8001b26 	beq	r21,zero,10004ddc <__register_exitproc+0x110>
10004d70:	80802217 	ldw	r2,136(r16)
10004d74:	1000091e 	bne	r2,zero,10004d9c <__register_exitproc+0xd0>
10004d78:	00800034 	movhi	r2,0
10004d7c:	10800004 	addi	r2,r2,0
10004d80:	103fec26 	beq	r2,zero,10004d34 <__alt_data_end+0xf8004d34>
10004d84:	01004204 	movi	r4,264
10004d88:	00000000 	call	10000000 <__alt_mem_sdram>
10004d8c:	103fe926 	beq	r2,zero,10004d34 <__alt_data_end+0xf8004d34>
10004d90:	10004015 	stw	zero,256(r2)
10004d94:	10004115 	stw	zero,260(r2)
10004d98:	80802215 	stw	r2,136(r16)
10004d9c:	81400117 	ldw	r5,4(r16)
10004da0:	01000044 	movi	r4,1
10004da4:	2947883a 	add	r3,r5,r5
10004da8:	18c7883a 	add	r3,r3,r3
10004dac:	10c7883a 	add	r3,r2,r3
10004db0:	1cc00015 	stw	r19,0(r3)
10004db4:	2148983a 	sll	r4,r4,r5
10004db8:	11404017 	ldw	r5,256(r2)
10004dbc:	290ab03a 	or	r5,r5,r4
10004dc0:	11404015 	stw	r5,256(r2)
10004dc4:	1c802015 	stw	r18,128(r3)
10004dc8:	00c00084 	movi	r3,2
10004dcc:	a8c0031e 	bne	r21,r3,10004ddc <__register_exitproc+0x110>
10004dd0:	10c04117 	ldw	r3,260(r2)
10004dd4:	1908b03a 	or	r4,r3,r4
10004dd8:	11004115 	stw	r4,260(r2)
10004ddc:	80800117 	ldw	r2,4(r16)
10004de0:	10c00044 	addi	r3,r2,1
10004de4:	10800084 	addi	r2,r2,2
10004de8:	1085883a 	add	r2,r2,r2
10004dec:	1085883a 	add	r2,r2,r2
10004df0:	80c00115 	stw	r3,4(r16)
10004df4:	80a1883a 	add	r16,r16,r2
10004df8:	84400015 	stw	r17,0(r16)
10004dfc:	0005883a 	mov	r2,zero
10004e00:	dfc00617 	ldw	ra,24(sp)
10004e04:	dd400517 	ldw	r21,20(sp)
10004e08:	dd000417 	ldw	r20,16(sp)
10004e0c:	dcc00317 	ldw	r19,12(sp)
10004e10:	dc800217 	ldw	r18,8(sp)
10004e14:	dc400117 	ldw	r17,4(sp)
10004e18:	dc000017 	ldw	r16,0(sp)
10004e1c:	dec00704 	addi	sp,sp,28
10004e20:	f800283a 	ret

10004e24 <__call_exitprocs>:
10004e24:	defff504 	addi	sp,sp,-44
10004e28:	dd000515 	stw	r20,20(sp)
10004e2c:	05040034 	movhi	r20,4096
10004e30:	dc800315 	stw	r18,12(sp)
10004e34:	dfc00a15 	stw	ra,40(sp)
10004e38:	df000915 	stw	fp,36(sp)
10004e3c:	ddc00815 	stw	r23,32(sp)
10004e40:	dd800715 	stw	r22,28(sp)
10004e44:	dd400615 	stw	r21,24(sp)
10004e48:	dcc00415 	stw	r19,16(sp)
10004e4c:	dc400215 	stw	r17,8(sp)
10004e50:	dc000115 	stw	r16,4(sp)
10004e54:	d9000015 	stw	r4,0(sp)
10004e58:	2825883a 	mov	r18,r5
10004e5c:	a51aa804 	addi	r20,r20,27296
10004e60:	a4400017 	ldw	r17,0(r20)
10004e64:	8cc00c17 	ldw	r19,48(r17)
10004e68:	8c400c04 	addi	r17,r17,48
10004e6c:	98004526 	beq	r19,zero,10004f84 <__call_exitprocs+0x160>
10004e70:	9c000117 	ldw	r16,4(r19)
10004e74:	00900034 	movhi	r2,16384
10004e78:	10bfffc4 	addi	r2,r2,-1
10004e7c:	9d402217 	ldw	r21,136(r19)
10004e80:	85bfffc4 	addi	r22,r16,-1
10004e84:	80a1883a 	add	r16,r16,r2
10004e88:	8421883a 	add	r16,r16,r16
10004e8c:	8421883a 	add	r16,r16,r16
10004e90:	ac2f883a 	add	r23,r21,r16
10004e94:	84000204 	addi	r16,r16,8
10004e98:	9c21883a 	add	r16,r19,r16
10004e9c:	b0002716 	blt	r22,zero,10004f3c <__call_exitprocs+0x118>
10004ea0:	90000726 	beq	r18,zero,10004ec0 <__call_exitprocs+0x9c>
10004ea4:	a800041e 	bne	r21,zero,10004eb8 <__call_exitprocs+0x94>
10004ea8:	b5bfffc4 	addi	r22,r22,-1
10004eac:	bdffff04 	addi	r23,r23,-4
10004eb0:	843fff04 	addi	r16,r16,-4
10004eb4:	003ff906 	br	10004e9c <__alt_data_end+0xf8004e9c>
10004eb8:	b9002017 	ldw	r4,128(r23)
10004ebc:	913ffa1e 	bne	r18,r4,10004ea8 <__alt_data_end+0xf8004ea8>
10004ec0:	99000117 	ldw	r4,4(r19)
10004ec4:	82000017 	ldw	r8,0(r16)
10004ec8:	213fffc4 	addi	r4,r4,-1
10004ecc:	b100021e 	bne	r22,r4,10004ed8 <__call_exitprocs+0xb4>
10004ed0:	9d800115 	stw	r22,4(r19)
10004ed4:	00000106 	br	10004edc <__call_exitprocs+0xb8>
10004ed8:	80000015 	stw	zero,0(r16)
10004edc:	403ff226 	beq	r8,zero,10004ea8 <__alt_data_end+0xf8004ea8>
10004ee0:	9f000117 	ldw	fp,4(r19)
10004ee4:	a8000526 	beq	r21,zero,10004efc <__call_exitprocs+0xd8>
10004ee8:	00800044 	movi	r2,1
10004eec:	1592983a 	sll	r9,r2,r22
10004ef0:	a9404017 	ldw	r5,256(r21)
10004ef4:	494a703a 	and	r5,r9,r5
10004ef8:	2800021e 	bne	r5,zero,10004f04 <__call_exitprocs+0xe0>
10004efc:	403ee83a 	callr	r8
10004f00:	00000906 	br	10004f28 <__call_exitprocs+0x104>
10004f04:	a9004117 	ldw	r4,260(r21)
10004f08:	4908703a 	and	r4,r9,r4
10004f0c:	2000041e 	bne	r4,zero,10004f20 <__call_exitprocs+0xfc>
10004f10:	b9400017 	ldw	r5,0(r23)
10004f14:	d9000017 	ldw	r4,0(sp)
10004f18:	403ee83a 	callr	r8
10004f1c:	00000206 	br	10004f28 <__call_exitprocs+0x104>
10004f20:	b9000017 	ldw	r4,0(r23)
10004f24:	403ee83a 	callr	r8
10004f28:	99000117 	ldw	r4,4(r19)
10004f2c:	e13fcc1e 	bne	fp,r4,10004e60 <__alt_data_end+0xf8004e60>
10004f30:	89000017 	ldw	r4,0(r17)
10004f34:	993fdc26 	beq	r19,r4,10004ea8 <__alt_data_end+0xf8004ea8>
10004f38:	003fc906 	br	10004e60 <__alt_data_end+0xf8004e60>
10004f3c:	00800034 	movhi	r2,0
10004f40:	10800004 	addi	r2,r2,0
10004f44:	10000f26 	beq	r2,zero,10004f84 <__call_exitprocs+0x160>
10004f48:	99400117 	ldw	r5,4(r19)
10004f4c:	99000017 	ldw	r4,0(r19)
10004f50:	2800091e 	bne	r5,zero,10004f78 <__call_exitprocs+0x154>
10004f54:	20000826 	beq	r4,zero,10004f78 <__call_exitprocs+0x154>
10004f58:	89000015 	stw	r4,0(r17)
10004f5c:	a8000226 	beq	r21,zero,10004f68 <__call_exitprocs+0x144>
10004f60:	a809883a 	mov	r4,r21
10004f64:	00000000 	call	10000000 <__alt_mem_sdram>
10004f68:	9809883a 	mov	r4,r19
10004f6c:	00000000 	call	10000000 <__alt_mem_sdram>
10004f70:	8cc00017 	ldw	r19,0(r17)
10004f74:	003fbd06 	br	10004e6c <__alt_data_end+0xf8004e6c>
10004f78:	9823883a 	mov	r17,r19
10004f7c:	2027883a 	mov	r19,r4
10004f80:	003fba06 	br	10004e6c <__alt_data_end+0xf8004e6c>
10004f84:	dfc00a17 	ldw	ra,40(sp)
10004f88:	df000917 	ldw	fp,36(sp)
10004f8c:	ddc00817 	ldw	r23,32(sp)
10004f90:	dd800717 	ldw	r22,28(sp)
10004f94:	dd400617 	ldw	r21,24(sp)
10004f98:	dd000517 	ldw	r20,20(sp)
10004f9c:	dcc00417 	ldw	r19,16(sp)
10004fa0:	dc800317 	ldw	r18,12(sp)
10004fa4:	dc400217 	ldw	r17,8(sp)
10004fa8:	dc000117 	ldw	r16,4(sp)
10004fac:	dec00b04 	addi	sp,sp,44
10004fb0:	f800283a 	ret

10004fb4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
10004fb4:	defffd04 	addi	sp,sp,-12
10004fb8:	df000215 	stw	fp,8(sp)
10004fbc:	df000204 	addi	fp,sp,8
10004fc0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
10004fc4:	0001883a 	nop
10004fc8:	e0bfff17 	ldw	r2,-4(fp)
10004fcc:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
10004fd0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
10004fd4:	10000226 	beq	r2,zero,10004fe0 <_exit+0x2c>
    ALT_SIM_FAIL();
10004fd8:	002af070 	cmpltui	zero,zero,43969
10004fdc:	00000106 	br	10004fe4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
10004fe0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
10004fe4:	003fff06 	br	10004fe4 <__alt_data_end+0xf8004fe4>
