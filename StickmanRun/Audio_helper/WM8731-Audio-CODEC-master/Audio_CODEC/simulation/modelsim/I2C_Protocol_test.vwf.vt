// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Intel and sold by Intel or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/20/2019 17:59:22"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          I2C_Protocol
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module I2C_Protocol_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [7:0] MUX_input;
reg treg_SDIN;
reg clk;
reg reset;
// wires                                               
wire SCLK;
wire SDIN;

// assign statements (if any)                          
assign SDIN = treg_SDIN;
I2C_Protocol i1 (
// port map - connection between master ports and signals/registers   
	.MUX_input(MUX_input),
	.SCLK(SCLK),
	.SDIN(SDIN),
	.clk(clk),
	.reset(reset)
);
initial 
begin 
#11000000 $stop;
end 

// SDIN
initial
begin
	treg_SDIN = 1'bZ;
	treg_SDIN = #4999000 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #2500 1'b1;
	#2500;
end 

// reset
initial
begin
	reset = 1'b1;
end 
// MUX_input[ 7 ]
initial
begin
	MUX_input[7] = 1'b0;
end 
// MUX_input[ 6 ]
initial
begin
	MUX_input[6] = 1'b0;
end 
// MUX_input[ 5 ]
initial
begin
	MUX_input[5] = 1'b0;
end 
// MUX_input[ 4 ]
initial
begin
	MUX_input[4] = 1'b0;
end 
// MUX_input[ 3 ]
initial
begin
	MUX_input[3] = 1'b1;
end 
// MUX_input[ 2 ]
initial
begin
	MUX_input[2] = 1'b0;
end 
// MUX_input[ 1 ]
initial
begin
	MUX_input[1] = 1'b0;
end 
// MUX_input[ 0 ]
initial
begin
	MUX_input[0] = 1'b1;
end 
endmodule

